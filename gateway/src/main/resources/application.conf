
include "gateway-env.conf"

api.base.path=/ginas/app
api.base.path=${?API_BASE_PATH}

##################################################################
# MAIN CONFIGURATION                                            ##
##################################################################

spring.application.name="gateway"

application.host="http://localhost:8080"
application.host=${?APPLICATION_HOST}

# Server port used in Embedded Tomcat
server.port=""
server.port=${?MS_SERVER_PORT_GATEWAY}

# PUT YOUR SOME SERVICE SPECIFIC ADDITIONS HERE

debug=false
debug=${?DEBUG_GATEWAY}

##################################################################
# SPRING BOOT ACTUATOR SETTINGS FOR MICROSERVICE HEALTH CHECKS  ##
##################################################################

# turn off rabbit mq check for now since we don't use it otherwise it wil say we ar down
management.health.rabbit.enabled: false

management.endpoints.web.base-path="/service-info/api/v1/"${spring.application.name}"/actuator"
management.endpoints.web.exposure.include=${?MS_ACTUATOR_EXPOSE_ENDPOINTS_GATEWAY}
management.endpoint.health.show-details="NEVER"
management.endpoint.health.show-details=${?MS_ACTUATOR_SHOW_HEALTH_DETAILS}
management.endpoint.health.show-details=${?MS_ACTUATOR_SHOW_HEALTH_DETAILS_GATEWAY}


##################################################################
# GSRS CONFIGURATION REPORTS                                    ##
##################################################################

# See document 'How configuration works' for discussion of security implications.
# If in doubt, you probably want false (default) for all optons in production or even online development instances
gsrs.services.config.properties.report.api.enabled=${?CONFIG_PROPERTIES_REPORT_API_ENABLED}
gsrs.services.config.properties.report.log.enabled=${?CONFIG_PROPERTIES_REPORT_LOG_ENABLED}
gsrs.services.config.gatewayProcessedRouteConfigs.report.api.enabled=${?GATEWAY_PROCESSED_ROUTE_CONFIGS_REPORT_API_ENABLED}
gsrs.services.config.gatewayProcessedRouteConfigs.report.log.enabled=${?GATEWAY_PROCESSED_ROUTE_CONFIGS_REPORT_LOG_ENABLED}

##################################################################
# ENDPOINTS CONFIGURATION                                       ##
##################################################################
include "basic-service-info-endpoints.conf"

##################################################################
# EUREKA SETTINGS                                               ##
##################################################################

eureka.instance.hostname=${spring.application.name}
eureka.client.serviceUrl.defaultZone="http://localhost:8761/eureka"
eureka.client.serviceUrl.defaultZone=${?EUREKA_SERVICE_URL}

eureka.client.enabled=false
eureka.client.enabled=${?EUREKA_CLIENT_ENABLED}
eureka.client.enabled=${?EUREKA_CLIENT_ENABLED_GATEWAY}
ribbon.eureka.enabled=false
ribbon.eureka.enabled=${?RIBBON_EUREKA_ENABLED}
ribbon.eureka.enabled=${?RIBBON_EUREKA_ENABLED_GATEWAY}

eureka.instance.statusPageUrl="${application.host}/ginas/app${management.endpoints.web.base-path}/health"
eureka.instance.statusPageUrl=${?EUREKA_STATUS_PAGE_URL_GATEWAY}
eureka.instance.healthCheckUrl="${application.host}/ginas/app${management.endpoints.web.base-path}/health"
eureka.instance.healthCheckUrl=${?EUREKA_HEALTH_CHECK_URL_GATEWAY}

##################################################################
# API SETTINGS                                                  ##
##################################################################


# THE DEFAULT PATTERN IMPLICIT HERE IS SINGLE TOMCAT
# might be nice to make assumptions about trailing slash consistent

substanceAPI.BaseUrl="http://localhost:8080/"
substanceAPI.BaseUrl=${?API_URL}
gsrs.microservice.gateway.api.baseURL=${application.host}

gsrs.microservice.adverseevents.api.baseURL=${substanceAPI.BaseUrl}"adverse-events"
gsrs.microservice.adverseevents.api.baseURL=${?MS_URL_ADVERSE_EVENTS}
gsrs.microservice.applications.api.baseURL=${substanceAPI.BaseUrl}"applications"
gsrs.microservice.applications.api.baseURL=${?MS_URL_APPLICATIONS}
gsrs.microservice.clinicaltrialsus.api.baseURL=${substanceAPI.BaseUrl}"clinical-trials"
gsrs.microservice.clinicaltrialsus.api.baseURL=${?MS_URL_CLINICAL_TRIALS}
gsrs.microservice.clinicaltrialsus.api.baseURL=${?MS_URL_CLINICAL_TRIALS_US}
gsrs.microservice.clinicaltrialseurope.api.baseURL=${substanceAPI.BaseUrl}"clinical-trials"
gsrs.microservice.clinicaltrialseurope.api.baseURL=${?MS_URL_CLINICAL_TRIALS}
gsrs.microservice.clinicaltrialseurope.api.baseURL=${?MS_URL_CLINICAL_TRIALS_EUROPE}
gsrs.microservice.discovery.api.baseURL=${substanceAPI.BaseUrl}"discovery"
gsrs.microservice.discovery.api.baseURL=${?MS_URL_DISCOVERY}
gsrs.microservice.frontend.api.baseURL=${substanceAPI.BaseUrl}"frontend"
gsrs.microservice.frontend.api.baseURL=${?MS_URL_FRONTEND}
gsrs.microservice.impurities.api.baseURL=${substanceAPI.BaseUrl}"impurities"
gsrs.microservice.impurities.api.baseURL=${?MS_URL_IMPURITIES}
gsrs.microservice.products.api.baseURL=${substanceAPI.BaseUrl}"products"
gsrs.microservice.products.api.baseURL=${?MS_URL_PRODUCTS}
gsrs.microservice.substances.api.baseURL=${substanceAPI.BaseUrl}"substances"
gsrs.microservice.substances.api.baseURL=${?MS_URL_SUBSTANCES}
gsrs.microservice.ssg4m.api.baseURL=${substanceAPI.BaseUrl}"ssg4m"
gsrs.microservice.ssg4m.api.baseURL=${?MS_URL_SSG4M}
gsrs.microservice.invitropharmacology.api.baseURL=${substanceAPI.BaseUrl}"invitro-pharmacology"
gsrs.microservice.invitropharmacology.api.baseURL=${?MS_URL_INVITRO_PHARMACOLOGY}

##################################################################
# ZUUL ROUTES CONFIGURATION                                     ##
##################################################################
gsrs.microservice.frontend.api.routeURL=${gsrs.microservice.frontend.api.baseURL}"/ginas/app/ui"
gsrs.microservice.frontend.api.routeURL=${?GATEWAY_FRONTEND_ROUTE_URL}

zuul.routes = {
  "00005_ui_beta" = {
    "path" = "/ginas/app/beta/**",
    "url" = ${gsrs.microservice.frontend.api.routeURL},
    "serviceId" = "frontend",
  },
  "00010_ui" = {
    "path" = "/ginas/app/ui/**",
    "url" = ${gsrs.microservice.frontend.api.routeURL},
    "serviceId" = "frontend",
  },

  "00015_gateway_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/gateway/**",
    "url" = ${gsrs.microservice.gateway.api.baseURL}"/service-info/api/v1/gateway",
    "serviceId" = "gateway_service_info",
  },

  "00017_gateway_service" = {
     "path" = ${?api.base.path}"/service/gateway/**",
     "url" = ${gsrs.microservice.gateway.api.baseURL},
     "serviceId" = "gateway_service",
  },

  "00020_root" = {
    "path" = "/",
    "url" = ${gsrs.microservice.frontend.api.routeURL},
    "serviceId" = "root"
  },

# Look into this with Ramez; Ramez says change url to application.host value
#  "00030_ginas_app" = {
#    "path" = "/ginas/app",
#    "url" = ${gsrs.microservice.frontend.api.routeURL},
#    "serviceId" = "ginas_app"
#  },
  "00040_service_info_frontend" = {
    "path" = ${?api.base.path}"/service-info/api/v1/frontend/**",
    "url" = ${gsrs.microservice.frontend.api.baseURL}"/service-info/api/v1/frontend",
    "serviceId" = "service_info_frontend",
  },
  #############################
  #START applications section
  #############################
  "applications_core" = {
    "path" = ${?api.base.path}"/api/v1/applications/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/applications",
    "serviceId" = "applications_core"
  },
  "applications_core_alt" = {
    "path" = ${?api.base.path}"/api/v1/applications(**)/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/applications",
    "serviceId" = "applications_core_alt"
  },
  "applications_all" = {
    "path" = ${?api.base.path}"/api/v1/applicationsall/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/applicationsall",
    "serviceId" = "applications_all"
  },
  "applications_all_alt" = {
    "path" = ${?api.base.path}"/api/v1/applicationsall(**)/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/applicationsall",
    "serviceId" = "applications_all_alt"
  },
  "applications_darrts" = {
    "path" = ${?api.base.path}"/api/v1/applicationsdarrts/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/applicationsdarrts",
    "serviceId" = "applications_darrts"
  },
  "applications_darrts_alt" = {
    "path" = ${?api.base.path}"/api/v1/applicationsdarrts(**)/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/applicationsdarrts",
    "serviceId" = "applications_darrts_alt"
  },
  "applications_searchcount" = {
    "path" = ${?api.base.path}"/api/v1/searchcounts/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/searchcounts",
    "serviceId" = "applications_searchcount"
  },
  "applications_searchcount_alt" = {
    "path" = ${?api.base.path}"/api/v1/searchcounts(**)/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/api/v1/searchcounts",
    "serviceId" = "applications_searchcount"
  },
  "applications_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/applications/**",
    "url" = ${gsrs.microservice.applications.api.baseURL}"/service-info/api/v1/applications",
    "serviceId" = "applications_service_info",
  },
  "applications_service" = {
    "path" = ${?api.base.path}"/service/applications/**",
    "url" = ${gsrs.microservice.applications.api.baseURL},
    "serviceId" = "applications_service",
  },


  #############################
  #END applications section
  #############################
  #############################
  #START products section
  #############################
  "products_core" = {
    "path" = ${?api.base.path}"/api/v1/products/**",
    "url" = ${gsrs.microservice.products.api.baseURL}"/api/v1/products",
    "serviceId" = "products_core"
  },
  "products_core_alt" = {
    "path" = ${?api.base.path}"/api/v1/products(**)/**",
    "url" = ${gsrs.microservice.products.api.baseURL}"/api/v1/products",
    "serviceId" = "products_core"
  },
  "products_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/products/**",
    "url" = ${gsrs.microservice.products.api.baseURL}"/service-info/api/v1/products",
    "serviceId" = "products_service_info",
  },
  "products_service" = {
    "path" = ${?api.base.path}"/service/products/**",
    "url" = ${gsrs.microservice.products.api.baseURL},
    "serviceId" = "products_service",
  },

  #############################
  #END products section
  #############################
  #############################
  #START impurities section
  #############################
  "impurities_core" = {
    "path" = ${?api.base.path}"/api/v1/impurities/**",
    "url" = ${gsrs.microservice.impurities.api.baseURL}"/api/v1/impurities",
    "serviceId" = "impurities_core"
  },
  "impurities_core_alt" = {
    "path" = ${?api.base.path}"/api/v1/impurities(**)/**",
    "url" = ${gsrs.microservice.impurities.api.baseURL}"/api/v1/impurities",
    "serviceId" = "impurities_core"
  },
  "impurities_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/impurities/**",
    "url" = ${gsrs.microservice.impurities.api.baseURL}"/service-info/api/v1/impurities",
    "serviceId" = "impurities_service_info",
  },
  "impurities_service" = {
    "path" = ${?api.base.path}"/service/impurities/**",
    "url" = ${gsrs.microservice.impurities.api.baseURL},
    "serviceId" = "impurities_service",
  },

  #############################
  #END impurities section
  #############################
  #############################
  #START clinical_trials section
  #############################
  "clinical_trials_us" = {
    "path" = ${?api.base.path}"/api/v1/clinicaltrialsus/**",
    "url" = ${gsrs.microservice.clinicaltrialsus.api.baseURL}"/api/v1/clinicaltrialsus",
    "serviceId" = "clinical_trials_us"
  },
  "clinical_trials_us_alt" = {
    "path" = ${?api.base.path}"/api/v1/clinicaltrialsus(**)/**",
    "url" = ${gsrs.microservice.clinicaltrialsus.api.baseURL}"/api/v1/clinicaltrialsus",
    "serviceId" = "clinical_trials_us"
  },
  "clinical_trials_europe" = {
    "path" = ${?api.base.path}"/api/v1/clinicaltrialseurope/**",
    "url" = ${gsrs.microservice.clinicaltrialseurope.api.baseURL}"/api/v1/clinicaltrialseurope",
    "serviceId" = "clinical_trials_europe"
  },
  "clinical_trials_europe_alt" = {
    "path" = ${?api.base.path}"/api/v1/clinicaltrialseurope(**)/**",
    "url" = ${gsrs.microservice.clinicaltrialseurope.api.baseURL}"/api/v1/clinicaltrialseurope",
    "serviceId" = "clinical_trials_europe"
  },
  "clinical_trials_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/clinical-trials/**",
    "url" = ${gsrs.microservice.clinicaltrialsus.api.baseURL}"/service-info/api/v1/clinical-trials",
    "serviceId" = "clinical_trials_service_info",
  },
  "clinical_trials_service" = {
    "path" = ${?api.base.path}"/service/clinical-trials/**",
    "url" = ${gsrs.microservice.clinicaltrialsus.api.baseURL},
    "serviceId" = "clinical_trials_service",
  },
  #############################
  #END clinical_trials section
  #############################
  #############################
  #START discovery section
  #############################

  "discovery_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/discovery/**",
    "url" = ${gsrs.microservice.discovery.api.baseURL}"/service-info/api/v1/discovery",
    "serviceId" = "discovery_service_info",
  },
  "discovery_service" = {
    "path" = ${?api.base.path}"/service/discovery/**",
    "url" = ${gsrs.microservice.discovery.api.baseURL},
    "serviceId" = "discovery_service",
  },
  #############################
  #END discovery section
  #############################

  #############################
  #START adverse-eventpt section
  #############################
  "adverseeventpt_core" = {
    "path" = ${?api.base.path}"/api/v1/adverseeventpt/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/api/v1/adverseeventpt",
    "serviceId" = "adverseeventpt_core"
  },
  "adverseeventpt_core_alt" = {
    "path" = ${?api.base.path}"/api/v1/adverseeventpt(**)/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/api/v1/adverseeventpt",
    "serviceId" = "adverseeventpt_core"
  },
  "adverseeventdme_core" = {
    "path" = ${?api.base.path}"/api/v1/adverseeventdme/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/api/v1/adverseeventdme",
    "serviceId" = "adverseeventdme_core"
  },
  "adverseeventdme_core_alt" = {
    "path" = ${?api.base.path}"/api/v1/adverseeventdme(**)/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/api/v1/adverseeventdme",
    "serviceId" = "adverseeventdme_core"
  },
  "adverseeventcvm_core" = {
    "path" = ${?api.base.path}"/api/v1/adverseeventcvm/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/api/v1/adverseeventcvm",
    "serviceId" = "adverseeventcvm_core"
  },
  "adverseeventcvm_core_alt" = {
    "path" = ${?api.base.path}"/api/v1/adverseeventcvm(**)/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/api/v1/adverseeventcvm",
    "serviceId" = "adverseeventcvm_core"
  },
  "adverse_events_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/adverse-events/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL}"/service-info/api/v1/adverse-events",
    "serviceId" = "adverse_events_service_info",
  },
  "adverse_events_service" = {
    "path" = ${?api.base.path}"/service/adverse-events/**",
    "url" = ${gsrs.microservice.adverseevents.api.baseURL},
    "serviceId" = "adverse_events_service",
  },

  #############################
  #END adverse-eventpt section
  #############################
  #############################
  #START SSG4 section
  #############################
  "ssg4m_core" = {
    "path" = ${?api.base.path}"/api/v1/ssg4m/**",
    # The url is a bit different for this one
    "url" = ${gsrs.microservice.ssg4m.api.baseURL}"/ssg4m",
    "serviceId" = "ssg4m_core"
  },
  "ssg4m_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/ssg4m/**",
    "url" = ${gsrs.microservice.ssg4m.api.baseURL}"/service-info/api/v1/ssg4m",
    "serviceId" = "ssg4m_service_info",
  },
  "ssg4m_service" = {
    "path" = ${?api.base.path}"/service/ssg4m/**",
    "url" = ${gsrs.microservice.ssg4m.api.baseURL},
    "serviceId" = "ssg4m_service",
  },
  #############################
  #END SSG4 section
  #############################

  #########################################
  #START invitro-pharmacology section
  #########################################
  "invitropharmacology_core" = {
    "path" = ${?api.base.path}"/api/v1/invitropharmacology/**",
    "url" = ${gsrs.microservice.invitropharmacology.api.baseURL}"/api/v1/invitropharmacology",
    "serviceId" = "invitropharmacology_core"
  },
  "invitro_pharmacology_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/invitro-pharmacology/**",
    "url" = ${gsrs.microservice.invitropharmacology.api.baseURL}"/service-info/api/v1/invitro-pharmacology",
    "serviceId" = "invitro_pharmacology_service_info",
  },
  "invitro_pharmacology_service" = {
    "path" = ${?api.base.path}"/service/invitro-pharmacology/**",
    "url" = ${gsrs.microservice.invitropharmacology.api.baseURL},
    "serviceId" = "invitro_pharmacology_service",
  },



  #########################################
  #END invitro-pharmacology section
  #########################################
  "substances_service_info" = {
    "path" = ${?api.base.path}"/service-info/api/v1/substances/**",
    "url" = ${gsrs.microservice.substances.api.baseURL}"/service-info/api/v1/substances",
    "serviceId" = "substances_service_info",
  },
  "substances_service" = {
    "path" = ${?api.base.path}"/service/substances/**",
    "url" = ${gsrs.microservice.substances.api.baseURL},
    "serviceId" = "substances_service",
  },

  # This makes non-substance urls not work in embedded tomcat
  # I do not see something similar in fda branch yaml
  "z0010_substances_core" = {
    "path" = ${?api.base.path}"/api/v1/**",
    "url" = ${gsrs.microservice.substances.api.baseURL}"/api/v1",
    "serviceId" = "substances_core",
  },

  "z0020_api_legacy_gsrs_app" = {
    "path": "/gsrs/app/**",
    "url": ${gsrs.microservice.substances.api.baseURL},
    "serviceId" = "substances"
  },

  # Without this things don't work right in embedded tomcat
  # Here we assume API_BASE_PATH is = "" since that is what we do locally
  # Why can't we be consistent and always use a base path since the discrepancy
  # causes a lot of acrobats to accomodate ????
  # to void this put  zuul.routes.z0023_api_legacy_ginas_app_local = null in gateway.conf

  "z0023_api_legacy_ginas_app_local" = {
    "path" = "/ginas/app/**",
    "url" = ${gsrs.microservice.substances.api.baseURL},
    "serviceId" = "substances_core_local",
  },

  # Without this logout does not work in single tomcat
  "z0025_api_legacy_ginas_app" = {
    "path" = ${?api.base.path}"/**",
    "url" = ${gsrs.microservice.substances.api.baseURL},
    "serviceId" = "substances_core",
  },


  #fallback anything else goes to substances
  "z0030_legacy" = {
    "path" = "/**",
    "url" = ${gsrs.microservice.substances.api.baseURL},
    "serviceId" = "substances"
  }
}

zuul.sensitiveHeaders = ""

# do not use API_BASE_PATH with ignored patterns
zuul.ignored-patterns = [
  # Keep actuator first
  "/service-info/api/v1/gateway/actuator/**",
  "/service-info/api/v1/gateway/**",
  "/service/gateway/**"
]

# Make sure microservices are given enough time to perform tasks.
zuul.host.socket-timeout-millis=300000

# Keeps + encoded characters encoded as +
zuul.forceOriginalQueryStringEncoding=true

spring.servlet.multipart.max-file-size=512MB
spring.servlet.multipart.max-request-size=512MB

##################################################################
# LEGACY AUTHENTICATION                                         ##
##################################################################

ix.authentication.allownonauthenticated = ${?AUTH_ALLOW_NONAUTH}
ix.authentication.autoregister = ${?AUTH_AUTOREGISTER}
ix.authentication.autoregisteractive = ${?AUTH_AUTOREGISTERACTIVE}
ix.authentication.sysadmin-email = ${?AUTH_SYSADMIN_EMAIL}
ix.authentication.trustheader = ${?AUTH_TRUST_HEADER}
ix.authentication.usernameheader = ${?AUTH_USERNAME_HEADER}
ix.authentication.useremailheader = ${?AUTH_EMAIL_HEADER}
ix.authentication.userrolesheader = ${?AUTH_ROLES_HEADER}
ix.authentication.logheaders = ${?AUTH_LOG_HEADERS}

##################################################################
# CUSTOM CONFIGURATION                                          ##
##################################################################

gsrs.serviceinfo.api.endpoints.list.processedRouteConfigs.disabled = false
gsrs.serviceinfo.api.endpoints.list.logProcessedRouteConfigs.disabled = false
gsrs.serviceinfo.api.endpoints.list.actuatorRoutes.disabled = false


include "conf/gateway.conf"
include "gateway.conf"
