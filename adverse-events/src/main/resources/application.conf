include "adverse-events-core.conf"
include "adverse-events-env.conf"
include "adverse-events-env-db.conf"

##################################################################
# MAIN CONFIGURATION                                            ##
##################################################################

spring.application.name="adverse-events"

# The default assumes single Tomcat where the context path is "/" + the service name
# In embedded Tomcat you'll probably override with using env value "/"
# as we do by default in the *-env.conf files
server.servlet.context-path="/"${spring.application.name}
server.servlet.context-path=${?MS_SERVLET_CONTEXT_PATH_ADVERSE_EVENTS}

ix.home=${spring.application.name}".ix"
ix.home=${?IX_HOME}

# We need to point to the substances service ginas.ix folder
ix.home_substances="substances.ix"
ix.home_substances=${?IX_HOME_SUBSTANCES}

application.host="http://localhost:8080"
application.host=${?APPLICATION_HOST}

# Server port is used in embedded Tomcat
server.port=""
server.port=${?MS_SERVER_PORT_ADVERSE_EVENTS}

# Secure session off for dev, but if using HTTPS it's better to have it on
gsrs.sessions.sessionSecure=false
gsrs.sessions.sessionSecure=${?GSRS_SESSIONS_SESSION_SECURE}

gsrs.substances.molwitch.enabled=false

# PUT YOUR SOME SERVICE SPECIFIC ADDITIONS HERE

debug=false
debug=${?DEBUG_ADVERSE_EVENTS}

spring.main.allow-bean-definition-overriding=true

spring.main.allow-circular-references=false
spring.main.allow-circular-references=${?MS_ALLOW_CIRCULAR_REFERENCES_ADVERSE_EVENTS}

spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# export path, has a default value for each microservice, but can be overridden.
# in practice, it should be the same disk location at the substances export path.
# it might make sense to use ${IX_HOME_SUBSTANCES}/exports
ix.ginas.export.path=${?MS_EXPORT_PATH_ADVERSE_EVENTS}

# maximum file upload size
spring.servlet.multipart.max-file-size=512MB
spring.servlet.multipart.max-request-size=512MB

##################################################################
# SPRING BOOT ACTUATOR SETTINGS FOR MICROSERVICE HEALTH CHECKS  ##
##################################################################
# turn off rabbit mq check for now since we don't use it otherwise it will say we are down
management.health.rabbit.enabled: false

management.endpoints.web.base-path="/service-info/api/v1/"${spring.application.name}"/actuator"
management.endpoints.web.exposure.include=${?MS_ACTUATOR_EXPOSE_ENDPOINTS_ADVERSE_EVENTS}
management.endpoint.health.show-details="NEVER"
management.endpoint.health.show-details=${?MS_ACTUATOR_SHOW_HEALTH_DETAILS}
management.endpoint.health.show-details=${?MS_ACTUATOR_SHOW_HEALTH_DETAILS_ADVERSE_EVENTS}

##################################################################
# GSRS CONFIGURATION REPORTS                                    ##
##################################################################

# See document 'How configuration works' for discussion of security implications.
# If in doubt, you probably want false (default) for all optons in production or even online development instances
gsrs.extensions.config.report.api.enabled=${?EXTENSIONS_CONFIG_REPORT_API_ENABLED}
gsrs.services.config.properties.report.api.enabled=${?CONFIG_PROPERTIES_REPORT_API_ENABLED}
gsrs.services.config.properties.report.log.enabled=${?CONFIG_PROPERTIES_REPORT_LOG_ENABLED}

##################################################################
# ENDPOINTS CONFIGURATION                                       ##
##################################################################
include "entity-service-info-endpoints.conf"
include "basic-service-info-endpoints.conf"
gsrs.serviceinfo.api.endpoints.entities = ["adverseeventcvm", "adverseeventdme", "adverseeventpt"]

##################################################################
# EUREKA SETTINGS                                               ##
##################################################################

eureka.instance.hostname=${spring.application.name}
eureka.client.serviceUrl.defaultZone="http://localhost:8761/eureka"
eureka.client.serviceUrl.defaultZone=${?EUREKA_SERVICE_URL}

eureka.client.enabled=false
eureka.client.enabled=${?EUREKA_CLIENT_ENABLED}
ribbon.eureka.enabled=false
ribbon.eureka.enabled=${?RIBBON_EUREKA_ENABLED}

eureka.instance.statusPageUrl="${application.host}/ginas/app${management.endpoints.web.base-path}/health"
eureka.instance.statusPageUrl=${?EUREKA_STATUS_PAGE_URL_ADVERSE_EVENTS}
eureka.instance.healthCheckUrl="${application.host}/ginas/app${management.endpoints.web.base-path}/health"
eureka.instance.healthCheckUrl=${?EUREKA_HEALTH_CHECK_URL_ADVERSE_EVENTS}



##################################################################
# DATABASE CONNECTION                                           ##
##################################################################

ix.h2: {
        base = ./${ix.home}/h2,
        substances = ./${ix.home_substances}/h2
      }

spring.datasource.url="jdbc:h2:"${ix.h2.substances}"/sprinxight;AUTO_SERVER=TRUE"
   spring.datasource.url=${?DB_URL_SUBSTANCES}
spring.datasource.driverClassName=org.h2.Driver
   spring.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME}
   spring.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_SUBSTANCES}
spring.datasource.username=${?DB_USERNAME}
    spring.datasource.username=${?DB_USERNAME_SUBSTANCES}
spring.datasource.password=${?DB_PASSWORD}
    spring.datasource.password=${?DB_PASSWORD_SUBSTANCES}
spring.datasource.connectionTimeout=120000
   spring.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT}
   spring.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_SUBSTANCES}
spring.datasource.maximumPoolSize=50
   spring.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE}
   spring.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_SUBSTANCES}
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
   spring.jpa.database-platform=${?DB_DIALECT}
   spring.jpa.database-platform=${?DB_DIALECT_SUBSTANCES}
spring.jpa.hibernate.ddl-auto=none
   spring.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO}
   spring.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_SUBSTANCES}
spring.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS}
spring.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS_SUBSTANCES}

spring.hibernate.show-sql=false

adverseevent.datasource.url="jdbc:h2:"${ix.h2.base}"/appinxight;AUTO_SERVER=TRUE"
   adverseevent.datasource.url=${?DB_URL_SRSCID}
   adverseevent.datasource.url=${?DB_URL_ADVERSE_EVENTS}
adverseevent.datasource.driverClassName=org.h2.Driver
   adverseevent.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME}
   adverseevent.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_SRSCID}
   adverseevent.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_ADVERSE_EVENTS}
adverseevent.datasource.username=${?DB_USERNAME}
   adverseevent.datasource.username=${?DB_USERNAME_SRSCID}
   adverseevent.datasource.username=${?DB_USERNAME_ADVERSE_EVENTS}
adverseevent.datasource.password=${?DB_PASSWORD}
   adverseevent.datasource.password=${?DB_PASSWORD_SRSCID}
   adverseevent.datasource.password=${?DB_PASSWORD_ADVERSE_EVENTS}
adverseevent.datasource.connectionTimeout=120000
   adverseevent.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT}
   adverseevent.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_SRSCID}
   adverseevent.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_ADVERSE_EVENTS}
adverseevent.datasource.maximumPoolSize=50
   adverseevent.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE}
   adverseevent.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_SRSCID}
   adverseevent.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_ADVERSE_EVENTS}
adverseevent.jpa.database-platform=org.hibernate.dialect.H2Dialect
   adverseevent.jpa.database-platform=${?DB_DIALECT}
   adverseevent.jpa.database-platform=${?DB_DIALECT_SRSCID}
   adverseevent.jpa.database-platform=${?DB_DIALECT_ADVERSE_EVENTS}
adverseevent.jpa.hibernate.ddl-auto=none
   adverseevent.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO}
   adverseevent.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_SRSCID}
   adverseevent.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_ADVERSE_EVENTS}
adverseevent.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS}
adverseevent.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS_SRSCID}
adverseevent.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS_ADVERSE_EVENTS}

adverseevent.hibernate.show-sql=false

##################################################################
# API SETTINGS                                                  ##
##################################################################

# API urls have slash
substanceAPI.BaseUrl="http://localhost:8080/"
substanceAPI.BaseUrl=${?API_URL}
gsrs.microservice.substances.api.baseURL=${substanceAPI.BaseUrl}"substances"
gsrs.microservice.substances.api.baseURL=${?API_BASE_URL_SUBSTANCES}

gsrs.microservice.substances.api.headers= {
	"auth-username" = ${?MS_API_HEADERS_AUTH_USERNAME},
	"auth-username" = ${?MS_API_HEADERS_AUTH_USERNAME_SUBSTANCES}
	"auth-key"=${?MS_API_HEADERS_AUTH_KEY},
	"auth-key"=${?MS_API_HEADERS_AUTH_KEY_SUBSTANCES}
}

gsrs.loopback.port=8080
gsrs.loopback.port=${?APPLICATION_HOST_PORT}
gsrs.loopback.port=${?MS_LOOPBACK_PORT_ADVERSE_EVENTS}

##################################################################
# CONFIGURATIONS VALIDATORS, PROCESSORS, EXPORT, etc            ##
##################################################################

# validators

# __aw__ added this due to startup error? Do we need to fix?  
gsrs.validators.vocabularies.list = null


# entityProcessors

gsrs.entityprocessors.list.AdverseEventPtProcessor =
    {
      "entityClassName" = "gov.hhs.gsrs.adverseevents.adverseeventpt.models.AdverseEventPt",
      "processor" = "gov.hhs.gsrs.adverseevents.adverseeventpt.processors.AdverseEventPtProcessor",
      "order" = 10100
    }

gsrs.entityprocessors.list.AdverseEventDmeProcessor =
    {
      "entityClassName" = "gov.hhs.gsrs.adverseevents.adverseeventdme.models.AdverseEventDme",
      "processor" = "gov.hhs.gsrs.adverseevents.adverseeventdme.processors.AdverseEventDmeProcessor",
      "order" = 10200
    }

gsrs.entityprocessors.list.AdverseEventCvmProcessor =
    {
      "entityClassName" = "gov.hhs.gsrs.adverseevents.adverseeventcvm.models.AdverseEventCvm",
      "processor" = "gov.hhs.gsrs.adverseevents.adverseeventcvm.processors.AdverseEventCvmProcessor",
      "order" = 10300
    }


# NEED THIS TO AVOID CVApi ERROR
gsrs.entityProcessors.list = null

# exporterfactories

ix.ginas.export.exporterfactories.adverseeventpt.list.AdverseEventPtExporterFactory =
{
    "exporterFactoryClass" = "gov.hhs.gsrs.adverseevents.adverseeventpt.exporters.AdverseEventPtExporterFactory",
    "order" =  10100,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.adverseeventdme.list.DefaultSubstanceSpreadsheetExporterFactory =
{
    "exporterFactoryClass" = "gov.hhs.gsrs.adverseevents.adverseeventdme.exporters.AdverseEventDmeExporterFactory",
    "order" =  10200,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.adverseeventcvm.list.DefaultSubstanceSpreadsheetExporterFactory =
{
    "exporterFactoryClass" = "gov.hhs.gsrs.adverseevents.adverseeventcvm.exporters.AdverseEventCvmExporterFactory",
    "order" =  10300,
    "parameters":{
    }
}

# indexers

gsrs.indexers.list.AEATCIndexValueMaker_Substance =
    {
      "indexer" = "gov.hhs.gsrs.adverseevents.indexers.ATCIndexValueMaker",
      "class" = "ix.ginas.models.v1.Substance",
      "order" = 10100
    }
gsrs.indexers.list.AEATCIndexValueMaker_Pt = 
    {
      "indexer" = "gov.hhs.gsrs.adverseevents.indexers.AEATCIndexValueMaker",
      "class" = "gov.hhs.gsrs.adverseevents.adverseeventdme.models.AdverseEventPt",
      "order" = 10200
    }
gsrs.indexers.list.AEATCIndexValueMaker_Dme =     
    {
      "indexer" = "gov.hhs.gsrs.adverseevents.indexers.AEATCIndexValueMaker",
      "class" = "gov.hhs.gsrs.adverseevents.adverseeventdme.models.AdverseEventDme",
      "order" = 10300
    }
gsrs.indexers.list.AEATCIndexValueMaker_Cvm =     
    {
      "indexer" = "gov.hhs.gsrs.adverseevents.indexers.AEATCIndexValueMaker",
      "class" = "gov.hhs.gsrs.adverseevents.adverseeventdme.models.AdverseEventCvm",
      "order" = 10400
    }
gsrs.indexers.list.AdverseEventIndexValueMaker =
    {
      "indexer" = "gov.hhs.gsrs.adverseevents.adverseeventpt.indexers.AdverseEventIndexValueMaker",
      "class" = "gov.hhs.gsrs.adverseevents.adverseeventpt.models.AdverseEventPt",
      "order" = 10500
    }

# tasks

# For now, turn off any scheduled tasks that may be been defined upstream
gsrs.scheduled-tasks.list = null


##################################################################
# LEGACY AUTHENTICATION                                         ##
##################################################################

ix.authentication.allownonauthenticated = ${?AUTH_ALLOW_NONAUTH}
ix.authentication.autoregister = ${?AUTH_AUTOREGISTER}
ix.authentication.autoregisteractive = ${?AUTH_AUTOREGISTERACTIVE}
ix.authentication.sysadmin-email = ${?AUTH_SYSADMIN_EMAIL}
ix.authentication.trustheader = ${?AUTH_TRUST_HEADER}
ix.authentication.usernameheader = ${?AUTH_USERNAME_HEADER}
ix.authentication.useremailheader = ${?AUTH_EMAIL_HEADER}
ix.authentication.userrolesheader = ${?AUTH_ROLES_HEADER}
ix.authentication.logheaders = ${?AUTH_LOG_HEADERS}

##################################################################
# CUSTOM CONFIGURATION                                          ##
##################################################################

include "conf/adverse-events.conf"
include "adverse-events.conf"
