{"version":3,"mappings":"ucAAAA,iBACEA,iBACIA,0BAA6DA,wDAAiBC,gBAAoDD,QACpIA,iBACEA,8BAA+DA,uDAAcE,YAChCF,QAC/CA,QACEA,0BAAwFA,wDAAiBG,kBAAyDH,QACpKA,0BAAiGA,wDAAeI,wBAA4BJ,QAC5IA,eAIFA,QACAA,iBACEA,4BACFA,QACFA,8BAfwGA,8CAELA,+DAGkCA,iDACjEA,+CAOhDA,oCCCb,IAAMK,EAAb,eAAaA,EAAb,0CAKE,WACUC,EACDC,EACAC,GAAsC,6BAE7CC,gBAJQH,uBACDG,cACAA,cALDA,gBAAqC,GAC7CA,mBAAsC,GAOpCA,EAAKC,uBAAyB,iCAHeD,EARjD,uCAcE,WAAQ,WACNE,KAAKC,gBAAgBC,KAAK,mBAC1B,IAAMC,EAAwBH,KAAKL,qBAAqBS,UAAUC,UAAU,YACjD,MAArBD,EAAUE,UAEZF,EAAUE,QAAU,CAAEC,YAAa,KAErCC,EAAKb,qBAAqBc,aAC1BD,EAAKF,QAAUF,EAAUE,UAE3BN,KAAKU,cAAcC,KAAKR,GACxBH,KAAKY,iBAAmB,CACtBC,iBAAiB,EAAOC,QAAS,QAASC,UAAW,UAAWC,cAAe,aAC/EC,gBAAiB,eAAgBC,eAAgB,EAAGC,mBAAmB,KA3B7E,6BA+BE,cA/BF,yBAkCE,WACEnB,KAAKU,cAAcU,QAAQ,YACzBC,EAAaC,kBApCnB,0BAwCE,SAAaC,GACXvB,KAAKM,QAAQiB,OAASA,IAzC1B,oBA4CE,SAAOC,GACLxB,KAAKM,QAAQmB,eAAiBD,EAAKE,KAAK,OA7C5C,wBAgDE,SAAWC,GACT3B,KAAKM,QAAQC,YAAcoB,IAjD/B,gCAoDE,SAAmBA,GACjB3B,KAAKM,QAAQsB,aAAeD,IArDhC,0BAwDE,SAAaA,GACX3B,KAAKM,QAAQuB,eAAiBF,IAzDlC,yBA4DE,SAAYG,GACV,OAAKA,GAAqB,KAAXA,EAGNA,EAAOC,MAAM,KAFb,OA9DbC,GAA0DC,kDAA7CvC,GAAoCL,2DAApCK,EAAoCwC,mkBDhBjD7C,6BAAkCA,mdCgBrBK,EAAb,aCcayC,EAAb,eAAaA,KAAbC,iFAAaD,4DAhBF,CACPE,KACAC,aAAsC5C,GACtC6C,KACAC,IACAC,KACAC,KACAC,KACAC,IACAC,IACAC,SAMSX,EAAb","names":["i0","ctx_r1","ctx_r3","ctx_r4","ctx_r5","SubstanceFormProteinDetailsComponent","substanceFormService","gaService","cvService","r","analyticsEventCategory","this","menuLabelUpdate","emit","substanceSubscription","substance","subscribe","protein","proteinType","t","resetState","subscriptions","push","dropdownSettings","singleSelection","idField","textField","selectAllText","unSelectAllText","itemsShowLimit","allowSearchFilter","forEach","subscription","unsubscribe","access","tags","proteinSubType","join","type","sequenceType","sequenceOrigin","string","split","i","SubstanceFormBase","selectors","SubstanceFormProteinDetailsModule","p","CommonModule","DynamicComponentLoaderModule","MatFormFieldModule","MatInputModule","ReactiveFormsModule","FormsModule","MatSelectModule","SubstanceFormModule","NameResolverModule","NgMultiSelectDropDownModule"],"sources":["./src/app/core/substance-form/protein-details/substance-form-protein-details.component.html","./src/app/core/substance-form/protein-details/substance-form-protein-details.component.ts","./src/app/core/substance-form/protein-details/substance-form-protein-details.module.ts"],"sourcesContent":["<div class=\"name-form-container\" *ngIf = \"protein\">\n  <div class=\"form-row\">\n      <app-cv-input class = \"cv-input\" key = \"Protein Proteintype\" (valueChange) = \"updateType($event)\" [model] = \"protein.proteinType\"></app-cv-input>\n    <div class = \"mat-form-field-flex subtype\">\n      <app-tag-selector placeholder = \"protein subType\" class=\"tags\" (tagsUpdate)=\"update($event)\" [tags]=\"pipeToArray(protein.proteinSubType)\"\n                        cvDomain=\"PROTEIN_SUBTYPE\"></app-tag-selector>\n    </div>\n      <app-cv-input  class = \"cv-input\"  domain = \"SEQUENCE_ORIGIN\" title = \"Sequence Origin\" (valueChange) = \"updateOrigin($event)\" [model] = \"protein.sequenceOrigin\"></app-cv-input>\n    <app-cv-input  domain = \"SEQUENCE_TYPE\" title = \"Sequence Type\" [model] = \"protein.sequenceType\" (valueChange)=\"updateSequenceType($event)\"></app-cv-input>\n    <div>\n   <!--   <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"protein.access\">\n      </app-access-manager>-->\n    </div>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"protein\"></app-audit-info>\n  </div>\n</div>\n\n","import { AfterViewInit, Component, OnDestroy, OnInit } from '@angular/core';\nimport { Protein, SubstanceDetail, SubstanceName } from '@gsrs-core/substance';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormService } from '@gsrs-core/substance-form/substance-form.service';\nimport { ScrollToService } from '@gsrs-core/scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { ControlledVocabularyService, VocabularyTerm } from '@gsrs-core/controlled-vocabulary';\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\nimport { SubstanceFormBase } from '../base-classes/substance-form-base';\n\n@Component({\n  selector: 'app-substance-form-protein-details',\n  templateUrl: './substance-form-protein-details.component.html',\n  styleUrls: ['./substance-form-protein-details.component.scss']\n})\n// eslint-disable-next-line max-len\nexport class SubstanceFormProteinDetailsComponent extends SubstanceFormBase implements OnInit, AfterViewInit, OnDestroy {\n\n  protein: Protein;\n  private subscriptions: Array<Subscription> = [];\n  dropdownSettings: IDropdownSettings = {};\n  constructor(\n    private substanceFormService: SubstanceFormService,\n    public gaService: GoogleAnalyticsService,\n    public cvService: ControlledVocabularyService\n  ) {\n    super();\n    this.analyticsEventCategory = 'substance form Protein Details';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Protein Details');\n    const substanceSubscription = this.substanceFormService.substance.subscribe(substance => {\n      if (substance.protein == null) {\n        // ### figure out why only proteinType takes forever to load causing a console error\n        substance.protein = { proteinType: '' };\n      }\n      this.substanceFormService.resetState();\n      this.protein = substance.protein;\n    });\n    this.subscriptions.push(substanceSubscription);\n    this.dropdownSettings = {\n      singleSelection: false, idField: 'value', textField: 'display', selectAllText: 'Select All',\n      unSelectAllText: 'UnSelect All', itemsShowLimit: 3, allowSearchFilter: true\n    };\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.protein.access = access;\n  }\n\n  update(tags: Array<string>): void {\n    this.protein.proteinSubType = tags.join('|');\n  }\n\n  updateType(type: string): void {\n    this.protein.proteinType = type;\n  }\n\n  updateSequenceType(type: string): void {\n    this.protein.sequenceType = type;\n  }\n\n  updateOrigin(type: string): void {\n    this.protein.sequenceOrigin = type;\n  }\n\n  pipeToArray(string: string): Array<string> {\n    if (!string || string === '') {\n      return [];\n    } else {\n      return string.split('|');\n    }\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { NameResolverModule } from '../../name-resolver/name-resolver.module';\nimport {SubstanceFormProteinDetailsComponent} from '@gsrs-core/substance-form/protein-details/substance-form-protein-details.component';\nimport {NgMultiSelectDropDownModule} from 'ng-multiselect-dropdown';\nimport {CvInputComponent} from '@gsrs-core/substance-form/cv-input/cv-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormProteinDetailsComponent),\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatSelectModule,\n    SubstanceFormModule,\n    NameResolverModule,\n    NgMultiSelectDropDownModule\n  ],\n  declarations: [\n    SubstanceFormProteinDetailsComponent\n  ]\n})\nexport class SubstanceFormProteinDetailsModule { }\n"],"sourceRoot":"webpack:///","file":"1935.05ca842702a9b3fd.js"}