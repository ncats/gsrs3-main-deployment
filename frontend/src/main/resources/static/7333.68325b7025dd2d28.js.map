{"version":3,"mappings":"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","names":["i0","ctx_r4","ctx_r6","ctx_r7","ctx_r9","ctx_r11","ctx_r12","ctx_r13","ctx_r14","ctx_r20","ctx_r22","SubstanceFormStructureCardComponent","substanceFormService","substanceFormStructureService","structureService","loadingService","dialog","overlayContainerService","gaService","substanceService","substanceFormStructuralUnitsService","activatedRoute","l","this","overlayContainer","getContainerElement","definitionSubscription","definition","subscribe","e","substanceType","def","substanceClass","menuLabelUpdate","emit","idealStructSubscription","substanceIdealizedStructure","console","log","structure","loadStructure","subscriptions","push","structSubscription","substanceStructure","resolvedMol","mol","updateStructureForm","structureEditor","setMolecule","forEach","subscription","unsubscribe","editor","setLoading","structureUpdated","o","molfile","smiles","isInitializing","snapshot","queryParams","importStructure","setTimeout","interpretStructure","processStructurePostResponse","response","structurePostResponse","hash","charge","Object","keys","key","uuid","updateMoieties","moieties","length","clearTimeout","userMessageTimer","userMessage","sendEvent","dialogRef","open","StructureImportComponent","height","width","data","style","zIndex","afterClosed","structuralUnits","updateSRUs","StructureExportComponent","type","NameResolverDialogComponent","StructureImageModalComponent","panelClass","id","structureErrorsArray","structureDuplicateCheck","resp","messageType","index","splice","link","oldLinkFix","i","SubstanceFormBase","selectors","ctx","SubstanceFormStructureModule","S","CommonModule","DynamicComponentLoaderModule","StructureEditorModule","MatFormFieldModule","MatInputModule","ReactiveFormsModule","FormsModule","MatSelectModule","SubstanceFormModule","NameResolverModule","MatMenuModule","MatIconModule","MatButtonModule"],"sources":["./src/app/core/substance-form/structure/substance-form-structure-card.component.html","./src/app/core/substance-form/structure/substance-form-structure-card.component.ts","./src/app/core/substance-form/structure/substance-form-structure.module.ts"],"sourcesContent":["<div>\n  <div>\n    <div>\n      <app-structure-editor (loadedMolfile)=\"molvecUpdate($event)\" (editorOnLoad)=\"editorOnLoad($event)\"   style=\"z-index: 9999\">\n      </app-structure-editor>\n    </div>\n    <div [ngClass]=\"{'messages-container': true, collapsed: !userMessage, expanded: userMessage}\">\n      {{userMessage}}\n    </div>\n  </div>\n  <div class=\"button-row\" *ngIf=\"structure && substanceType === 'polymer'\">\n    <span class=\"middle-fill\"></span>\n    <span class=\"right-buttons\">\n      <button mat-button color=\"primary\" matTooltip=\"Import options\" (click)=\"openStructureImportDialog()\">\n        <mat-icon svgIcon=\"cloud_upload\"></mat-icon>\n        Import\n      </button>\n      <button (click)=\"openStructureExportDialog()\" mat-button color=\"primary\" matTooltip=\"export structure\">\n        <mat-icon svgIcon=\"get_app\"></mat-icon>\n        Export\n      </button>\n      <button mat-button color=\"primary\" matTooltip=\"preview structure stereochemistry\"\n        (click)=\"openStructureImageModal()\">\n        <mat-icon svgIcon=\"zoom_in\"></mat-icon> View stereochemistry\n      </button>\n    </span>\n  </div>\n  <div class=\"button-row\" *ngIf=\"structure && substanceType === 'structure'\">\n    <span class=\"left-buttons\">\n      <button (click)=\"duplicateCheck()\" matTooltip=\"check the database for duplicate structures\" mat-button\n        color=\"primary\" class=\"dupe-check\">\n        <mat-icon svgIcon=\"search\"></mat-icon>\n        Check for duplicates\n      </button>\n    </span>\n    <span class=\"middle-fill\"></span>\n    <span class=\"right-buttons\">\n      <button mat-button color=\"primary\" matTooltip=\"Import options\" [matMenuTriggerFor]=\"importMenu\">\n        <mat-icon svgIcon=\"cloud_upload\"></mat-icon>\n        Import  &#9660; \n      </button>\n      <button (click)=\"openStructureExportDialog()\" mat-button color=\"primary\" matTooltip=\"export structure\">\n        <mat-icon svgIcon=\"get_app\"></mat-icon>\n        Export\n      </button>\n      <button mat-button color=\"primary\" matTooltip=\"preview structure stereochemistry\"\n        (click)=\"openStructureImageModal()\">\n        <mat-icon svgIcon=\"zoom_in\"></mat-icon> View stereochemistry\n      </button>\n    </span>\n\n    <mat-menu #importMenu=\"matMenu\">\n      <button mat-menu-item (click)=\"openStructureImportDialog()\">\n        Import Structure\n      </button>\n      <button mat-menu-item (click)=\"openNameResolverDialog()\">\n        Resolve name\n      </button>\n    </mat-menu>\n  </div>\n  <div class=\"submission-messages\" *ngIf=\"structureErrorsArray && structureErrorsArray.length > 0\">\n    <div class=\"validation-message\" *ngFor=\"let err of structureErrorsArray; index as i\">\n      <div class=\"message-type\" [ngClass]=\"err.messageType\">{{err.messageType}}</div>\n      <div class=\"message\">{{err.message}}<span *ngFor=\"let link of err.links\"><br />\n          <a [href]=\"fixLink(link.href)\" class=\"internal-link\" target=\"_blank\">\n            {{link.text}}\n          </a></span></div>\n      <button mat-icon-button matTooltip=\"Dismiss\" (click)=\"dismissErrorMessage(i)\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n      </button>\n    </div>\n  </div>\n  <app-structure-form [structure]=\"structure\" showSettings=\"true\" [type]=\"substanceType\">\n  </app-structure-form>\n  <div class=\"button-container\" *ngIf=\"substanceType === 'polymer'\">\n    <button class=\"mat-flat-button mat-primary\" color=\"primary\" (click)=\"generateSRU()\"\n      matTooltip=\"generate structural units for this structure\">Generate SRUs</button>\n  </div>\n</div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceFormBase } from '../base-classes/substance-form-base';\nimport { Editor } from '../../structure-editor/structure.editor.model';\nimport { SubstanceStructure } from '@gsrs-core/substance/substance.model';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { StructureService } from '../../structure/structure.service';\nimport { LoadingService } from '../../loading/loading.service';\nimport { InterpretStructureResponse, StructureImportComponent, StructureImageModalComponent } from '@gsrs-core/structure';\nimport { MatDialog } from '@angular/material/dialog';\nimport { StructureExportComponent } from '@gsrs-core/structure/structure-export/structure-export.component';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { StructureDuplicationMessage } from '../substance-form.model';\nimport { NameResolverDialogComponent } from '@gsrs-core/name-resolver/name-resolver-dialog.component';\nimport { Subscription } from 'rxjs';\nimport { SubstanceService } from '@gsrs-core/substance/substance.service';\nimport { SubstanceFormStructuralUnitsService } from '../structural-units/substance-form-structural-units.service';\nimport { SubstanceFormStructureService } from './substance-form-structure.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-substance-form-structure-card',\n  templateUrl: './substance-form-structure-card.component.html',\n  styleUrls: ['./substance-form-structure-card.component.scss']\n})\nexport class SubstanceFormStructureCardComponent extends SubstanceFormBase implements OnInit, AfterViewInit, OnDestroy {\n  structureEditor: Editor;\n  structure: SubstanceStructure;\n  userMessage: string;\n  userMessageTimer: any;\n  substanceType: string;\n  smiles: string;\n  mol: string;\n  isInitializing = true;\n  private overlayContainer: HTMLElement;\n  structureErrorsArray: Array<StructureDuplicationMessage>;\n  subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormService: SubstanceFormService,\n    private substanceFormStructureService: SubstanceFormStructureService,\n    private structureService: StructureService,\n    private loadingService: LoadingService,\n    private dialog: MatDialog,\n    private overlayContainerService: OverlayContainer,\n    private gaService: GoogleAnalyticsService,\n    private substanceService: SubstanceService,\n    private substanceFormStructuralUnitsService: SubstanceFormStructuralUnitsService,\n    private activatedRoute: ActivatedRoute\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    const definitionSubscription = this.substanceFormService.definition.subscribe(def => {\n      this.substanceType = def.substanceClass;\n      if (this.substanceType === 'polymer') {\n        this.menuLabelUpdate.emit('Idealized Structure');\n        const idealStructSubscription = this.substanceFormStructureService.substanceIdealizedStructure.subscribe(structure => {\n          console.log(structure);\n          if (structure) {\n            this.structure = structure;\n          } else {\n            // while we also want to do something with display structures eventually,\n            // this isn't the place to do it, I don't think ...\n            //\n            // this.substanceFormService.substanceDisplayStructure.subscribe(structure2 => {\n            //   this.structure = structure2;\n            // });\n          }\n          this.loadStructure();\n        });\n        this.subscriptions.push(idealStructSubscription);\n      } else {\n        this.menuLabelUpdate.emit('Structure');\n        const structSubscription = this.substanceFormStructureService.substanceStructure.subscribe(structure => {\n          console.log(structure);\n\n          this.structure = structure;\n          this.loadStructure();\n        });\n        this.subscriptions.push(structSubscription);\n      }\n    });\n    this.subscriptions.push(definitionSubscription);\n    const resolver = this.substanceFormService.resolvedMol.subscribe(mol => {\n      if (mol != null && mol !== '') {\n        this.updateStructureForm(mol);\n        this.structureEditor.setMolecule(mol);\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  editorOnLoad(editor: Editor): void {\n    this.loadingService.setLoading(false);\n    this.structureEditor = editor;\n    this.loadStructure();\n    this.structureEditor.structureUpdated().subscribe(molfile => {\n      this.updateStructureForm(molfile);\n      this.smiles = this.structure && this.structure.smiles || null;\n      this.mol = this.structure && this.structure.molfile || null;\n    });\n    this.isInitializing = false;\n  }\n\n  startInitializing(): void {\n    this.isInitializing = true;\n  }\n\n  endInitializing(): void {\n    this.isInitializing = false;\n  }\n\n  loadStructure(): void {\n    if (this.structure && this.structureEditor && this.structure.molfile) {\n      this.isInitializing = true;\n      this.structureEditor.setMolecule(this.structure.molfile);\n      this.smiles = this.structure.smiles;\n      this.mol = this.structure.molfile;\n           // imported structures from search results require a second structure refresh to display stereochemistry and other calculated fields\n     if ( this.activatedRoute && this.activatedRoute.snapshot.queryParams && this.activatedRoute.snapshot.queryParams['importStructure']) {\n      setTimeout(()=>{\n        this.updateStructureForm(this.structure.molfile), 2000\n      });\n     }\n      this.isInitializing = false;\n    }\n  }\n\n  molvecUpdate(mol: any): void {\n    this.updateStructureForm(mol);\n    this.structureEditor.setMolecule(mol);\n  }\n\n  updateStructureForm(molfile: string): void {\n    if (!this.isInitializing) {\n      this.structure.molfile = molfile;\n      this.structureService.interpretStructure(molfile).subscribe(response => {\n        this.processStructurePostResponse(response);\n      });\n    }\n  }\n\n  processStructurePostResponse(structurePostResponse?: InterpretStructureResponse): void {\n    if (structurePostResponse && structurePostResponse.structure) {\n\n      // we should only be dealing with this stuff if the total hash changes\n      // or if the charge changes, or if it's a polymer\n      if (this.substanceType === 'polymer' ||\n        this.structure['hash'] !== structurePostResponse.structure['hash'] ||\n        this.structure['charge'] !== structurePostResponse.structure['charge']) {\n\n        this.smiles = structurePostResponse.structure.smiles;\n        this.mol = structurePostResponse.structure.molfile;\n        // this is sometimes overly ambitious\n        Object.keys(structurePostResponse.structure).forEach(key => {\n          // we don't want to do this with molfile, we want to trust the editor\n          if (key !== 'molfile') {\n            this.structure[key] = structurePostResponse.structure[key];\n          }\n        });\n\n        this.structure.uuid = '';\n        this.substanceFormStructureService.updateMoieties(structurePostResponse.moieties);\n        if (this.substanceType !== 'polymer') {\n        if (structurePostResponse.moieties && structurePostResponse.moieties.length > 1) {\n          clearTimeout(this.userMessageTimer);\n            this.userMessage = 'Certain moieties may have been updated and/or deleted. Please check that the changes are correct.';\n          this.userMessageTimer = setTimeout(() => {\n            this.userMessage = null;\n          }, 20000);\n        }\n      }\n      }\n    }\n  }\n\n  openStructureImportDialog(): void {\n    this.gaService.sendEvent('structureForm', 'button:import', 'import structure');\n    const dialogRef = this.dialog.open(StructureImportComponent, {\n      height: 'auto',\n      width: '650px',\n      data: {}\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe((response?: InterpretStructureResponse) => {\n      this.overlayContainer.style.zIndex = null;\n      if (response != null) {\n        if (response && response.structure && response.structure.molfile) {\n          this.structureEditor.setMolecule(response.structure.molfile);\n        }\n        this.processStructurePostResponse(response);\n      }\n    }, () => { });\n  }\n\n  generateSRU(): void {\n    this.loadingService.setLoading(true);\n    this.structureService.interpretStructure(this.structure.molfile).subscribe(response => {\n      if (response.structuralUnits && response.structuralUnits.length > 0) {\n        this.substanceFormStructuralUnitsService.updateSRUs(response.structuralUnits);\n      }\n      this.loadingService.setLoading(false);\n    }, error => {\n      this.loadingService.setLoading(false);\n    });\n  }\n\n  openStructureExportDialog(): void {\n\n    const dialogRef = this.dialog.open(StructureExportComponent, {\n      height: 'auto',\n      width: '650px',\n      data: {\n        molfile: this.mol,\n        smiles: this.smiles,\n        type: this.substanceType\n      }\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe(() => {\n      this.overlayContainer.style.zIndex = null;\n    }, () => {\n      this.overlayContainer.style.zIndex = null;\n    });\n  }\n\n  openNameResolverDialog(): void {\n    this.gaService.sendEvent('structureForm', 'button:resolveName', 'resolve name');\n    const dialogRef = this.dialog.open(NameResolverDialogComponent, {\n      height: 'auto',\n      width: '800px',\n      data: {}\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe((molfile?: string) => {\n      this.overlayContainer.style.zIndex = null;\n      if (molfile != null && molfile !== '') {\n        this.updateStructureForm(molfile);\n        this.structureEditor.setMolecule(molfile);\n      }\n    }, () => { });\n  }\n\n  openStructureImageModal(): void {\n\n    const dialogRef = this.dialog.open(StructureImageModalComponent, {\n      height: '90%',\n      width: '650px',\n      panelClass: 'structure-image-panel',\n      data: {\n        structure: this.structure.id\n      }\n    });\n\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe(() => {\n      this.overlayContainer.style.zIndex = null;\n    }, () => {\n      this.overlayContainer.style.zIndex = null;\n    });\n  }\n\n  duplicateCheck() {\n    this.structureErrorsArray = [];\n    this.substanceFormService.structureDuplicateCheck().subscribe(response => {\n      response.forEach(resp => {\n        if (resp.messageType && resp.messageType !== 'INFO') {\n          this.structureErrorsArray.push(resp);\n        }\n      });\n    });\n  }\n\n  dismissErrorMessage(index: number) {\n    this.structureErrorsArray.splice(index, 1);\n  }\n\n  fixLink(link: string) {\n    return this.substanceService.oldLinkFix(link);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormStructureCardComponent } from './substance-form-structure-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { StructureEditorModule } from '../../structure-editor/structure-editor.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { NameResolverModule } from '../../name-resolver/name-resolver.module';\nimport { DragDropPasteDirective } from '@gsrs-core/substance-form/structure/drag-drop-paste.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormStructureCardComponent),\n    StructureEditorModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatSelectModule,\n    SubstanceFormModule,\n    NameResolverModule,\n    MatMenuModule,\n    MatIconModule,\n    MatButtonModule\n  ],\n  declarations: [\n    SubstanceFormStructureCardComponent,\n  ]\n})\nexport class SubstanceFormStructureModule { }\n"],"sourceRoot":"webpack:///","file":"7333.68325b7025dd2d28.js"}