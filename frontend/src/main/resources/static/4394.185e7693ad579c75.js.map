{"version":3,"mappings":"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","names":["i0","ctx_r2","MixtureComponentFormComponent","utilsService","overlayContainerService","this","EventEmitter","invalid","privateComp","type","overlayContainer","getContainerElement","set","component","substance","relatedSubstanceUuid","refuuid","event","$$deletedCode","newUUID","deleteTimer","setTimeout","n","componentDeleted","emit","clearTimeout","refPname","_name","name","uuid","substanceClass","approvalID","r","selectors","ctx","ctx_r5","SubstanceFormMixtureComponentsCardComponent","substanceFormMixtureComponentsService","scrollToService","gaService","m","canAddItemUpdate","menuLabelUpdate","analyticsEventCategory","relationshipsSubscription","substanceMixtureComponents","subscribe","a","relationships","components","subscriptions","push","componentDestroyed","forEach","subscription","unsubscribe","addComponent","addSubstanceMixtureComponent","scrollToElement","relationship","deleteSubstanceMixtureComponent","SubstanceCardBaseFilteredList","SubstanceFormMixtureComponentsModule","l","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule"],"sources":["./src/app/core/substance-form/mixture-components/mixture-component-form.component.html","./src/app/core/substance-form/mixture-components/mixture-component-form.component.ts","./src/app/core/substance-form/mixture-components/substance-form-mixture-components-card.component.html","./src/app/core/substance-form/mixture-components/substance-form-mixture-components-card.component.ts","./src/app/core/substance-form/mixture-components/substance-form-mixture-components.module.ts"],"sourcesContent":["<div class=\"component-form-container form-row\">\n  <div *ngIf=\"component.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"delete-container\">\n    <button mat-icon-button matTooltip=\"Delete code\" (click)=\"deleteComponent()\">\n      <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n    </button>\n  </div>\n    <div class = \"related-substance\">\n      <div class=\"flex-column \">\n        <app-substance-selector (selectionUpdated)=\"componentUpdated($event)\"\n                                eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Mixture Component\" header=\"Mixture Component\"\n                                [subuuid]=\"relatedSubstanceUuid\" [name] = \"component.substance? component.substance.name : ''\">\n        </app-substance-selector>\n      </div>\n    </div>\n\n    <div class =\"type\">\n      <app-cv-input  domain = \"MIXTURE_TYPE\" [ngClass] = \"invalid ? 'invalid' : ''\" title = \"Mixture Component Type *\" [model] = \"component.type\" (valueChange)=\"updateType($event)\"></app-cv-input>\n   <span class = \"invalid-note\" *ngIf = \"invalid\">*required</span>\n    </div>\n\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, HostListener} from '@angular/core';\nimport {MixtureComponents, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\n\n@Component({\n  selector: 'app-mixture-component-form',\n  templateUrl: './mixture-component-form.component.html',\n  styleUrls: ['./mixture-component-form.component.scss']\n})\nexport class MixtureComponentFormComponent implements OnInit {\n  private privateComp: MixtureComponents;\n  @Output() componentDeleted = new EventEmitter<MixtureComponents>();\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  invalid = false;\n\n  @HostListener('focusout') onFocusout() {\n    if (!this.privateComp.type) {\n      this.invalid = true;\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  constructor(\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer\n  ) { }\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set component(component: MixtureComponents) {\n    this.privateComp = component;\n    if (this.privateComp.substance) {\n      this.relatedSubstanceUuid = this.privateComp.substance.refuuid;\n    }\n\n  }\n\n  get component(): MixtureComponents {\n    return this.privateComp;\n  }\n\n  updateType(event: any): void {\n    this.privateComp.type = event;\n    if (!this.privateComp.type) {\n      this.invalid = true;\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  \n\n\n  deleteComponent(): void {\n    this.privateComp.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateComp || !this.component\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.componentDeleted.emit(this.privateComp);\n      }, 1000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateComp.$$deletedCode;\n  }\n\n  componentUpdated(substance: SubstanceSummary): void {\n    const relatedSubstance: SubstanceRelated = {\n      refPname: substance._name,\n      name: substance._name,\n      refuuid: substance.uuid,\n      substanceClass: 'reference',\n      approvalID: substance.approvalID\n    };\n    this.component.substance = relatedSubstance;\n    this.relatedSubstanceUuid = this.component.substance.refuuid;\n  }\n\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addComponent()\">\n    Add component <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<div class=\"relationship\" *ngFor=\"let relationship of relationships; last as isLast; index as index\" appScrollToTarget\n     [id]=\"'substance-mixture-component-' + index\">\n  <app-mixture-component-form [component]=\"relationship\" (componentDeleted)=\"deleteComponent($event)\">\n  </app-mixture-component-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<div class=\"flex-row\">\n    <button mat-button (click)=\"addComponent()\">\n        Add component <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button> \n</div>\n\n<div class=\"flex-row\">\n    <span class = \"middle-fill\"></span>\n       <button mat-button (click)=\"addComponent()\">\n        Add component <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n</div>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {MixtureComponents, SubstanceRelationship} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormMixtureComponentsService} from './substance-form-mixture-components.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\n\n@Component({\n  selector: 'app-substance-form-mixture-components-card',\n  templateUrl: './substance-form-mixture-components-card.component.html',\n  styleUrls: ['./substance-form-mixture-components-card.component.scss']\n})\nexport class SubstanceFormMixtureComponentsCardComponent extends SubstanceCardBaseFilteredList<SubstanceRelationship>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  relationships: Array<MixtureComponents>;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private substanceFormMixtureComponentsService: SubstanceFormMixtureComponentsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Components');\n    this.analyticsEventCategory = 'substance form mixture components';\n  }\n\n  ngAfterViewInit() {\n    const relationshipsSubscription = this.substanceFormMixtureComponentsService.substanceMixtureComponents.subscribe(components => {\n      this.relationships = components;\n    });\n    this.subscriptions.push(relationshipsSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addComponent();\n  }\n\n  addComponent(): void {\n    this.substanceFormMixtureComponentsService.addSubstanceMixtureComponent();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-mixture-component-0`, 'center');\n    });\n  }\n\n  deleteComponent(relationship: MixtureComponents): void {\n    this.substanceFormMixtureComponentsService.deleteSubstanceMixtureComponent(relationship);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DynamicComponentLoaderModule} from '@gsrs-core/dynamic-component-loader';\nimport {SubstanceFormModule} from '@gsrs-core/substance-form/substance-form.module';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ScrollToModule} from '@gsrs-core/scroll-to';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatInputModule} from '@angular/material/input';\nimport {SubstanceFormMixtureComponentsCardComponent} from '@gsrs-core/substance-form/mixture-components/substance-form-mixture-components-card.component';\nimport { MixtureComponentFormComponent } from './mixture-component-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormMixtureComponentsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormMixtureComponentsCardComponent,\n    MixtureComponentFormComponent\n  ]\n})\nexport class SubstanceFormMixtureComponentsModule { }\n"],"sourceRoot":"webpack:///","file":"4394.185e7693ad579c75.js"}