{"version":3,"mappings":"+TAIMA,iBAAuCA,mBAAMA,kCAC7CA,iBAAsCA,SAAiCA,0CAAjCA,0EAIpCA,iBAAuCA,uBAAUA,kCACjDA,iBAAsCA,kBAAqDA,gCAA5BA,+DAIjEA,iBAAuCA,wBAAWA,kCAClDA,iBAAsCA,SAAyBA,gCAAzBA,gEAItCA,iBAAuCA,wBAAWA,kCAClDA,iBAAsCA,SAA8BA,0CAA9BA,sEAGxCA,sCACAA,iBCbG,IAAMC,EAAb,eAAaA,EAAb,0CAQE,WACSC,GAAsC,6BAE7CC,gBAFOD,YAPTC,mBAA6B,CAAC,QAAU,YAAa,aAAe,cAGpEA,mBAAmB,IAAIC,IACvBD,gBAAqC,GAGUA,EATjD,uCAcE,WAAQ,WACNE,KAAKC,iBAAiBC,UAAU,YAE9B,GADAJ,EAAKK,UAAYA,EACK,MAAlBL,EAAKK,WAC0B,MAA9BL,EAAKK,UAAUC,aACsB,MAArCN,EAAKK,UAAUC,YAAYC,QAC3BP,EAAKK,UAAUC,YAAYC,OAAOC,OAAQ,CAC7CR,EAAKO,OAASP,EAAKK,UAAUC,YAAYC,OACzCP,EAAKS,YAAYC,KAAKV,EAAKO,OAAOC,QAClC,IAAMG,EAAkBX,EAAKD,UAAUa,oBAAoB,sBAAsBR,UAAU,YACzFJ,EAAKa,WAAaC,EAASC,mBAAsBC,WACjDhB,EAAKO,OAAOU,QAAQ,YAEhBC,EAAMC,UADLnB,EAAKa,WAAWK,EAAMA,OACLlB,EAAKD,UAAUqB,wBAAwBpB,EAAKa,WAAWK,EAAMA,OAAOG,mBAEpE,SAIxBrB,EAAKsB,cAAcC,KAAKZ,GACxBX,EAAKwB,qBAlCb,yBAuCE,WACEtB,KAAKoB,cAAcL,QAAQ,YACzBQ,EAAaC,kBAzCnB,2BA6CE,WACExB,KAAKyB,UAAY,EADN,gBAESzB,KAAKK,QAFd,IAEX,2BACEL,KAAKyB,UAAYzB,KAAKyB,UADSC,QACSC,MAAMrB,aAHrCsB,2BA7Cf,0BAqDE,SAAaD,GACX,OAAOA,EAAMrB,OAAS,IAAMN,KAAKyB,YAtDrC,6BAyDE,SAAgBI,GACd,OAAI7B,KAAKW,YAAcX,KAAKW,WAAWkB,IAAS7B,KAAKW,WAAWkB,GAAMC,QAC7D9B,KAAKW,WAAWkB,GAAMC,QAEtBD,MA7DbE,GAAgDC,kDAAnCpC,GAA0BD,qCAA1BC,EAA0BqC,qkBDXvCtC,iBACEA,mBAEEA,WACEA,sBACAA,sBACFA,QAEAA,WACIA,sBACAA,sBACFA,QAEFA,WACEA,sBACAA,uBACFA,QAEAA,YACEA,uBACAA,uBACFA,QAEAA,uBACAA,uBACFA,QACFA,eAzBmBA,sCAsBKA,sDACoCA,gLCb/CC,EAAb,+CCUasC,EAAb,eAAaA,KAAbC,iFAAaD,4DAVF,CACPE,KACAC,aAAsCzC,GACtC0C,KACAC,KACAC,KACAC,QAISP,EAAb","names":["i0","SubstanceNaSugarsComponent","cvService","a","Subject","this","substanceUpdated","subscribe","substance","nucleicAcid","sugars","length","countUpdate","emit","cvSubscription","getDomainVocabulary","vocabulary","response","NUCLEIC_ACID_SUGAR","dictionary","forEach","sugar","structure","getStructureUrlFragment","fragmentStructure","subscriptions","push","getTotalSites","subscription","unsubscribe","siteCount","i","sites","S","term","display","c","SubstanceCardBase","selectors","SubstanceNaSugarsModule","f","CommonModule","DynamicComponentLoaderModule","MatTableModule","CdkTableModule","MatPaginatorModule","MatInputModule"],"sources":["./src/app/core/substance-details/substance-na-sugars/substance-na-sugars.component.html","./src/app/core/substance-details/substance-na-sugars/substance-na-sugars.component.ts","./src/app/core/substance-details/substance-na-sugars/substance-na-sugars.module.ts"],"sourcesContent":["<div class=\"responsive\">\r\n  <table mat-table [dataSource]=\"sugars\">\r\n\r\n    <ng-container matColumnDef='Sugar'>\r\n      <th mat-header-cell *matHeaderCellDef> Sugar </th>\r\n      <td mat-cell *matCellDef=\"let sugar\"> {{getSugarDisplay(sugar.sugar)}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef='Structure'>\r\n        <th mat-header-cell *matHeaderCellDef> Structure </th>\r\n        <td mat-cell *matCellDef=\"let sugar\"> <img class = \"structure\" [src] = \"sugar.structure\" /></td>\r\n      </ng-container>\r\n\r\n    <ng-container matColumnDef='Site Range'>\r\n      <th mat-header-cell *matHeaderCellDef> Site Range </th>\r\n      <td mat-cell *matCellDef=\"let sugar\"> {{sugar.sitesShorthand}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef='Site Count'>\r\n      <th mat-header-cell *matHeaderCellDef> Site Count </th>\r\n      <td mat-cell *matCellDef=\"let sugar\"> {{getSiteCount(sugar.sites)}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row style = \"height:145px\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n</div>\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Sugar, Site, SubstanceDetail} from '../../substance/substance.model';\r\nimport {SubstanceCardBase} from '../substance-card-base';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {ControlledVocabularyService} from '@gsrs-core/controlled-vocabulary';\r\n\r\n@Component({\r\n  selector: 'app-substance-na-sugars',\r\n  templateUrl: './substance-na-sugars.component.html',\r\n  styleUrls: ['./substance-na-sugars.component.scss']\r\n})\r\nexport class SubstanceNaSugarsComponent extends SubstanceCardBase implements OnInit, OnDestroy {\r\n  sugars: Array<Sugar>;\r\n  displayedColumns: string[] = ['Sugar' , 'Structure', 'Site Range' , 'Site Count' ];\r\n  siteCount: number;\r\n  vocabulary: any;\r\n  substanceUpdated = new Subject<SubstanceDetail>();\r\n  subscriptions: Array<Subscription> = [];\r\n\r\n  constructor(\r\n    public cvService: ControlledVocabularyService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.substanceUpdated.subscribe(substance => {\r\n      this.substance = substance;\r\n      if (this.substance != null\r\n        && this.substance.nucleicAcid != null\r\n        && this.substance.nucleicAcid.sugars != null\r\n        && this.substance.nucleicAcid.sugars.length) {\r\n        this.sugars = this.substance.nucleicAcid.sugars;\r\n        this.countUpdate.emit(this.sugars.length);\r\n        const cvSubscription =  this.cvService.getDomainVocabulary('NUCLEIC_ACID_SUGAR').subscribe(response => {\r\n          this.vocabulary = response['NUCLEIC_ACID_SUGAR'].dictionary;\r\n          this.sugars.forEach(sugar => {\r\n            if(this.vocabulary[sugar.sugar]) {\r\n              sugar.structure = this.cvService.getStructureUrlFragment(this.vocabulary[sugar.sugar].fragmentStructure);\r\n            } else {\r\n              sugar.structure = null;\r\n            }\r\n          })\r\n        });\r\n        this.subscriptions.push(cvSubscription);\r\n        this.getTotalSites();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => {\r\n      subscription.unsubscribe();\r\n      });\r\n  }\r\n\r\n  getTotalSites() {\r\n    this.siteCount = 0;\r\n    for (const sugar of this.sugars) {\r\n      this.siteCount = this.siteCount + sugar.sites.length;\r\n    }\r\n\r\n  }\r\n\r\n  getSiteCount(sites: Array<Site>): string {\r\n    return sites.length + '/' + this.siteCount;\r\n  }\r\n\r\n  getSugarDisplay(term: string): string {\r\n    if (this.vocabulary && this.vocabulary[term] && this.vocabulary[term].display) {\r\n      return this.vocabulary[term].display;\r\n    } else {\r\n      return term;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {SubstanceNaSugarsComponent} from './substance-na-sugars.component';\r\nimport {DynamicComponentLoaderModule} from '../../dynamic-component-loader/dynamic-component-loader.module';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DynamicComponentLoaderModule.forChild(SubstanceNaSugarsComponent),\r\n    MatTableModule,\r\n    CdkTableModule,\r\n    MatPaginatorModule,\r\n    MatInputModule,\r\n  ],\r\n  declarations: [SubstanceNaSugarsComponent]\r\n})\r\nexport class SubstanceNaSugarsModule { }\r\n"],"sourceRoot":"webpack:///","file":"6710.5f0dbe107aeddae1.js"}