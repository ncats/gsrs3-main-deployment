{"version":3,"mappings":"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","names":["i0","ctx_r3","MonomerFormComponent","cvService","dialog","utilsService","overlayContainerService","u","this","EventEmitter","overlayContainer","getContainerElement","privateMonomer","set","monomer","relatedSubstanceUuid","monomerSubstance","refuuid","event","type","defining","checked","$$deletedCode","newUUID","deleteTimer","setTimeout","n","monomerDeleted","emit","clearTimeout","substance","refPname","_name","name","uuid","substanceClass","approvalID","amount","dialogRef","open","AmountFormDialogComponent","data","subsAmount","width","style","zIndex","dialogSubscription","afterClosed","subscribe","newAmount","subscriptions","push","amt","displayAmount","v","display","value","m","selectors","ctx","ctx_r5","SubstanceFormMonomersCardComponent","substanceFormMonomersService","scrollToService","gaService","s","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","monomersSubscription","substanceMonomers","a","monomers","componentDestroyed","forEach","subscription","unsubscribe","addMonomer","addSubstanceMonomer","scrollToElement","deleteSubstanceMonomer","SubstanceCardBaseFilteredList","SubstanceFormMonomersModule","d","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","MatCheckboxModule"],"sources":["./src/app/core/substance-form/monomers/monomer-form.component.html","./src/app/core/substance-form/monomers/monomer-form.component.ts","./src/app/core/substance-form/monomers/substance-form-monomers-card.component.html","./src/app/core/substance-form/monomers/substance-form-monomers-card.component.ts","./src/app/core/substance-form/monomers/substance-form-monomers.module.ts"],"sourcesContent":["<div class=\"component-form-container form-row\">\n  <div *ngIf=\"monomer.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"delete-container\">\n    <button mat-icon-button matTooltip=\"Delete monomer\" (click)=\"deleteComponent()\">\n      <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n    </button>\n  </div>\n    <div class = \"related-substance\">\n      <div class=\"flex-column \">\n        <app-substance-selector (selectionUpdated)=\"componentUpdated($event)\"\n                                eventCategory=\"substanceRelationshipRelatedSub\" placeholder= \"Monomer Substance\" header=\"Monomer Substance\"\n                                [subuuid]=\"relatedSubstanceUuid\" [name] = \"privateMonomer.monomerSubstance? privateMonomer.monomerSubstance.name : ''\">\n        </app-substance-selector>\n        <span *ngIf = \"this.privateMonomer.monomerSubstance && this.privateMonomer.monomerSubstance.uuid\n                && !this.privateMonomer.monomerSubstance.refuuid \">\n          Error retrieving monomer, missing reference uuid for {{this.privateMonomer.monomerSubstance.name}}\n        </span>\n      </div>\n    </div>\n\n    <div class =\"type\">\n      <app-cv-input  domain = \"MONOMER_TYPE\" title = \"Monomer Type\" [model] = \"monomer.type\" (valueChange)=\"updateType($event)\"></app-cv-input>\n    </div>\n\n  <div class = 'amount' >\n  <div class = \"label padded amount-label\">\n    Amount\n  <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n    <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button>\n  </div>\n  <div *ngIf = \"privateMonomer.amount\" class = \"amount-display\">\n    {{displayAmount(privateMonomer.amount)}}\n  </div>\n</div>\n  <div class=\"checkbox-container column-checkbox\">\n    <mat-checkbox [checked] = \"privateMonomer.defining\" (change)=\"definingChange($event)\">Defining</mat-checkbox>\n  </div>\n\n</div>\n<div class = \"form-row\">\n    <app-audit-info [source] = \"privateMonomer\"></app-audit-info>\n</div>\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Monomer, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\n\n@Component({\n  selector: 'app-monomer-form',\n  templateUrl: './monomer-form.component.html',\n  styleUrls: ['./monomer-form.component.scss']\n})\nexport class MonomerFormComponent implements OnInit, AfterViewInit {\n  privateMonomer: Monomer;\n  @Output() monomerDeleted = new EventEmitter<Monomer>();\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer\n  ) { }\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set monomer(monomer: Monomer) {\n    this.privateMonomer = monomer;\n    if (this.privateMonomer.monomerSubstance) {\n      this.relatedSubstanceUuid = this.privateMonomer.monomerSubstance.refuuid;\n    } else {\n      this.relatedSubstanceUuid = '';\n    }\n\n  }\n\n  get monomer(): Monomer {\n    return this.privateMonomer;\n  }\n\n  updateType(event: any): void {\n    this.privateMonomer.type = event;\n  }\n\n  definingChange(event: any): void {\n    this.privateMonomer.defining = event.checked;\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n\n  deleteComponent(): void {\n    this.privateMonomer.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateMonomer || !this.monomer\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.monomerDeleted.emit(this.privateMonomer);\n      }, 1000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMonomer.$$deletedCode;\n  }\n\n  componentUpdated(substance: SubstanceSummary): void {\n\n    if (substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.privateMonomer.monomerSubstance = relatedSubstance;\n      this.relatedSubstanceUuid = this.privateMonomer.monomerSubstance.refuuid;\n    } else {\n      this.privateMonomer.monomerSubstance = null;\n      this.relatedSubstanceUuid = null;\n    }\n\n\n  }\n\n  openAmountDialog(): void {\n    if (!this.privateMonomer.amount) {\n      this.privateMonomer.amount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.privateMonomer.amount},\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.privateMonomer.amount = newAmount;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  displayAmount(amt): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addCode()\">\n    Add Monomer <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<div class=\"monomer\" *ngFor=\"let monomer of monomers; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-monomer-' + index\">\n  <app-monomer-form [monomer]=\"monomer\" (monomerDeleted)=\"deleteCode($event)\"></app-monomer-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n\n<div class=\"flex-row\">\n    <span class = \"middle-fill\"></span>\n       <button mat-button (click)=\"addMonomer()\">\n        Add Monomer <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>\n","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { Monomer } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormMonomersService } from './substance-form-monomers.service';\n\n@Component({\n  selector: 'app-substance-form-monomers-card',\n  templateUrl: './substance-form-monomers-card.component.html',\n  styleUrls: ['./substance-form-monomers-card.component.scss']\n})\nexport class SubstanceFormMonomersCardComponent extends SubstanceCardBaseFilteredList<Monomer>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  monomers: Array<Monomer>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormMonomersService: SubstanceFormMonomersService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form monomers';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Monomers');\n  }\n\n  ngAfterViewInit() {\n    const monomersSubscription = this.substanceFormMonomersService.substanceMonomers.subscribe(monomers => {\n      this.monomers = monomers;\n    });\n    this.subscriptions.push(monomersSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addMonomer();\n  }\n\n  addMonomer(): void {\n    this.substanceFormMonomersService.addSubstanceMonomer();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-monomer-0`, 'center');\n    });\n  }\n\n  deleteMonomer(monomer: Monomer): void {\n    this.substanceFormMonomersService.deleteSubstanceMonomer(monomer);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormMonomersCardComponent } from './substance-form-monomers-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { MonomerFormComponent } from './monomer-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormMonomersCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule,\n    MatCheckboxModule\n  ],\n  declarations: [\n    SubstanceFormMonomersCardComponent,\n    MonomerFormComponent\n  ]\n})\nexport class SubstanceFormMonomersModule { }\n"],"sourceRoot":"webpack:///","file":"4501.e87f3743e810b5f5.js"}