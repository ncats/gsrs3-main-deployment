{"version":3,"mappings":"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","names":["i0","ctx_r6","ctx_r9","CodeFormComponent","cvService","utilsService","g","this","EventEmitter","getVocabularies","privateCode","set","code","viewFull","val","getDomainVocabulary","subscribe","t","codeSystemList","response","CODE_SYSTEM","list","codeSystemDictionary","dictionary","setCodeSystemType","codeTypeList","CODE_TYPE","$$deletedCode","newUUID","codeSystem","type","deleteTimer","setTimeout","codeDeleted","emit","value","url","replace","trim","clearTimeout","event","codeSystemType","systemCategory","access","c","selectors","ctx","ctx_r8","ctx_r14","ctx_r16","ctx_r18","SubstanceFormCodesCardComponent","substanceFormCodesService","substanceFormService","scrollToService","gaService","r","analyticsEventCategory","menuLabelUpdate","expanded","definitionSubscription","definition","level","definitionType","a","hiddenStateUpdate","canAddItemUpdate","subscriptions","push","codesSubscription","substanceCodes","codes","filtered","searchSubscription","searchControl","valueChanges","filterList","console","log","error","page","pageChange","componentDestroyed","forEach","subscription","unsubscribe","addCode","addSubstanceCode","scrollToElement","deleteSubstanceCode","SubstanceCardBaseFilteredList","SubstanceFormCodesModule","u","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","MatTooltipModule"],"sources":["./src/app/core/substance-form/codes/code-form.component.html","./src/app/core/substance-form/codes/code-form.component.ts","./src/app/core/substance-form/codes/substance-form-codes-card.component.html","./src/app/core/substance-form/codes/substance-form-codes-card.component.ts","./src/app/core/substance-form/codes/substance-form-codes.module.ts"],"sourcesContent":["<div class=\"code-form-container\" [ngClass] = \"!viewFull? 'collapse':'code-form-container'\">\n  <div *ngIf=\"code.$$deletedCode\" class=\"notification-backdrop\">\n      Deleted&nbsp;\n      <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n        <mat-icon svgIcon=\"undo\"></mat-icon>\n      </button>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete code\" (click)=\"deleteCode()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n    <app-cv-input required = 'true' class=\"code-system\" key = 'Code System'  title = \"Code System\" name = \"code\"\n                  [model] = \"code.codeSystem\" (valueChange)= \"setCodeSystemType($event)\">\n    </app-cv-input>\n    <div class=\"key-value-pair code-system-type\" *ngIf=\"code.codeSystem\">\n      <div class=\"key\">\n        Code System Type\n      </div>\n      <div class=\"value\">\n        {{codeSystemType}}\n      </div>\n    </div>\n    <app-cv-input class = \"type\" domain = \"CODE_TYPE\"  title = \"Type\" name = \"type\"\n                  [model] = \"code.type\" (valueChange)= \"code.type = $event\">\n    </app-cv-input>\n    <mat-form-field class=\"code\">\n      <input matInput placeholder=\"Code\" [(ngModel)]=\"code.code\" required name=\"code\" />\n    </mat-form-field>\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"code.access\">\n      </app-access-manager>\n    </div>\n    <div class = \"chevron\"><button mat-icon-button (click) = \"viewFull = !viewFull\" class = \"chevron-button\" matTooltip = \"Expand / collapse rows\">\n      <mat-icon *ngIf = \"viewFull\"svgIcon=\"chevron_up\"></mat-icon>\n      <mat-icon *ngIf = \"!viewFull\"svgIcon=\"chevron_down\"></mat-icon>\n\n  </button></div>\n  </div>\n  <div *ngIf=\"!code.$$deletedCode && viewFull\">\n    <div class=\"form-row\">\n      <mat-form-field class=\"url\">\n        <input matInput placeholder=\"Url\" [ngModel]=\"code.url\" (ngModelChange) = \"trimWhitespace($event)\" name=\"url\" />\n      </mat-form-field>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"code-text\">\n        <div class=\"textarea-label\">Code text</div>\n        <textarea placeholder=\"Enter text here\" [(ngModel)]=\"code.comments\" name=\"comments\"></textarea>\n      </div>\n    </div>\n    <div class = \"form-row\">\n      <div class=\"code-text\">\n        <div class=\"textarea-label\">Comments</div>\n        <textarea placeholder=\"Enter text here\" [(ngModel)]=\"code.codeText\" name=\"codeText\"></textarea>\n      </div>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"references-container\">\n        <app-domain-references [referencesUuids]=\"code.references\" #references></app-domain-references>\n      </div>\n    </div>\n  </div>\n  <app-audit-info [source] = \"code\" *ngIf=\"viewFull\"></app-audit-info>\n</div>\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { SubstanceCode } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { UtilsService } from '../../utils/utils.service';\n\n@Component({\n  selector: 'app-code-form',\n  templateUrl: './code-form.component.html',\n  styleUrls: ['./code-form.component.scss']\n})\nexport class CodeFormComponent implements OnInit {\n  private privateCode: SubstanceCode;\n  @Output() codeDeleted = new EventEmitter<SubstanceCode>();\n  codeSystemList: Array<VocabularyTerm> = [];\n  codeSystemDictionary: { [termValue: string]: VocabularyTerm };\n  codeSystemType: string;\n  codeTypeList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  viewFull = true;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private utilsService: UtilsService\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n  }\n\n  @Input()\n  set code(code: SubstanceCode) {\n    this.privateCode = code;\n  }\n\n  get code(): SubstanceCode {\n    return this.privateCode;\n  }\n\n  @Input()\n  set show(val: boolean) {\n    if (val != null) {\n     this.viewFull = val;\n    }\n  }\n\n  get show(): boolean {\n    return this.viewFull || null;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('CODE_SYSTEM', 'CODE_TYPE').subscribe(response => {\n      this.codeSystemList = response['CODE_SYSTEM'].list;\n      this.codeSystemDictionary = response['CODE_SYSTEM'].dictionary;\n      this.setCodeSystemType();\n      this.codeTypeList = response['CODE_TYPE'].list;\n    });\n  }\n\n  deleteCode(): void {\n    this.privateCode.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateCode.codeSystem\n      && !this.privateCode.type\n      && !this.privateCode.code\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.codeDeleted.emit(this.privateCode);\n      }, 2000);\n    }\n  }\n\n  trimWhitespace(value) {\n\n    this.code.url = value;\n    this.privateCode.url = this.privateCode.url.replace(/[\\u200A|\\u2009|\\u2006|\\u2008]/g, ' ').trim();\n    this.privateCode.url = value.trim().trim().trim();\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateCode.$$deletedCode;\n  }\n\n  setCodeSystemType(event?: any): void {\n    if (event) {\n      this.code.codeSystem = event;\n    }\n    if (this.privateCode != null && this.codeSystemDictionary != null) {\n      this.codeSystemType = this.codeSystemDictionary[this.privateCode.codeSystem]\n        && this.codeSystemDictionary[this.privateCode.codeSystem].systemCategory || '';\n    }\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.code.access = access;\n  }\n\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"codes && codes.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <button *ngIf=\"codes && codes.length > 0\" class = 'standardize' mat-button\n      matTooltip=\"expand / collapse code view rows\" (click)=\"collapse()\">{{expanded? 'Collapse':'Expand'}} All</button>\n  <!-- <button mat-button (click)=\"addCode()\" [disabled] = \"isAlternative\">\n    Add code <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"codes && codes.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"10\" showFirstLastButtons=\"true\"\n    (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"code\" *ngFor=\"let code of paged; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-code-' + index\">\n  <app-code-form [code]=\"code\" (codeDeleted)=\"deleteCode($event)\" [show] = \"expanded\"></app-code-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"codes && codes.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"10\" showFirstLastButtons=\"true\"\n  (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n<div *ngIf = \"codes && codes.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addCode()\"  [disabled] = \"isAlternative\">\n        Add code <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>\n","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { SubstanceCode } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormCodesService } from './substance-form-codes.service';\n\n@Component({\n  selector: 'app-substance-form-codes-card',\n  templateUrl: './substance-form-codes-card.component.html',\n  styleUrls: ['./substance-form-codes-card.component.scss']\n})\nexport class SubstanceFormCodesCardComponent extends SubstanceCardBaseFilteredList<SubstanceCode>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n\n  codes: Array<SubstanceCode>;\n  private subscriptions: Array<Subscription> = [];\n  pageSize = 10;\n  expanded = true;\n  validate = false;\n\n  constructor(\n    private substanceFormCodesService: SubstanceFormCodesService,\n    private substanceFormService: SubstanceFormService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form codes';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Codes');\n  }\n\n  collapse() {\n    this.expanded = !this.expanded;\n  }\n\n  ngAfterViewInit() {\n    const definitionSubscription = this.substanceFormService.definition.subscribe( level => {\n      if (level.definitionType && level.definitionType === 'ALTERNATIVE') {\n      //  this.canAddItemUpdate.emit(false);\n        this.hiddenStateUpdate.emit(true);\n      } else {\n        this.canAddItemUpdate.emit(true);\n        this.hiddenStateUpdate.emit(false);\n      }\n    });\n    this.subscriptions.push(definitionSubscription);\n    const codesSubscription = this.substanceFormCodesService.substanceCodes.subscribe(codes => {\n      this.codes = codes;\n      this.filtered = codes;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.codes, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(codesSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addCode();\n  }\n\n  addCode(): void {\n    this.substanceFormCodesService.addSubstanceCode();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-code-0`, 'center');\n    });\n  }\n\n  deleteCode(code: SubstanceCode): void {\n    this.substanceFormCodesService.deleteSubstanceCode(code);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormCodesCardComponent } from './substance-form-codes-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { CodeFormComponent } from './code-form.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormCodesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    SubstanceFormCodesCardComponent,\n    CodeFormComponent\n  ]\n})\nexport class SubstanceFormCodesModule { }\n"],"sourceRoot":"webpack:///","file":"328.e359172a56ff66e5.js"}