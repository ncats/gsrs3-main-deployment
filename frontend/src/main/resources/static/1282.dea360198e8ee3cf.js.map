{"version":3,"mappings":"kWAuBUA,eACEA,eAAKA,SAA2BA,QAChCA,eAAKA,SAA+EA,QACtFA,sCAFOA,mCACAA,2HAzBjBA,iBACEA,iBACIA,eAAyCA,iEAASC,oBACpDD,iBACAA,QACFA,QACAA,iBACEA,iBACEA,iBACEA,iBAAkBA,8BAAkBA,QACpCA,iBACFA,QACAA,kBACEA,kBAAkBA,8BAAiBA,QACnCA,mBAAmBA,6BAAiCA,QACtDA,QACAA,kBACEA,kBAAkBA,oBAAOA,QACzBA,mBAAmBA,UAAiBA,QACtCA,QACAA,kBACEA,kBAAkBA,mBAAMA,QACxBA,mBACEA,yBAIFA,QACFA,QACFA,QACAA,kBACEA,kBACEA,kBAAkBA,6BAAgBA,QAClCA,mBAAmBA,UAA0BA,QAC/CA,QACAA,kBACEA,kBAAkBA,wCAA2BA,QAC7CA,mBAAmBA,UAAyBA,QAC9CA,QACAA,kBACEA,kBAAkBA,mCAAsBA,QACxCA,mBAAmBA,UAAiDA,QACtEA,QACAA,kBACEA,kBAAkBA,yBAAYA,QAC9BA,mBAAmBA,UAAoBA,QACzCA,QACAA,kBACEA,kBAAkBA,8BAAiBA,QACnCA,mBAAmBA,UAA0BA,QAC/CA,QACFA,QACFA,QACFA,4CAlDmDA,kCAOxBA,4CAIAA,8CAIAA,yBAKXA,qCAUWA,kCAIAA,iCAIAA,0DAIAA,4BAIAA,mCCjCpB,IAAME,EAAb,eAAaA,EAAb,0CAME,WACoBC,EACAC,EACAC,EACAC,EACAC,GAA4B,6BAE9CC,gBANkBL,cACAK,4BACAA,qBACAA,WACAA,kBAVpBA,WAAmC,GACnCA,mBAAmB,IAAIC,IAEvBD,WAAW,QAOqCA,EAXlD,uCAgBE,WAAQ,WACNE,KAAKC,iBAAiBC,UAAU,YAC9BC,EAAKC,UAAYA,EACK,MAAlBD,EAAKC,WAAgD,MAA3BD,EAAKC,UAAUC,WAC3CF,EAAKE,SAAWC,KAAKC,MAAMD,KAAKE,UAAUL,EAAKC,UAAUC,WACzDF,EAAKE,SAASI,QAAS,YACrBC,EAAKC,QAAUR,EAAKR,iBAAiBiB,cAAcF,MAIvDP,EAAKU,YAAYC,KAAKX,EAAKE,SAASU,UAEtCf,KAAKgB,iBAAmBhB,KAAKN,wBAAwBuB,sBAEjDjB,KAAKH,cAAcqB,YAAclB,KAAKH,cAAcqB,WAAWC,oBACjEnB,KAAKoB,SAAW,OAASpB,KAAKH,cAAcqB,WAAWC,qBA/B7D,4BAmCE,SAAef,GAAS,WAClBiB,EAAYrB,KAAKJ,OAAO0B,KAAKC,KAA8B,CAC/DC,OAAQ,MACRC,MAAO,QACPC,WAAY,wBACZC,KAAM,CAACC,UAAWxB,EAAUyB,QAG9B7B,KAAKgB,iBAAiBc,MAAMC,OAAS,OAErC,IAAMC,EAAeX,EAAUY,cAAc/B,UAAU,WACrDgC,EAAKlB,iBAAiBc,MAAMC,OAAS,KACrCC,EAAaG,eACZ,WACDD,EAAKlB,iBAAiBc,MAAMC,OAAS,KACrCC,EAAaG,oBAlDjBC,GAAgDC,kDAAnC7C,GAA0BF,oFAA1BE,EAA0B8C,gbDhBvChD,8BAAuCA,4+DCgB1BE,EAAb,yBCFa+C,EAAb,eAAaA,KAAbC,iFAAaD,4DAPF,CACPE,KACAC,aAAsClD,GACtCmD,QAISJ,EAAb","names":["i0","ctx_r4","SubstanceMoietiesComponent","utilService","overlayContainerService","structureService","dialog","configService","a","Subject","this","substanceUpdated","subscribe","s","substance","moieties","JSON","parse","stringify","forEach","unit","formula","formatFormula","countUpdate","emit","length","overlayContainer","getContainerElement","configData","molWeightRounding","rounding","dialogRef","open","StructureImageModalComponent","height","width","panelClass","data","structure","uuid","style","zIndex","subscription","afterClosed","r","unsubscribe","t","SubstanceCardBase","selectors","SubstanceMoietiesModule","v","CommonModule","DynamicComponentLoaderModule","SubstanceImageModule"],"sources":["./src/app/core/substance-details/substance-moieties/substance-moieties.component.html","./src/app/core/substance-details/substance-moieties/substance-moieties.component.ts","./src/app/core/substance-details/substance-moieties/substance-moieties.module.ts"],"sourcesContent":["<div class=\"moiety\" *ngFor=\"let moiety of moieties\">\r\n  <div class=\"moiety-image\">\r\n      <a tabindex=\"0\" role=\"link\" class=\"zoom\" (click)=\"openImageModal(moiety)\">\r\n    <img class=\"structure-image\" appSubstanceImage [entityId]=\"moiety.uuid\" stereo = \"true\">\r\n    </a>\r\n  </div>\r\n  <div class=\"moiety-details-container\">\r\n    <div class=\"moiety-details\">\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Molecular Formula:</div>\r\n        <div class=\"value\" [innerHTML] = \"moiety.formula\"></div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Molecular Weight:</div>\r\n        <div class=\"value\">{{moiety.mwt | number: rounding}}</div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Charge:</div>\r\n        <div class=\"value\">{{moiety.charge}}</div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Count:</div>\r\n        <div class=\"value\">\r\n          <div *ngIf=\"moiety.countAmount\">\r\n            <div>{{moiety.countAmount.type}}</div>\r\n            <div>{{moiety.countAmount.average}}&nbsp;{{moiety.countAmount.units}}&nbsp;(average)</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"moiety-details\">\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Stereochemistry:</div>\r\n        <div class=\"value\">{{moiety.stereochemistry}}</div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Additional Stereochemistry:</div>\r\n        <div class=\"value\">{{moiety.atropisomerism}}</div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Defined Stereocenters:</div>\r\n        <div class=\"value\">{{moiety.stereoCenters}}/{{moiety.definedStereo}}</div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">E/Z Centers:</div>\r\n        <div class=\"value\">{{moiety.ezCenters}}</div>\r\n      </div>\r\n      <div class=\"name-value\">\r\n        <div class=\"name\">Optical Activity:</div>\r\n        <div class=\"value\">{{moiety.opticalActivity}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { SubstanceCardBase } from '../substance-card-base';\r\nimport {SubstanceDetail, SubstanceMoiety} from '../../substance/substance.model';\r\nimport { SafeUrl } from '@angular/platform-browser';\r\nimport {UtilsService} from '../../utils/utils.service';\r\nimport {Subject} from 'rxjs';\r\nimport { StructureImageModalComponent, StructureService } from '@gsrs-core/structure';\r\nimport { OverlayContainer } from '@angular/cdk/overlay';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ConfigService } from '@gsrs-core/config';\r\n\r\n@Component({\r\n  selector: 'app-substance-moieties',\r\n  templateUrl: './substance-moieties.component.html',\r\n  styleUrls: ['./substance-moieties.component.scss']\r\n})\r\nexport class SubstanceMoietiesComponent extends SubstanceCardBase implements OnInit {\r\n  moieties: Array<SubstanceMoiety> = [];\r\n  substanceUpdated = new Subject<SubstanceDetail>();\r\n  private overlayContainer: HTMLElement;\r\n  rounding = '1.0-2';\r\n\r\n  constructor(\r\n              private utilService: UtilsService,\r\n              private overlayContainerService: OverlayContainer,\r\n              private structureService: StructureService,\r\n              private dialog: MatDialog,\r\n              private configService: ConfigService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.substanceUpdated.subscribe(substance => {\r\n      this.substance = substance;\r\n      if (this.substance != null && this.substance.moieties != null) {\r\n        this.moieties = JSON.parse(JSON.stringify(this.substance.moieties));\r\n        this.moieties.forEach( unit => {\r\n          unit.formula = this.structureService.formatFormula(unit);\r\n\r\n        });\r\n      }\r\n      this.countUpdate.emit(this.moieties.length);\r\n    });\r\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\r\n\r\n    if (this.configService.configData && this.configService.configData.molWeightRounding) {\r\n      this.rounding = '1.0-' + this.configService.configData.molWeightRounding;\r\n  }\r\n\r\n  }\r\n  openImageModal(substance) {\r\n  const dialogRef = this.dialog.open(StructureImageModalComponent, {\r\n    height: '90%',\r\n    width: '650px',\r\n    panelClass: 'structure-image-panel',\r\n    data: {structure: substance.uuid}\r\n  });\r\n\r\n  this.overlayContainer.style.zIndex = '1002';\r\n\r\n  const subscription = dialogRef.afterClosed().subscribe(() => {\r\n    this.overlayContainer.style.zIndex = null;\r\n    subscription.unsubscribe();\r\n  }, () => {\r\n    this.overlayContainer.style.zIndex = null;\r\n    subscription.unsubscribe();\r\n  });\r\n\r\n}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubstanceMoietiesComponent } from './substance-moieties.component';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\nimport { SubstanceImageModule } from '@gsrs-core/substance/substance-image.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DynamicComponentLoaderModule.forChild(SubstanceMoietiesComponent),\r\n    SubstanceImageModule\r\n  ],\r\n  declarations: [SubstanceMoietiesComponent]\r\n})\r\nexport class SubstanceMoietiesModule { }\r\n"],"sourceRoot":"webpack:///","file":"1282.dea360198e8ee3cf.js"}