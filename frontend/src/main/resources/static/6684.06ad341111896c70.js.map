{"version":3,"mappings":"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","names":["i0","ctx_r2","AgentModificationFormComponent","cvService","dialog","utilsService","overlayContainerService","substanceFormService","this","EventEmitter","getVocabularies","overlayContainer","getContainerElement","privateMod","set","mod","agentSubstance","relatedSubstanceUuid","refuuid","access","getDomainVocabulary","subscribe","n","modTypeList","response","AGENT_MODIFICATION_TYPE","list","modProcessList","AGENT_MODIFICATION_PROCESS","modRoleList","ROLE","$$deletedCode","newUUID","deleteTimer","setTimeout","modDeleted","emit","clearTimeout","amount","dialogRef","open","AmountFormDialogComponent","data","subsAmount","width","style","zIndex","dialogSubscription","afterClosed","newAmount","subscriptions","push","event","agentModificationProcess","substance","refPname","_name","name","uuid","substanceClass","approvalID","amt","displayAmount","v","display","value","d","selectors","ctx","ctx_r6","ctx_r8","SubstanceFormAgentModificationsCardComponent","substanceFormAgentModificationsService","scrollToService","gaService","s","analyticsEventCategory","menuLabelUpdate","canAddItemUpdate","agentSubscription","substanceAgentModifications","c","modifications","forEach","subscription","unsubscribe","componentDestroyed","addStructuralModification","addSubstanceAgentModification","scrollToElement","modification","deleteSubstanceAgentModification","SubstanceCardBaseFilteredList","SubstanceFormAgentModificationsModule","m","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule"],"sources":["./src/app/core/substance-form/agent-modifications/agent-modification-form.component.html","./src/app/core/substance-form/agent-modifications/agent-modification-form.component.ts","./src/app/core/substance-form/agent-modifications/substance-form-agent-modifications-card.component.html","./src/app/core/substance-form/agent-modifications/substance-form-agent-modifications-card.component.ts","./src/app/core/substance-form/agent-modifications/substance-form-agent-modifications.module.ts"],"sourcesContent":["<div class=\"code-form-container\">\n  <div *ngIf=\"mod.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"delete-container\">\n  <button mat-icon-button matTooltip=\"Delete code\" (click)=\"deleteCode()\">\n    <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n  </button>\n</div>\n  <div class=\"flex-column related-substance\">\n    <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n                            eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Agent Substance\" header=\"Agent Substance\"\n                            [subuuid]=\"relatedSubstanceUuid\">\n    </app-substance-selector>\n  </div>\n    <div class=\"flex-column form-content\">\n      <div class=\"form-row\">\n        <app-cv-input key = \"Agent Modification Agent Modification Process\" title = \"Modification Process\" [model] = \"mod.agentModificationProcess\" (valueChange)=\"updateProcess($event)\"></app-cv-input>\n        <app-cv-input key = \"Agent Modification Agent Modification Type\" title = \"Modification Type\" [model] = \"mod.agentModificationType\" (valueChange)=\"mod.agentModificationType = $event\"></app-cv-input>\n        <app-cv-input key = \"Agent Modification Agent Modification Role\" title = \"Modification Role\" [model] = \"mod.agentModificationRole\" (valueChange)=\"mod.agentModificationRole = $event\"></app-cv-input>\n\n      </div>\n      <div class=\"form-row\">\n    <div class = 'amount'>\n      <div class = \"label amt-label\">\n        Amount\n      </div>\n      <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n        <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n    <div class = \"amount-display\">\n      <div *ngIf = \"mod.amount\">\n        {{displayAmount(mod.amount)}}\n      </div>\n    </div>\n    </div>\n\n    <mat-form-field class=\"group\">\n      <input matInput placeholder=\"Group\" [(ngModel)]=\"mod.modificationGroup\" required name=\"group\" />\n    </mat-form-field>\n    <div class = \"access\">\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"mod.access\">\n      </app-access-manager>\n    </div>\n      </div>\n    </div>\n\n\n  </div>\n  <div class = \"form-row\">\n      <app-audit-info [source] = \"mod\"></app-audit-info>\n    </div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\nimport {AgentModification, StructuralModification, SubstanceAmount, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\n\n@Component({\n  selector: 'app-agent-modification-form',\n  templateUrl: './agent-modification-form.component.html',\n  styleUrls: ['./agent-modification-form.component.scss']\n})\nexport class AgentModificationFormComponent implements OnInit {\n  private privateMod: AgentModification;\n  @Output() modDeleted = new EventEmitter<AgentModification>();\n  modTypeList: Array<VocabularyTerm> = [];\n  modRoleList: Array<VocabularyTerm> = [];\n  modProcessList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set mod(mod: AgentModification) {\n    this.privateMod = mod;\n    if (this.privateMod.agentSubstance) {\n      this.relatedSubstanceUuid = this.privateMod.agentSubstance.refuuid;\n    }\n\n  }\n\n  get mod(): AgentModification {\n    return this.privateMod;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.mod.access = access;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('AGENT_MODIFICATION_TYPE', 'AGENT_MODIFICATION_PROCESS', 'ROLE').subscribe(response => {\n      this.modTypeList = response['AGENT_MODIFICATION_TYPE'].list;\n      this.modProcessList = response['AGENT_MODIFICATION_PROCESS'].list;\n      this.modRoleList = response['ROLE'].list;\n    });\n  }\n\n  deleteCode(): void {\n    this.privateMod.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateMod\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.modDeleted.emit(this.privateMod);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMod.$$deletedCode;\n  }\n\n  openAmountDialog(): void {\n    if (!this.mod.amount) {\n      this.mod.amount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.mod.amount},\n      width: '990px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.mod.amount = newAmount;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateProcess(event: string) {\n    this.privateMod.agentModificationProcess = event;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    if ( substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.mod.agentSubstance = relatedSubstance;\n      this.relatedSubstanceUuid = this.mod.agentSubstance.refuuid;\n    } else {\n      this.mod.agentSubstance = null;\n      this.relatedSubstanceUuid = '';\n    }\n  }\n\n  displayAmount(amt: SubstanceAmount): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n}\n","\n<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addStructuralModification()\">\n    Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n  <div class = 'alternate-backgrounds'   *ngFor=\"let mod of modifications; last as isLast; index as index\"  [id]=\"'substance-agent-modification-' + index\" >\n    <app-agent-modification-form [mod]=\"mod\" (modDeleted) = \"deleteAgentModification()\" ></app-agent-modification-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n\n\n  <div class=\"flex-row\" *ngIf= \"modifications && modifications.length > 0\">\n      <span class = \"middle-fill\"></span>\n         <button mat-button (click)=\"addStructuralModification()\">\n      Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n    </button> \n    </div>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {AgentModification, StructuralModification} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormAgentModificationsService} from './substance-form-agent-modifications.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\n\n@Component({\n  selector: 'app-substance-form-agent-modifications-card',\n  templateUrl: './substance-form-agent-modifications-card.component.html',\n  styleUrls: ['./substance-form-agent-modifications-card.component.scss']\n})\n// eslint-disable-next-line max-len\nexport class SubstanceFormAgentModificationsCardComponent\n  extends SubstanceCardBaseFilteredList<AgentModification>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n\n  modifications: Array<AgentModification>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormAgentModificationsService: SubstanceFormAgentModificationsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form agent modifications';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Agent Modifications');\n  }\n\n  ngAfterViewInit() {\n    this.canAddItemUpdate.emit(true);\n    const agentSubscription = this.substanceFormAgentModificationsService.substanceAgentModifications.subscribe(modifications => {\n      this.modifications = modifications;\n    });\n    this.subscriptions.push(agentSubscription);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n    this.componentDestroyed.emit();\n  }\n\n  addItem() {\n    this.addStructuralModification();\n  }\n\n  addStructuralModification(): void {\n    this.substanceFormAgentModificationsService.addSubstanceAgentModification();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-agent-modification-0`, 'center');\n    });\n  }\n\n  deleteAgentModification(modification: AgentModification): void {\n    this.substanceFormAgentModificationsService.deleteSubstanceAgentModification(modification);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {SubstanceFormAgentModificationsCardComponent} from '@gsrs-core/substance-form/agent-modifications/substance-form-agent-modifications-card.component';\nimport {AgentModificationFormComponent} from '@gsrs-core/substance-form/agent-modifications/agent-modification-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormAgentModificationsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormAgentModificationsCardComponent,\n    AgentModificationFormComponent\n  ]\n})\nexport class SubstanceFormAgentModificationsModule { }\n"],"sourceRoot":"webpack:///","file":"6684.06ad341111896c70.js"}