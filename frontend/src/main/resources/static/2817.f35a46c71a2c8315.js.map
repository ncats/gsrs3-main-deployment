{"version":3,"mappings":"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","names":["i0","ctx_r3","ConstituentFormComponent","cvService","dialog","utilsService","overlayContainerService","m","this","EventEmitter","overlayContainer","getContainerElement","privateConstituent","set","constituent","substance","relatedSubstanceUuid","refuuid","$$deletedCode","newUUID","deleteTimer","setTimeout","n","constituentDeleted","emit","clearTimeout","amount","dialogRef","open","AmountFormDialogComponent","data","subsAmount","width","style","zIndex","dialogSubscription","afterClosed","subscribe","newAmount","subscriptions","push","event","role","access","refPname","_name","name","uuid","substanceClass","approvalID","amt","displayAmount","v","display","value","c","selectors","ctx","ctx_r5","SubstanceFormConstituentsCardComponent","substanceFormConstituentsService","scrollToService","gaService","r","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","agentSubscription","substanceConstituents","a","constituents","componentDestroyed","forEach","subscription","unsubscribe","addConstituent","addSubstanceConstituent","scrollToElement","deleteSubstanceConstituent","SubstanceCardBaseFilteredList","SubstanceFormConstituentsModule","d","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule"],"sources":["./src/app/core/substance-form/constituents/constituent-form.component.html","./src/app/core/substance-form/constituents/constituent-form.component.ts","./src/app/core/substance-form/constituents/substance-form-constituents-card.component.html","./src/app/core/substance-form/constituents/substance-form-constituents-card.component.ts","./src/app/core/substance-form/constituents/substance-form-constituents.module.ts"],"sourcesContent":["<div class=\"constituent-form-container\">\n\n  <div *ngIf=\"constituent.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class = \"form-row\">\n  <div class=\"delete-container\">\n    <button mat-icon-button matTooltip=\"Delete code\" (click)=\"delete()\">\n      <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n    </button>\n  </div>\n\n  <div class=\"flex-column related-substance\">\n    <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n                            eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Related Substance\" header=\"Related Substance\"\n                            [subuuid]=\"relatedSubstanceUuid\">\n    </app-substance-selector>\n  </div>\n  <div class = \"field-column\">\n    <div class=\"role\">\n      <app-cv-input domain = 'CONSTITUENT_ROLE' title = \"constituent role\" [model] = \"privateConstituent.role\" (valueChange)=\"updateProcess($event)\"></app-cv-input>\n    </div>\n\n    <div class = 'amount'>\n      <div class = \"label amt-label\">\n        Amount\n        <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n          <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n      </div>\n\n      <div class = \"amount-display\">\n        <div *ngIf = \"privateConstituent.amount\">\n          {{displayAmount(privateConstituent.amount)}}\n        </div>\n      </div>\n    </div>\n  </div>\n    <div class = \"access\">\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"constituent.access\">\n      </app-access-manager>\n    </div>\n  </div>\n  <div class=\"form-row\" *ngIf=\"!privateConstituent.$$deletedCode\">\n    <div class=\"references-container\">\n      <app-domain-references [referencesUuids]=\"privateConstituent.references\" #references></app-domain-references>\n    </div>\n  </div>\n\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AgentModification, Constituent, SubstanceAmount, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\n\n@Component({\n  selector: 'app-constituent-form',\n  templateUrl: './constituent-form.component.html',\n  styleUrls: ['./constituent-form.component.scss']\n})\nexport class ConstituentFormComponent implements OnInit {\n   privateConstituent: Constituent;\n  @Output() constituentDeleted = new EventEmitter<Constituent>();\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer\n  ) { }\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set constituent(constituent: Constituent) {\n    this.privateConstituent = constituent;\n    if (this.constituent.substance) {\n      this.relatedSubstanceUuid = this.privateConstituent.substance.refuuid;\n    }\n\n  }\n\n  get constituent(): Constituent {\n    return this.privateConstituent;\n  }\n\n  delete(): void {\n    this.privateConstituent.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateConstituent.substance) {\n      this.deleteTimer = setTimeout(() => {\n        this.constituentDeleted.emit(this.privateConstituent);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateConstituent.$$deletedCode;\n  }\n\n  openAmountDialog(): void {\n    if (!this.privateConstituent.amount) {\n      this.privateConstituent.amount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.privateConstituent.amount},\n      width: '990px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      if (newAmount) {\n        this.privateConstituent.amount = newAmount;\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateProcess(event: string) {\n    this.privateConstituent.role = event;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.privateConstituent.access = access;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    const relatedSubstance: SubstanceRelated = {\n      refPname: substance._name,\n      name: substance._name,\n      refuuid: substance.uuid,\n      substanceClass: 'reference',\n      approvalID: substance.approvalID\n    };\n    this.privateConstituent.substance = relatedSubstance;\n    this.relatedSubstanceUuid = this.privateConstituent.substance.refuuid;\n  }\n\n  displayAmount(amt: SubstanceAmount): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addConstituent()\">\n    Add Constituent <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n  <div class = \"alternate-backgrounds\" *ngFor = \"let constituent of constituents; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-constituent-' + index\" >\n    <app-constituent-form [constituent]=\"constituent\" (constituentDeleted)=\"deleteConstituent($event)\"></app-constituent-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n\n\n  <div class=\"flex-row\">\n      <span class = \"middle-fill\"></span>\n         <button mat-button (click)=\"addConstituent()\">\n          Add Constituent <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n</div>\n\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AgentModification, Constituent} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport { SubstanceFormConstituentsService } from './substance-form-constituents.service';\n\n@Component({\n  selector: 'app-substance-form-constituents-card',\n  templateUrl: './substance-form-constituents-card.component.html',\n  styleUrls: ['./substance-form-constituents-card.component.scss']\n})\nexport class SubstanceFormConstituentsCardComponent extends SubstanceCardBaseFilteredList<Constituent>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  constituents: Array<Constituent>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormConstituentsService: SubstanceFormConstituentsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form constituents';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Constituents');\n  }\n\n  ngAfterViewInit() {\n    const agentSubscription = this.substanceFormConstituentsService.substanceConstituents.subscribe(constituents => {\n      this.constituents = constituents;\n    });\n    this.subscriptions.push(agentSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addConstituent();\n  }\n\n  addConstituent(): void {\n    this.substanceFormConstituentsService.addSubstanceConstituent();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-constituent-0`, 'center');\n    });\n  }\n\n  deleteConstituent(constituent: Constituent): void {\n    this.substanceFormConstituentsService.deleteSubstanceConstituent(constituent);\n  }\n\n}\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport {SubstanceFormConstituentsCardComponent} from '@gsrs-core/substance-form/constituents/substance-form-constituents-card.component';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ScrollToModule} from '@gsrs-core/scroll-to';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport { ConstituentFormComponent } from './constituent-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormConstituentsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormConstituentsCardComponent,\n    ConstituentFormComponent\n  ]\n})\nexport class SubstanceFormConstituentsModule { }\n"],"sourceRoot":"webpack:///","file":"2817.f35a46c71a2c8315.js"}