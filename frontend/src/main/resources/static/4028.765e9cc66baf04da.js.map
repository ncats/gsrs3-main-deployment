{"version":3,"mappings":"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","names":["SubstanceClassPipe","name","item2","tempName","toLowerCase","replace","s","pure","i0","ctx_r60","ctx_r63","ctx_r66","SubstanceOverviewComponent","sanitizer","utilsService","gaService","substanceService","router","authService","cvService","configService","loadingService","overlayContainerService","dialog","o","FormControl","Validators","Subject","baseDomain","configData","apiUrlDomain","clasicBaseHref","environment","rolesSubscription2","this","hasAnyRolesAsync","subscribe","t","canEdit","isEditable","substance","substanceClass","formSections","isAdmin","subscriptions","push","getSubtypeRefs","theJSON","JSON","stringify","uri","bypassSecurityTrustUrl","encodeURIComponent","downloadJsonHref","getVersion","getClassFromCv","oldUrl","oldSiteRedirect","uuid","defaultCodeSystem","primaryCode","showOldLinks","showlinks","getDefAccess","codes","length","defaultCodes","forEach","code","codeSystem","join","overlayContainer","getContainerElement","subscription","unsubscribe","subSubscription","substanceUpdated","structurallyDiverse","defAccess","access","protein","structure","mixture","polymer","nucleicAcid","specifiedSubstance","references","checkVersion","result","versions","latestVersion","setVersionList","versionControl","setValue","version","console","log","error","value","toString","navigate","i","sendEvent","analyticsEventCategory","showDef","defIcon","getDomainVocabulary","response","SUBSTANCE_CLASS","list","c","display","dialogRef","open","SubstanceHistoryDialogComponent","data","latest","width","autoFocus","disableClose","style","zIndex","afterClosed","onSameUrlNavigation","u","SubstanceCardBase","selectors","SubstanceOverviewModule","m","CommonModule","DynamicComponentLoaderModule","ReferencesManagerModule","MatExpansionModule","MatIconModule","RouterModule","MatFormFieldModule","MatTooltipModule","MatSelectModule","ReactiveFormsModule","MatMenuModule","MatButtonModule","SubstanceImageModule","MatChipsModule"],"sources":["./src/app/core/utils/substance-class.pipe.ts","./src/app/core/substance-details/substance-overview/substance-overview.component.html","./src/app/core/substance-details/substance-overview/substance-overview.component.ts","./src/app/core/substance-details/substance-overview/substance-overview.module.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'classDisplay'\n})\nexport class SubstanceClassPipe implements PipeTransform {\n  transform(name: string, item2?: string): string {\n    const tempName = name.toLowerCase().replace(' ', '');\n    if (tempName === 'chemical') {\n      return 'Chemical';\n    } else if (tempName === 'nucleicacid') {\n      return 'Nucleic Acid';\n    } else if (tempName === 'protein') {\n      return 'Protein';\n    } else if (tempName === 'specifiedsubstanceg1') {\n      return 'Group 1 Specified Substance';\n    } else if (tempName === 'polymer') {\n      return 'Polymer';\n    } else if (tempName === 'structurallydiverse') {\n      return 'Structurally Diverse';\n    } else if (tempName === 'polymer') {\n      return 'Polymer';\n    } else if (tempName === 'concept') {\n      return 'Concept';\n    } else if (tempName === 'specifiedsubstanceg3') {\n      return 'Group 3 Specified Substance';\n    } else {\n      return name;\n    }\n\n  }\n}\n","<div *ngIf=\"substance\">\n  <div class='options-area'>\n    <a mat-icon-button [href]=\"oldUrl\" target=\"_blank\" *ngIf = \"showlinks\" matTooltip=\"view in old application\"><span hidden>open in old\n        application in new tab</span>\n      <mat-icon svgIcon=\"open_in_new\"></mat-icon>\n    </a>\n    <span *ngIf=\"canEdit\">\n        <a mat-icon-button [routerLink]=\"['/substances', substance.uuid, 'edit']\" matTooltip='edit record'\n        name=\"edit_record\" aria-label=\"edit record\">\n        <mat-icon svgIcon=\"edit\"></mat-icon>\n      </a>\n</span>\n    <span *ngIf=\"canEdit\">\n      <button mat-icon-button [matMenuTriggerFor]=\"editMenu\" name=\"edit_substance\" matTooltip=\"copy to edit form options\"\n        *ngIf=\"isEditable; else editClassic\" aria-label=\"copy file\">\n        <mat-icon svgIcon=\"file_copy\"></mat-icon>\n      </button>\n      <ng-template #editClassic *ngIf = \"showlinks\">\n        <a mat-icon-button [href]=\"baseDomain + clasicBaseHref + 'substance/' + substance.uuid + '/edit'\" name=\"edit\"\n          target=\"_blank\">\n          <mat-icon svgIcon=\"edit\"></mat-icon>\n        </a>\n      </ng-template>\n    </span>\n    <button mat-icon-button [matMenuTriggerFor]=\"downloadMenu\" aria-label=\"download file\" matTooltip=\"download options\" name=\"download\">\n      <mat-icon svgIcon=\"get_app\"></mat-icon>\n    </button>\n    <mat-menu #downloadMenu=\"matMenu\" xPosition=\"before\">\n      <a *ngIf=\"substance.uuid\" name=\"download_json\" mat-menu-item [href]=\"downloadJsonHref\"\n        download=\"{{substance.approvalID? substance.approvalID.toString() : substance.uuid.toString()}}.json\">\n        <span>Download JSON</span>\n      </a>\n    </mat-menu>\n    <mat-menu #editMenu=\"matMenu\" xPosition=\"before\">\n      <a mat-icon-button [routerLink]=\"['/substances/register',substance.substanceClass]\"\n        [queryParams]=\"{copy:substance.uuid}\" matTooltip='copy substance to new registration form'>\n        <mat-icon svgIcon=\"file_copy\"></mat-icon>\n      </a>\n      <a mat-icon-button [routerLink]=\"['/substances/register',substance.substanceClass]\"\n        [queryParams]=\"{copy:substance.uuid,copyType:'definition'}\"\n        matTooltip='copy definition to new registration form'>\n        <mat-icon svgIcon=\"outline-file_copy\"></mat-icon>\n      </a>\n    </mat-menu>\n  </div>\n  <div class=\"extra-area\" *ngIf=\"substance.definitionLevel &&  substance.definitionLevel !== 'COMPLETE'\">\n    <span class=\"definition-level\">\n      {{substance.definitionLevel}} DEFINITION\n    </span>\n  </div>\n  <div>\n    <div class=\"name-value\">\n      <div class=\"name\">Substance Class</div>\n      <div class=\"value blue-font\">{{substance.substanceClass | classDisplay}}</div>\n    </div>\n    <div class=\"name-value\">\n      <div class=\"name\">Record UNII</div>\n      <div class=\"value blue-font\">{{substance._approvalIDDisplay}}</div>\n    </div>\n    <div class=\"name-value\" *ngIf=\"defaultCodes\">\n      <div class=\"name\">{{defaultCodeSystem}}</div>\n      <div class=\"value blue-font\">{{defaultCodes}}</div>\n    </div>\n    <div class=\"name-value\">\n      <div class=\"name\">Record Protection Status</div>\n      <div class=\"value blue-font\">\n        <span *ngIf=\"(substance.access && substance.access.length > 0) else lockedIndicator\">\n          <span>Not a public record</span>&nbsp;\n          <mat-icon svgIcon=\"lock\"></mat-icon>\n        </span>\n        <ng-template #lockedIndicator>\n          <span>Public record</span>&nbsp;\n          <mat-icon svgIcon=\"lock_open\"></mat-icon>\n        </ng-template>\n      </div>\n    </div>\n    <div class=\"name-value\">\n      <div class=\"name\">Record Status</div>\n      <div class=\"value blue-font\">{{substance.status === 'approved' ? primaryCode : substance.status}}\n        <span class = \"deprecated\" *ngIf =\"substance.deprecated\">RECORD IS DEPRECATED</span>\n      </div>\n    </div>\n    <div *ngIf=\"substance.protein\" class=\"diverseWrapper\">\n      <div class=\"name-value\" *ngIf=\"substance.protein.proteinType\">\n        <div class=\"name\">Protein Type</div>\n        <div class=\"value blue-font\">{{substance.protein.proteinType}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.protein.proteinSubType\">\n        <div class=\"name\">Protein Sub-type</div>\n        <div class=\"value blue-font\">{{substance.protein.proteinSubType.replace('|', ', ')}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.protein.sequenceType\">\n        <div class=\"name\">Sequence Type</div>\n        <div class=\"value blue-font\">{{substance.protein.sequenceType}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.protein.sequenceOrigin\">\n        <div class=\"name\">Sequence Origin</div>\n        <div class=\"value blue-font\">{{substance.protein.sequenceOrigin}}</div>\n      </div>\n    </div>\n    <div *ngIf=\"substance.nucleicAcid\" class=\"diverseWrapper\">\n      <div class=\"name-value\" *ngIf=\"substance.nucleicAcid.nucleicAcidType\">\n        <div class=\"name\">Nucleic Acid Type</div>\n        <div class=\"value blue-font\">{{substance.nucleicAcid.nucleicAcidType}}</div>\n      </div>\n      <div class=\"name-value\"\n        *ngIf=\"substance.nucleicAcid.nucleicAcidSubType && substance.nucleicAcid.nucleicAcidSubType.length > 0\">\n        <div class=\"name\">Nucleic Acid Sub-type</div>\n        <div class=\"value blue-font\">{{substance.nucleicAcid.nucleicAcidSubType.join(', ')}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.nucleicAcid.sequenceType\">\n        <div class=\"name\">Sequence Type</div>\n        <div class=\"value blue-font\">{{substance.nucleicAcid.sequenceType}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.nucleicAcid.sequenceOrigin\">\n        <div class=\"name\">Sequence Origin</div>\n        <div class=\"value blue-font\">{{substance.nucleicAcid.sequenceOrigin}}</div>\n      </div>\n    </div>\n    <div *ngIf=\"substance.structurallyDiverse\" class=\"diverseWrapper\">\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.sourceMaterialClass\">\n        <div class=\"name\">Source Materials Class</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.sourceMaterialClass}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.sourceMaterialType\">\n        <div class=\"name\">Source Materials Type</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.sourceMaterialType}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.sourceMaterialState\">\n        <div class=\"name\">Source Materials State</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.sourceMaterialState}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.parentSubstance\">\n        <div class=\"name\">Source Materials Parent</div>\n        <div class=\"thumb-col\">\n          <img class=\"image-thumb\" appSubstanceImage [entityId]=\"substance.structurallyDiverse.parentSubstance.refuuid\"\n            size=\"400\">\n          <div>\n            <a class=\"substance-name\"\n              [routerLink]=\"['/substances', substance.structurallyDiverse.parentSubstance.refuuid]\">\n              {{substance.structurallyDiverse.parentSubstance.refPname}}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.organismFamily\">\n        <div class=\"name\">Organism Family</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.organismFamily}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.organismGenus\">\n        <div class=\"name\">Organism Genus</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.organismGenus}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.organismSpecies\">\n        <div class=\"name\">Organism Species</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.organismSpecies}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.infraSpecificType\">\n        <div class=\"name\">Organism Infraspecific Type</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.infraSpecificType}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.infraSpecificName\">\n        <div class=\"name\">Organism Intraspecific Name</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.infraSpecificName}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.organismAuthor\">\n        <div class=\"name\">Organism Author</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.organismAuthor}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.developmentalStage\">\n        <div class=\"name\">Developmental Stage</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.developmentalStage}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.part?.length > 0\">\n        <div class=\"name\">Part</div>\n        <div class=\"value blue-font\">\n          <span *ngFor=\"let part of substance.structurallyDiverse.part; last as isLast\">\n            {{part}}<span *ngIf=\"!isLast\">, </span>\n          </span></div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.fractionMaterialType\">\n        <div class=\"name\">Fraction Materials Type</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.fractionMaterialType}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse.fractionName\">\n        <div class=\"name\">Fraction Name</div>\n        <div class=\"value blue-font\">{{substance.structurallyDiverse.fractionName}}</div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse && substance.structurallyDiverse.hybridSpeciesPaternalOrganism\">\n        <div class=\"name\">Hybrid Paternal Organism</div>\n        <div class=\"thumb-col\">\n          <img class=\"image-thumb\" appSubstanceImage [entityId]=\"substance.structurallyDiverse.hybridSpeciesPaternalOrganism.refuuid\"\n            size=\"400\">\n          <div>\n            <a class=\"substance-name\"\n              [routerLink]=\"['/substances', substance.structurallyDiverse.hybridSpeciesPaternalOrganism.refuuid]\">\n              {{substance.structurallyDiverse.hybridSpeciesPaternalOrganism.refPname}}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"name-value\" *ngIf=\"substance.structurallyDiverse && substance.structurallyDiverse.hybridSpeciesMaternalOrganism\">\n        <div class=\"name\">Hybrid Paternal Organism</div>\n        <div class=\"thumb-col\">\n          <img class=\"image-thumb\" appSubstanceImage [entityId]=\"substance.structurallyDiverse.hybridSpeciesMaternalOrganism.refuuid\"\n            size=\"400\">\n          <div>\n            <a class=\"substance-name\"\n              [routerLink]=\"['/substances', substance.structurallyDiverse.hybridSpeciesMaternalOrganism.refuuid]\">\n              {{substance.structurallyDiverse.hybridSpeciesMaternalOrganism.refPname}}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"!isAdmin\" class=\"name-value\">\n      <div class=\"name\">Record Version</div>\n      <div class=\"value blue-font\">{{substance.version}}</div>\n    </div>\n    <div *ngIf=\"isAdmin\" class=\"name-value\">\n      <div class=\"name\">Record Version</div>\n      <mat-form-field class=\"version-dropdown\">\n        <mat-select [formControl]=\"versionControl\" class=\"version-select\">\n          <mat-option *ngFor=\"let version of versions\" [value]=\"version\" class=\"version-option\">\n            {{version}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <button *ngIf=\"substance.version != versionControl.value\" mat-button\n        class=\"mat-raised-button mat-primary view-version\" (click)='changeVersion()'>View</button>\n    </div>\n    <div *ngIf=\"substance.version != latestVersion\" class=\"indent\">\n      This is an older version of this substance - Ver. {{this.substance.version}}\n      <button *ngIf=\"isAdmin\" mat-button\n        class=\"mat-raised-button mat-primary view-version\" (click)='restoreVersion()'>Restore this version</button>\n    </div>\n    <div class=\"name-value\">\n      <div class=\"name\">Tags</div>\n      <div class=\"value\">\n        <mat-chip-list #tagList aria-label=\"Tags\" selectable=\"false\">\n          <mat-chip\n            *ngFor=\"let tag of substance.tags\"\n            removable=\"false\">\n              {{tag}}\n          </mat-chip>\n        </mat-chip-list>\n      </div>\n    </div>\n    <div class=\"name-value\" *ngIf=\"references?.length > 0\">\n      <div class=\"name\">\n        <a tabindex=\"0\" role=\"link\" (click)=\"toggleReferences()\" class='blue-font references-link'>\n          <span>{{showDef === false ? 'Show' : 'Hide'}} Definitional References</span>\n          <mat-icon svgIcon=\"{{defIcon}}\"></mat-icon>\n        </a>\n      </div>\n    </div>\n    <div [hidden]=\"!showDef\">\n      <app-references-manager [substance]=\"substance\" [references]=\"references\"></app-references-manager>\n    </div>\n    <div class=\"name-value\">\n        <div class=\"name\">Definitional Access</div>\n        <div class=\"value blue-font\">\n            <span *ngIf=\"(defAccess && defAccess.length > 0) else defIndicator\">\n              <span>Not a public definition</span>&nbsp;\n              <mat-icon svgIcon=\"lock\"></mat-icon>\n            </span>\n            <ng-template #defIndicator>\n              <span>Public definition</span>&nbsp;\n              <mat-icon svgIcon=\"lock_open\"></mat-icon>\n            </ng-template>\n          </div>\n      <!--  <div class=\"value\">\n          <span *ngIf = \"!defAccess || defAccess.length === 0\">Public</span>\n          <span *ngIf = \"defAccess && defAccess.length > 0\">\n            <span class = \"pre\" *ngFor =\"let access of defAccess;last as islast\">\n              {{access}}{{!islast? ', ':''}}\n            </span>\n          </span>\n\n        </div>-->\n      </div>\n  </div>\n</div>","\nimport { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBase } from '../substance-card-base';\nimport {SubstanceDetail} from '../../substance/substance.model';\nimport {DomSanitizer, SafeUrl} from '@angular/platform-browser';\nimport {UtilsService} from '../../utils/utils.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport {AuthService} from '@gsrs-core/auth/auth.service';\nimport {SubstanceService} from '@gsrs-core/substance/substance.service';\nimport {FormControl, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {formSections} from '@gsrs-core/substance-form/form-sections.constant';\nimport {Subject, of, Subscription} from 'rxjs';\nimport {ControlledVocabularyService} from '@gsrs-core/controlled-vocabulary';\nimport { SubstanceClassPipe } from '../../utils/substance-class.pipe';\nimport {ConfigService} from '@gsrs-core/config';\nimport { catchError } from 'rxjs/operators';\nimport { LoadingService } from '@gsrs-core/loading';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { SubstanceHistoryDialogComponent } from '@gsrs-core/substance-history-dialog/substance-history-dialog.component';\n\n@Component({\n  selector: 'app-substance-overview',\n  templateUrl: './substance-overview.component.html',\n  styleUrls: ['./substance-overview.component.scss']\n})\nexport class SubstanceOverviewComponent extends SubstanceCardBase implements OnInit, AfterViewInit, OnDestroy {\n  references: string[] = [];\n  showDef = false;\n  downloadJsonHref: any;\n  defIcon = 'drop_down';\n  latestVersion: number;\n  canEdit: boolean;\n  defAccess: Array<string>;\n  versionControl = new FormControl('', Validators.required);\n  versions: string[] = [];\n  isEditable = false;\n  isAdmin = false;\n  substanceUpdated = new Subject<SubstanceDetail>();\n  oldUrl: string;\n  baseDomain: string;\n  defaultCodeSystem = 'BDNUM';\n  defaultCodes: string;\n  clasicBaseHref: string;\n  primaryCode = \"Validated (UNII)\";\n  private overlayContainer: HTMLElement;\n  private subscriptions: Array<Subscription> = [];\n  showlinks = false;\n\n\n  constructor(\n    private sanitizer: DomSanitizer,\n    private utilsService: UtilsService,\n    public gaService: GoogleAnalyticsService,\n    private substanceService: SubstanceService,\n    private router: Router,\n    private authService: AuthService,\n    private cvService: ControlledVocabularyService,\n    private configService: ConfigService,\n    public loadingService: LoadingService,\n    private overlayContainerService: OverlayContainer,\n    private dialog: MatDialog\n  ) {\n    super();\n    this.baseDomain = this.configService.configData.apiUrlDomain;\n    this.clasicBaseHref = this.configService.environment.clasicBaseHref;\n  }\n\n  ngOnInit() {\n\n   const rolesSubscription =  this.authService.hasAnyRolesAsync('updater', 'superUpdater').subscribe(canEdit => {\n      this.canEdit = canEdit;\n      this.isEditable = canEdit\n        && this.substance.substanceClass != null\n        && (formSections[this.substance.substanceClass.toLowerCase()] != null || formSections[this.substance.substanceClass] != null);\n    });\n    const rolesSubscription2 =  this.authService.hasAnyRolesAsync('admin').subscribe(canEdit => {\n      this.isAdmin = canEdit;\n    });\n    this.subscriptions.push(rolesSubscription2);\n    this.getSubtypeRefs(this.substance);\n    const theJSON = JSON.stringify(this.substance);\n    const uri = this.sanitizer.bypassSecurityTrustUrl('data:text/json;charset=UTF-8,' + encodeURIComponent(theJSON));\n    this.downloadJsonHref = uri;\n    this.getVersion();\n    this.getClassFromCv();\n    this.oldUrl = this.substanceService.oldSiteRedirect('details', this.substance.uuid);\n    if (this.configService.configData.defaultCodeSystem != null\n      && this.configService.configData.defaultCodeSystem !== '') {\n        this.defaultCodeSystem = this.configService.configData.defaultCodeSystem;\n      }\n\n      if (this.configService.configData.primaryCode \n        && this.configService.configData.primaryCode !== '') {\n          this.primaryCode = 'Validated (' + this.configService.configData.primaryCode + ')';\n        }\n\n    if (this.configService.configData && this.configService.configData.showOldLinks) {\n      this.showlinks = true;\n    }\n    this.getDefAccess();\n    if (this.substance.codes != null && this.substance.codes.length > 0) {\n      const defaultCodes = [];\n      this.substance.codes.forEach(code => {\n        if (code.codeSystem === this.defaultCodeSystem) {\n          defaultCodes.push(code.code);\n        }\n      });\n\n      this.defaultCodes = defaultCodes.join(', ');\n    }\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(subscription => {\n        subscription.unsubscribe();\n      });\n  }\n\n  ngAfterViewInit() {\n    const subSubscription =  this.substanceUpdated.subscribe(substance => {\n      this.substance = substance;\n      this.getVersion();\n    });\n    this.subscriptions.push(subSubscription);\n\n  }\n\n  getDefAccess() {\n    if (this.substance.structurallyDiverse) {\n     this.defAccess =  this.substance.structurallyDiverse.access;\n    } else if (this.substance.protein) {\n      this.defAccess =  this.substance.protein.access;\n    } else if (this.substance.structure) {\n      this.defAccess =  this.substance.structure.access;\n    } else if (this.substance.mixture) {\n      this.defAccess = this.substance.mixture.access;\n    } else if (this.substance.polymer) {\n      this.defAccess = this.substance.polymer.access;\n    } else if (this.substance.nucleicAcid) {\n      this.defAccess = this.substance.nucleicAcid.access;\n    } else if (this.substance.specifiedSubstance) {\n      this.defAccess = this.substance.specifiedSubstance.access;\n    }\n\n  }\n\n  getSubtypeRefs(substance: SubstanceDetail): void  {\n    if (substance.mixture) {\n      this.references = substance.mixture.references;\n    } else if (substance.protein) {\n      this.references = substance.protein.references;\n    } else if (substance.nucleicAcid) {\n      this.references = substance.nucleicAcid.references;\n    } else if (substance.polymer) {\n      this.references = substance.polymer.references;\n    } else if (substance.structure) {\n      this.references = substance.structure.references;\n    } else if (substance.structurallyDiverse) {\n      this.references = substance.structurallyDiverse.references;\n    } else if (substance.specifiedSubstance) {\n      this.references = substance.specifiedSubstance.references;\n    }\n\n  }\n\n  getVersion() {\n    this.substanceService.checkVersion(this.substance.uuid).subscribe((result: number) => {\n      this.versions = [];\n      this.latestVersion = result;\n      this.setVersionList();\n      this.versionControl.setValue(this.substance.version);\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  changeVersion() {\n    const version = this.versionControl.value.toString();\n    this.router.navigate(['/substances/' + this.substance.uuid + '/v/' + version]);\n  }\n\n  setVersionList() {\n    for (let i = 1; i <= this.latestVersion; i++) {\n      this.versions.push(i.toString());\n    }\n  }\n\n  toggleReferences() {\n\n    const value = this.showDef ? 0 : 1;\n    this.gaService.sendEvent(this.analyticsEventCategory, 'link-toggle', 'references', value);\n    this.showDef = !this.showDef;\n    if (!this.showDef) {\n      this.defIcon = 'drop_down';\n    } else {\n      this.defIcon = 'drop_up';\n    }\n  }\n\n  getClassFromCv(): void {\n    this.cvService.getDomainVocabulary('SUBSTANCE_CLASS').subscribe(response => {\n      const classes = response['SUBSTANCE_CLASS'].list;\n      classes.forEach( c => {\n        if (c.value === this.substance.substanceClass) {\n          this.substance.substanceClass = c.display;\n        }\n      });\n    });\n  }\n\n  restoreVersion() {\n    const dialogRef = this.dialog.open(SubstanceHistoryDialogComponent, {\n      data: {'substance': this.substance, 'version': this.substance.version, 'latest': this.latestVersion.toString()},\n      width: '650px',\n      autoFocus: false,\n      disableClose: true\n    });\n     this.overlayContainer.style.zIndex = '1002';\n    const dialogSubscription = dialogRef.afterClosed().subscribe(response => {\n      this.overlayContainer.style.zIndex = null;\n\n      if (response && response === 'success' ) {\n        this.router.onSameUrlNavigation = 'reload';\n        this.router.navigate(['/substances/' + this.substance.uuid + '/']);\n      }\n    });\n\n}\n\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceOverviewComponent } from './substance-overview.component';\nimport {ReferencesManagerModule} from '../../references-manager/references-manager.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {RouterModule} from '@angular/router';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {SubstanceClassPipe} from '@gsrs-core/utils/substance-class.pipe';\nimport { SubstanceImageModule } from '@gsrs-core/substance/substance-image.module';\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceOverviewComponent),\n    ReferencesManagerModule,\n    MatExpansionModule,\n    MatIconModule,\n    RouterModule,\n    MatFormFieldModule,\n    MatTooltipModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    MatMenuModule,\n    MatButtonModule,\n    SubstanceImageModule,\n    MatChipsModule\n  ],\n  declarations: [SubstanceOverviewComponent, SubstanceClassPipe]\n})\nexport class SubstanceOverviewModule { }\n"],"sourceRoot":"webpack:///","file":"4028.765e9cc66baf04da.js"}