{"version":3,"mappings":"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","names":["i0","ctx_r6","ctx_r8","ctx_r17","ctx_r21","ctx_r22","StructuralModificationFormComponent","cvService","dialog","utilsService","overlayContainerService","substanceFormService","this","EventEmitter","value","display","getVocabularies","overlayContainer","getContainerElement","updateDisplay","getSubstanceType","privateMod","set","mod","relatedSubstanceUuid","molecularFragment","refuuid","event","residueModified","tags","join","definition","subscribe","e","substanceType","substanceClass","unsubscribe","getDomainVocabulary","modTypeList","response","STRUCTURAL_MODIFICATION_TYPE","list","modLocationList","LOCATION_TYPE","modExtentList","EXTENT_TYPE","$$deletedCode","newUUID","deleteTimer","setTimeout","modDeleted","emit","clearTimeout","access","substance","refPname","_name","name","uuid","approvalID","dialogRef","open","SubunitSelectorDialogComponent","data","card","link","sites","width","panelClass","style","zIndex","dialogSubscription","afterClosed","newLinks","emitStructuralModificationsUpdate","subscriptions","push","extentAmount","AmountFormDialogComponent","subsAmount","newAmount","siteDisplay","siteString","amt","displayAmount","v","string","split","vocab","property","some","r","d","selectors","ctx","ctx_r5","SubstanceFormStructuralModificationsCardComponent","substanceFormStructuralModificationsService","scrollToService","gaService","s","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","structuralSubscription","substanceStructuralModifications","i","modifications","componentDestroyed","forEach","subscription","addStructuralModification","addSubstanceStructuralModification","scrollToElement","modification","deleteSubstanceStructuralModification","SubstanceCardBaseFilteredList","SubstanceFormStructuralModificationsModule","m","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatSelectModule","MatInputModule","SubstanceSelectorModule"],"sources":["./src/app/core/substance-form/structural-modifications/structural-modification-form.component.html","./src/app/core/substance-form/structural-modifications/structural-modification-form.component.ts","./src/app/core/substance-form/structural-modifications/substance-form-structural-modifications-card.component.html","./src/app/core/substance-form/structural-modifications/substance-form-structural-modifications-card.component.ts","./src/app/core/substance-form/structural-modifications/substance-form-structural-modifications.module.ts"],"sourcesContent":["<div class=\"code-form-container\">\n  <div *ngIf=\"mod.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete code\" (click)=\"deleteMod()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n      <div class=\"flex-column related-substance\">\n        <div class = \"related-holder\">\n          <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n                                  eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Molecular Fragment\" header=\"Molecular Fragment\"\n                                  [subuuid]=\"relatedSubstanceUuid\">\n          </app-substance-selector>\n        </div>\n      </div>\n      <div class=\"flex-column form-content\">\n\n        <div class=\"form-row\">\n        <app-cv-input key = \"Structural Modification Structural Modification Type\"  title = \"Modification Type\" [model] = \"mod.structuralModificationType\"\n                      (valueChange)= \"mod.structuralModificationType = $event\"></app-cv-input>\n          <div class = 'sites' *ngIf = \"mod.locationType !== 'RESIDUE_SPECIFIC'\">\n            <div class=\"label\">Sites</div>\n            {{siteDisplay}}\n            <button mat-icon-button matTooltip=\"Undo\" (click)=\"(openDialog())\">\n              <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n          </div>\n          <div class = 'residues'>\n            <mat-form-field class=\"group\" *ngIf = \"substanceType !== 'nucleicAcid' && substanceType !== 'protein'\">\n              <input matInput placeholder=\"Residue Modified\" [(ngModel)]=\"mod.residueModified\"  name=\"Residue Modified\" />\n            </mat-form-field>\n            <div class=\"group\" *ngIf = \"substanceType === 'nucleicAcid'\">\n                <div class = \"flex-row\">\n                <mat-form-field [ngClass] = \"privateMod === 'other'?'risen':''\" class = \"cv-field\">\n                    <mat-label>Residue Modified</mat-label>\n                    <mat-select [(ngModel)]=\"mod.residueModified\" name=\"residueModified\" (ngModelChange)=\"updateResidue($event)\" [disabled] = \"disable\">\n                      <mat-option [value] = 'null' *ngIf = \"mod.residueModified\" ><span class = 'deselect' >Clear selection</span></mat-option>\n                    <mat-option *ngFor=\"let term of nucleicAcidOptions\" [value]=\" term.value\">\n                      {{term.display}}\n                    </mat-option>\n                    <mat-option *ngIf = \"mod.residueModified && !inCV(  nucleicAcidOptions, mod.residueModified) && mod.residueModified !== ''\"\n                                value = \"{{mod.residueModified}}\">{{mod.residueModified}} (not in CV)</mat-option>\n                    <mat-option value = 'other' >Other (New Value)</mat-option>\n                  </mat-select>\n                  </mat-form-field>\n                  </div>\n                  <div *ngIf = \"mod.residueModified === 'other'\" class = \"custom\">\n                    <input matInput placeholder=\"Custom value\" (focusout) = \"updateOrigin($event.target)\" name=\"custom\" />\n                  </div>\n            </div>\n              <div class=\"multi\" *ngIf = \"substanceType === 'protein'\">\n                  <app-tag-selector placeholder = \"Residue Modified\" class=\"tags\" (tagsUpdate)=\"update($event)\" disableCV = \"true\"\n                   [tags]=\"pipeToArray(mod.residueModified)\" cvDomain=\"AMINO_ACID_RESIDUE\"></app-tag-selector>\n                </div>\n          </div>\n        </div>\n\n   <div class=\"form-row\">\n  <app-cv-input domain = \"EXTENT_TYPE\" title = \"Extent\" (valueChange)= \"mod.extent = $event\" [model] = \"mod.extent\"></app-cv-input>\n  <app-cv-input domain = \"LOCATION_TYPE\" title = \"Location\" (valueChange)= \"mod.locationType = $event\" [model] = \"mod.locationType\"></app-cv-input>\n     <div class = \"group-access\">\n       <div class = 'form-row'>\n         <mat-form-field class=\"group\">\n           <input matInput placeholder=\"Group\" [(ngModel)]=\"mod.modificationGroup\" required name=\"group\" />\n         </mat-form-field>\n         <div class = \"access\">\n           <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"mod.access\">\n           </app-access-manager>\n         </div>\n       </div>\n     </div>\n\n   </div>\n\n\n   <div class=\"form-row\">\n     <div class = 'amount'>\n       <div class = \"label padded\">\n         Amount\n       </div>\n       <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n          <mat-icon svgIcon=\"edit\"></mat-icon>\n       </button>\n       <div *ngIf = \"mod.extentAmount\" class = \"amount-display\">\n         {{displayAmount(mod.extentAmount)}}\n       </div>\n\n     </div>\n\n   </div>\n   <div class = \"form-row\">\n    <app-audit-info [source] = \"mod\"></app-audit-info>\n  </div>\n   </div>\n\n</div>\n\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {StructuralModification, SubstanceCode, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {SubunitSelectorDialogComponent} from '@gsrs-core/substance-form/subunit-selector-dialog/subunit-selector-dialog.component';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\n\n@Component({\n  selector: 'app-structural-modification-form',\n  templateUrl: './structural-modification-form.component.html',\n  styleUrls: ['./structural-modification-form.component.scss']\n})\nexport class StructuralModificationFormComponent implements OnInit, AfterViewInit {\n  private privateMod: StructuralModification;\n  @Output() modDeleted = new EventEmitter<StructuralModification>();\n  modExtentList: Array<VocabularyTerm> = [];\n  modLocationList: Array<VocabularyTerm> = [];\n  modTypeList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  substanceType: string;\n  nucleicAcidOptions: any = [\n    {value:'U', display:'U'},\n    {value:'T', display:'T'},\n    {value:'C', display:'C'},\n    {value:'G', display:'G'},\n    {value:'A', display:'A'}\n  ];\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.updateDisplay();\n    this.getSubstanceType();\n  }\n\n  ngAfterViewInit(): void {\n\n  }\n\n  @Input()\n  set mod(mod: StructuralModification) {\n    this.privateMod = mod;\n    this.relatedSubstanceUuid = this.privateMod.molecularFragment && this.privateMod.molecularFragment.refuuid || '';\n  }\n\n  get mod(): StructuralModification {\n    return this.privateMod;\n  }\n\n  updateResidue(event) {\n    this.privateMod.residueModified = event;\n  }\n\n  updateOrigin(event): void {\n    if (event && event.value !== '') {\n      this.privateMod.residueModified = event.value;\n    }\n  }\n\n  update(tags: Array<string>): void {\n    this.privateMod.residueModified = tags.join(';');\n  }\n\n  getSubstanceType(): void {\n    const definitionSubscription = this.substanceFormService.definition.subscribe( definition => {\n      this.substanceType = definition.substanceClass;\n    });\n    definitionSubscription.unsubscribe();\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('STRUCTURAL_MODIFICATION_TYPE', 'LOCATION_TYPE', 'EXTENT_TYPE').subscribe(response => {\n      this.modTypeList = response['STRUCTURAL_MODIFICATION_TYPE'].list;\n      this.modLocationList = response['LOCATION_TYPE'].list;\n      this.modExtentList = response['EXTENT_TYPE'].list;\n    });\n  }\n\n  deleteMod(): void {\n    this.privateMod.$$deletedCode = this.utilsService.newUUID();\n      this.deleteTimer = setTimeout(() => {\n        this.modDeleted.emit(this.privateMod);\n      }, 2000);\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMod.$$deletedCode;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.mod.access = access;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    if (substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.mod.molecularFragment = relatedSubstance;\n      this.relatedSubstanceUuid = this.mod.molecularFragment.refuuid;\n    } else {\n      this.mod.molecularFragment = {};\n      this.relatedSubstanceUuid = '';\n    }\n  }\n\n\n\n  openDialog(): void {\n\n    const dialogRef = this.dialog.open(SubunitSelectorDialogComponent, {\n      data: {'card': 'other', 'link': this.mod.sites},\n      width: '1040px',\n      panelClass: 'subunit-dialog'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newLinks => {\n      this.overlayContainer.style.zIndex = null;\n      this.mod.sites = newLinks;\n      this.updateDisplay();\n      this.substanceFormService.emitStructuralModificationsUpdate();\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  openAmountDialog(): void {\n    if (!this.mod.extentAmount) {\n      this.mod.extentAmount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.mod.extentAmount},\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.mod.extentAmount = newAmount;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateDisplay(): void {\n    this.siteDisplay = this.substanceFormService.siteString(this.mod.sites);\n  }\n\n  displayAmount(amt): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n\n  pipeToArray(string: string): Array<string> {\n    if (!string || string === '') {\n      return [];\n    } else {\n      return string.split(';');\n    }\n\n  }\n\n  inCV(vocab: Array<any>, property: string): boolean {\n    if (vocab) {\n      return vocab.some(r => property === r.value);\n    } else {\n      return true;\n    }\n\n  }\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addStructuralModification()\">\n    Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<div class = \"alternate-backgrounds\"  *ngFor=\"let mod of modifications; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-structural-modification-' + index\" >\n  <app-structural-modification-form [mod]=\"mod\" (modDeleted)=\"deleteStructuralModification($event)\"></app-structural-modification-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n\n\n<div class=\"flex-row\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addStructuralModification()\">\n      Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n    </button>\n\n</div>\n\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {PhysicalModification, StructuralModification} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceFormStructuralModificationsService } from './substance-form-structural-modifications.service';\n\n@Component({\n  selector: 'app-substance-form-structural-modifications-card',\n  templateUrl: './substance-form-structural-modifications-card.component.html',\n  styleUrls: ['./substance-form-structural-modifications-card.component.scss']\n})\nexport class SubstanceFormStructuralModificationsCardComponent extends SubstanceCardBaseFilteredList<StructuralModification>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  modifications: Array<StructuralModification>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormStructuralModificationsService: SubstanceFormStructuralModificationsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form structural modifications';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Structural Modifications');\n  }\n\n  ngAfterViewInit() {\n    const structuralSubscription = this.substanceFormStructuralModificationsService\n      .substanceStructuralModifications\n      .subscribe(modifications => {\n\n      this.modifications = modifications;\n    });\n    this.subscriptions.push(structuralSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addStructuralModification();\n  }\n\n  addStructuralModification(): void {\n    this.substanceFormStructuralModificationsService.addSubstanceStructuralModification();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-structural-modification-0`, 'center');\n    });\n  }\n\n  deleteStructuralModification(modification: StructuralModification): void {\n    this.substanceFormStructuralModificationsService.deleteSubstanceStructuralModification(modification);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {SubstanceFormStructuralModificationsCardComponent} from '@gsrs-core/substance-form/structural-modifications/substance-form-structural-modifications-card.component';\nimport { StructuralModificationFormComponent } from './structural-modification-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatSelectModule } from '@angular/material/select';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormStructuralModificationsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatSelectModule,\n    MatInputModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormStructuralModificationsCardComponent,\n    StructuralModificationFormComponent\n  ]\n})\nexport class SubstanceFormStructuralModificationsModule { }\n"],"sourceRoot":"webpack:///","file":"4243.13a624ed9702ee4f.js"}