{"version":3,"mappings":"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","names":["i0","ctx_r6","RelationshipFormComponent","cvService","utilsService","this","EventEmitter","viewFull","set","val","privateRelationship","relationship","amount","relatedSubstanceUuid","relatedSubstance","refuuid","mediatorSubstanceUuid","mediatorSubstance","name","refPname","$$deletedCode","newUUID","type","deleteTimer","setTimeout","t","relationshipDeleted","emit","clearTimeout","access","substance","_name","uuid","substanceClass","approvalID","l","selectors","ctx","ctx_r8","ctx_r14","ctx_r16","ctx_r18","SubstanceFormRelationshipsCardComponent","substanceFormRelationshipsService","scrollToService","gaService","p","canAddItemUpdate","menuLabelUpdate","analyticsEventCategory","relationshipsSubscription","substanceRelationships","subscribe","o","relationships","filtered","searchSubscription","searchControl","valueChanges","filterList","value","subscriptions","push","page","pageChange","componentDestroyed","forEach","subscription","unsubscribe","expanded","addRelationship","addSubstanceRelationship","scrollToElement","deleteSubstanceRelationship","SubstanceCardBaseFilteredList","SubstanceFormRelationshipsModule","m","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","MatTooltipModule"],"sources":["./src/app/core/substance-form/relationships/relationship-form.component.html","./src/app/core/substance-form/relationships/relationship-form.component.ts","./src/app/core/substance-form/relationships/substance-form-relationships-card.component.html","./src/app/core/substance-form/relationships/substance-form-relationships-card.component.ts","./src/app/core/substance-form/relationships/substance-form-relationships.module.ts"],"sourcesContent":["<div class=\"relationship-form-container\">\n  <div *ngIf=\"relationship.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"flex-column delete-column\">\n      <div class=\"delete-container\">\n          <button mat-icon-button matTooltip=\"Delete relationship\" (click)=\"deleteRelationship()\">\n            <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n          </button>\n        </div>\n  </div>\n  <div class=\"flex-column related-substance\">\n    <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n      eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Related Substance\" [hideImage] = \"!viewFull\" header=\"Related Substance\"\n      [subuuid]=\"relatedSubstanceUuid\" [name] = \"name\">\n    </app-substance-selector>\n  </div>\n  <div class=\"flex-column form-content\">\n    <div class=\"form-row\">\n      \n      <app-cv-input class = \"type\" required = 'true' domain = \"RELATIONSHIP_TYPE\"  title = \"Type\" name = \"type\"\n                    [model] = \"relationship.type\" (valueChange)= \"relationship.type = $event\">\n      </app-cv-input>\n\n      <div>\n        <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"relationship.access\">\n        </app-access-manager>\n      </div>\n    </div>\n    <div class=\"form-row \"  *ngIf = \"viewFull\">\n      <app-cv-input class = \"qualification\" key = \"Relationship Qualification\"  title = \"Qualification\" name = \"Qualification\"\n                    [model] = \"relationship.qualification\" (valueChange)= \"relationship.qualification = $event\">\n      </app-cv-input>\n\n      <app-cv-input class = \"interaction-type\" key = \"Relationship Interaction Type\"  title = \"Interaction Type\" name = \"Interaction Type\"\n                    [model] = \"relationship.interactionType\" (valueChange)= \"relationship.interactionType = $event\">\n      </app-cv-input>\n\n    </div>\n    <div class=\"form-row\"  *ngIf = \"viewFull\">\n      <div class=\"comments\">\n        <div class=\"textarea-label\">Comments</div>\n        <textarea placeholder=\"Enter text here\" [(ngModel)]=\"relationship.comments\" name=\"comments\">\n        </textarea>\n      </div>\n    </div>\n  </div>\n  <div class=\"flex-column mediator-substance\" >\n      <app-substance-selector (selectionUpdated)=\"mediatorSubstanceUpdated($event)\"\n      eventCategory=\"substanceFormDefinitionType\" placeholder=\"Mediator Substance\" [hideImage] = \"!viewFull\" header=\"Mediator Substance\"\n      [subuuid]=\"mediatorSubstanceUuid\">\n    </app-substance-selector>\n    </div>\n     \n  <div class = \"chevron\" matTooltip = \"Expand / collapse rows\"><button mat-icon-button (click) = \"viewFull = !viewFull\" class = \"chevron-button\" >\n    <mat-icon *ngIf = \"viewFull\"svgIcon=\"chevron_up\" ></mat-icon>\n    <mat-icon *ngIf = \"!viewFull\"svgIcon=\"chevron_down\"></mat-icon>\n  </button>\n  </div>\n</div>\n<div *ngIf=\"!relationship.$$deletedCode && viewFull\">\n  <div class=\"amount-form-container\">\n    <div class=\"amount-title\">Amount</div>\n    <app-amount-form [substanceAmount]=\"relationship.amount\"></app-amount-form>\n  </div>\n  <div class=\"form-row\"  *ngIf = \"viewFull\">\n    <div class=\"references-container\">\n      <app-domain-references [referencesUuids]=\"relationship.references\" #references></app-domain-references>\n    </div>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"relationship\"></app-audit-info>\n  </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { SubstanceRelationship, SubstanceSummary, SubstanceRelated, MediatorSubstance } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { UtilsService } from '../../utils/utils.service';\n\n@Component({\n  selector: 'app-relationship-form',\n  templateUrl: './relationship-form.component.html',\n  styleUrls: ['./relationship-form.component.scss']\n})\nexport class RelationshipFormComponent implements OnInit {\n  private privateRelationship: SubstanceRelationship;\n  relatedSubstanceUuid: string;\n  mediatorSubstanceUuid: string;\n  @Output() relationshipDeleted = new EventEmitter<SubstanceRelationship>();\n  deleteTimer: any;\n  viewFull = true;\n  name?: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private utilsService: UtilsService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  @Input()\n  set show(val: boolean) {\n    if (val != null) {\n     this.viewFull = val;\n    }\n  }\n\n  get show(): boolean {\n    return this.viewFull || null;\n  }\n  @Input()\n  set relationship(relationship: SubstanceRelationship) {\n    this.privateRelationship = relationship;\n    if (this.privateRelationship.amount == null) {\n      this.privateRelationship.amount = {};\n    }\n    this.relatedSubstanceUuid = this.privateRelationship.relatedSubstance && this.privateRelationship.relatedSubstance.refuuid || '';\n    this.mediatorSubstanceUuid = this.privateRelationship.mediatorSubstance && this.privateRelationship.mediatorSubstance.refuuid || '';\n    this.name = this.privateRelationship.relatedSubstance.refPname? this.privateRelationship.relatedSubstance.refPname : this.privateRelationship.relatedSubstance.name;\n  }\n\n  get relationship(): SubstanceRelationship {\n    return this.privateRelationship;\n  }\n\n\n  deleteRelationship(): void {\n    this.privateRelationship.$$deletedCode = this.utilsService.newUUID();\n    if ((!this.privateRelationship.relatedSubstance || !this.privateRelationship.relatedSubstance.refuuid)\n      && !this.privateRelationship.type\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.relationshipDeleted.emit(this.relationship);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateRelationship.$$deletedCode;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.relationship.access = access;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    if ( substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.relationship.relatedSubstance = relatedSubstance;\n    } else {\n      this.relationship.relatedSubstance = {};\n    }\n  }\n\n  mediatorSubstanceUpdated(substance: SubstanceSummary): void {\n    if ( substance !== null) {\n    const relatedSubstance:  MediatorSubstance = {\n      refPname: substance._name,\n      refuuid: substance.uuid,\n      substanceClass: 'reference',\n      approvalID: substance.approvalID\n    };\n    this.relationship.mediatorSubstance = relatedSubstance;\n  } else {\n    this.relationship.mediatorSubstance = {};\n  }\n}\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"relationships && relationships.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <button *ngIf=\"relationships && relationships.length > 0\" class = 'standardize' mat-button (click)=\"collapse()\">{{expanded? 'Collapse':'Expand'}} All</button>\n\n  <!-- <button mat-button (click)=\"addRelationship()\">\n    Add relationship <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"relationships && relationships.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n    (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"relationship\" *ngFor=\"let relationship of paged; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-relationship-' + index\">\n  <app-relationship-form [relationship]=\"relationship\" (relationshipDeleted)=\"deleteRelationship($event)\"  [show] = \"expanded\">\n  </app-relationship-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"relationships && relationships.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n\n\n<div *ngIf = \"relationships && relationships.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addRelationship()\">\n        Add relationship <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceRelationship } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormRelationshipsService } from './substance-form-relationships.service';\n\n@Component({\n  selector: 'app-substance-form-relationships-card',\n  templateUrl: './substance-form-relationships-card.component.html',\n  styleUrls: ['./substance-form-relationships-card.component.scss']\n})\nexport class SubstanceFormRelationshipsCardComponent extends SubstanceCardBaseFilteredList<SubstanceRelationship>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  relationships: Array<SubstanceRelationship>;\n  private subscriptions: Array<Subscription> = [];\n  expanded = true;\n\n  constructor(\n    private substanceFormRelationshipsService: SubstanceFormRelationshipsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Relationships');\n    this.analyticsEventCategory = 'substance form relationships';\n  }\n\n  ngAfterViewInit() {\n    const relationshipsSubscription = this.substanceFormRelationshipsService.substanceRelationships.subscribe(relationships => {\n      this.relationships = relationships;\n      this.filtered = relationships;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.relationships, this.analyticsEventCategory);\n      }, error => {\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(relationshipsSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  collapse() {\n    this.expanded = !this.expanded;\n  }\n\n  addItem(): void {\n    this.addRelationship();\n  }\n\n  addRelationship(): void {\n    this.substanceFormRelationshipsService.addSubstanceRelationship();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-relationship-0`, 'center');\n    });\n  }\n\n  deleteRelationship(relationship: SubstanceRelationship): void {\n    this.substanceFormRelationshipsService.deleteSubstanceRelationship(relationship);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormRelationshipsCardComponent } from './substance-form-relationships-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { RelationshipFormComponent } from './relationship-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormRelationshipsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    SubstanceFormRelationshipsCardComponent,\n    RelationshipFormComponent\n  ]\n})\nexport class SubstanceFormRelationshipsModule { }\n"],"sourceRoot":"webpack:///","file":"1704.3c88a3cb0f5db0ae.js"}