{"version":3,"mappings":"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","names":["i0","ctx_r3","$event","ctx_r5","ctx_r7","ctx_r9","ctx_r10","SubstanceFormStructurallyDiverseSourceComponent","substanceFormStructurallyDiverseService","gaService","cvService","l","analyticsEventCategory","this","menuLabelUpdate","emit","structurallyDiverseSubscription","substanceStructurallyDiverse","subscribe","t","structurallyDiverse","$$diverseType","part","length","toUpperCase","checkParts","checkWhole","i","subscriptions","push","access","field","event","sourceMaterialType","sourceMaterialClass","emitStructurallyDiverseUpdate","sourceMaterialState","partLocation","fractionName","fractionMaterialType","found","check","forEach","confirm","value","$$storedPart","parentSubstance","subscription","unsubscribe","a","SubstanceFormBase","selectors","SubstanceFormStructurallyDiverseSourceModule","f","CommonModule","DynamicComponentLoaderModule","MatFormFieldModule","MatInputModule","ReactiveFormsModule","FormsModule","MatSelectModule","SubstanceFormModule","NameResolverModule","NgMultiSelectDropDownModule","MatRadioModule"],"sources":["./src/app/core/substance-form/structurally-diverse/substance-form-structurally-diverse-source/substance-form-structurally-diverse-source.component.html","./src/app/core/substance-form/structurally-diverse/substance-form-structurally-diverse-source/substance-form-structurally-diverse-source.component.ts","./src/app/core/substance-form/structurally-diverse/substance-form-structurally-diverse-source/substance-form-structurally-diverse-source.module.ts"],"sourcesContent":["\n\n<div class = 'source-container' *ngIf = \"structurallyDiverse\">\n  <div class = 'form-row'>\n    <app-cv-input class = 'cv-input' domain = \"SOURCE_MATERIAL_CLASS\" title = \"Source Material Class\"\n                  (valueChange) = \"update('class',$event)\" [model] = \"structurallyDiverse.sourceMaterialClass\"></app-cv-input>\n    <app-cv-input class = 'cv-input'  domain = \"SOURCE_MATERIAL_TYPE\" title = \"Source Material Type\"\n                  (valueChange) = \"update('type',$event)\" [model] = \"structurallyDiverse.sourceMaterialType\"></app-cv-input>\n    <app-cv-input class = 'cv-input'  *ngIf = \"structurallyDiverse.sourceMaterialClass === 'ORGANISM'\" domain = \"SOURCE_MATERIAL_STATE\" title = \"Source Material State\"\n                  (valueChange) = \"update('state',$event)\" [model] = \"structurallyDiverse.sourceMaterialState\"></app-cv-input>\n    <div class = 'column-radio'>\n    <mat-radio-group class = 'type'(change) = 'updateType($event)'>\n      <mat-radio-button  value = 'whole' [checked] = '(part && part === \"whole\")'>Whole</mat-radio-button>\n      <mat-radio-button value = 'fraction' [checked] = '(part && part === \"fraction\")'>Part/ Fraction</mat-radio-button>\n      <mat-radio-button value = 'full_fields' [checked] = '(part && part === \"full_fields\")\n      '>Full Fields</mat-radio-button>\n\n    </mat-radio-group>\n    </div>\n    <div>\n     <!-- <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"structurallyDiverse.access\">\n      </app-access-manager>-->\n    </div>\n  </div>\n  <div class = \"form-row-alt\" *ngIf = \"confirm\">\n    <div>Changes made to the now hidden form will still be submitted <button class = \"mat-button mat-primary mat-flat-button\" (click) = \"clean()\" >clean hidden fields</button></div>  \n    </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"structurallyDiverse\"></app-audit-info>\n  </div>\n\n\n</div>\n\n\n\n\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {StructurallyDiverse} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport {ControlledVocabularyService} from '@gsrs-core/controlled-vocabulary';\nimport { SubstanceFormBase } from '../../base-classes/substance-form-base';\nimport { SubstanceFormStructurallyDiverseService } from '../substance-form-structurally-diverse.service';\n\n@Component({\n  selector: 'app-substance-form-structurally-diverse-source',\n  templateUrl: './substance-form-structurally-diverse-source.component.html',\n  styleUrls: ['./substance-form-structurally-diverse-source.component.scss']\n})\nexport class SubstanceFormStructurallyDiverseSourceComponent  extends SubstanceFormBase\n  implements OnInit, AfterViewInit, OnDestroy {\n    confirm = false;\n  structurallyDiverse: StructurallyDiverse;\n  private subscriptions: Array<Subscription> = [];\n  part?: string;\n\n  constructor(\n    private substanceFormStructurallyDiverseService: SubstanceFormStructurallyDiverseService,\n    public gaService: GoogleAnalyticsService,\n    public cvService: ControlledVocabularyService\n  ) {\n    super();\n    this.analyticsEventCategory = 'substance form Source Material';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Source Material');\n    const structurallyDiverseSubscription = this.substanceFormStructurallyDiverseService\n      .substanceStructurallyDiverse.subscribe(structurallyDiverse => {\n      this.structurallyDiverse = structurallyDiverse;\n      if (!this.structurallyDiverse.$$diverseType) {\n        if (this.structurallyDiverse.part.length === 1 && this.structurallyDiverse.part[0].toUpperCase() === ('WHOLE')) {\n          if (this.checkParts() === false) {\n            this.structurallyDiverse.$$diverseType = 'full_fields';\n            this.part = 'full_fields';\n\n          } else {\n            this.structurallyDiverse.$$diverseType = 'whole';\n            this.part = 'whole';\n\n          }\n        } else {\n          if (this.checkWhole() === false) {\n            this.structurallyDiverse.$$diverseType = 'full_fields';\n            this.part = 'full_fields';\n\n          } else {\n            this.structurallyDiverse.$$diverseType = 'fraction';\n            this.part = 'fraction';\n\n\n          }\n\n          for ( let i = 0; i < this.structurallyDiverse.part.length; i++) {\n              if ( this.structurallyDiverse.part[i].toUpperCase() === ('WHOLE')) {\n              }\n          }\n        }\n      }\n    });\n    this.subscriptions.push(structurallyDiverseSubscription);\n  }\n\n  ngAfterViewInit() {\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.structurallyDiverse.access = access;\n  }\n\n  update(field: string, event: any): void {\n    if (field === 'type') {\n\n      this.structurallyDiverse.sourceMaterialType = event;\n    } else if (field === 'class') {\n      this.structurallyDiverse.sourceMaterialClass = event;\n      this.substanceFormStructurallyDiverseService.emitStructurallyDiverseUpdate();\n    } else if (field === 'state') {\n      this.structurallyDiverse.sourceMaterialState = event;\n    }\n  }\n\n  checkParts(): boolean {\n\n    if (this.structurallyDiverse.partLocation && this.structurallyDiverse.partLocation !== null &&\n      this.structurallyDiverse.partLocation !== '' ) {\n        return false;\n      } else if (this.structurallyDiverse.fractionName && this.structurallyDiverse.fractionName !== null &&\n        this.structurallyDiverse.fractionName !== '' ) {\n          return false;\n        }  else if (this.structurallyDiverse.fractionMaterialType && this.structurallyDiverse.fractionMaterialType !== null &&\n          this.structurallyDiverse.fractionMaterialType !== '' ) {\n            return false;\n          } else {\n            return true;\n          }\n  }\n\n  checkWhole(): boolean {\n    const check = ['organismFamily', 'organismGenus', 'organismSpecies', 'organismAuthor', 'infraSpecificType', 'infraSpecificName',\n     'hybridSpeciesMaternalOrganism', 'hybridSpeciesPaternalOrganism'];\n    let found = true;\n    check.forEach( field => {\n      if (this.structurallyDiverse[field] && this.structurallyDiverse[field] !== null &&\n        this.structurallyDiverse[field] !== '' &&\n        this.structurallyDiverse[field] !== {} ) {\n         found = false;\n        }\n    });\n    return found;\n  }\n\n  updateType(event: any): void {\n    this.confirm = false;\n    if (event.value && event.value !== '' && event.value !== null) {\n      this.part = event.value;\n    }\n    if (event.value === 'whole') {\n      if (this.checkParts()) {\n        this.confirm = false;\n      } else {\n        this.confirm = true;\n      }\n      if (this.structurallyDiverse.$$diverseType === 'fraction') {\n        this.structurallyDiverse.$$storedPart = this.structurallyDiverse.part;\n\n      }\n      this.structurallyDiverse.part = ['WHOLE'];\n    } else {\n      if (event.value === 'full_fields') {\n        this.structurallyDiverse.$$diverseType = event.value;\n        } else {\n\n          if (this.checkWhole()) {\n            this.confirm = false;\n          } else {\n            this.confirm = true;\n          }\n          this.structurallyDiverse.$$diverseType = event.value;\n       if (this.structurallyDiverse.$$storedPart) {\n          this.structurallyDiverse.part = this.structurallyDiverse.$$storedPart;\n        } \n      }\n    }\n    this.structurallyDiverse.$$diverseType = event.value;\n  //  this.structurallyDiverse.$$diverseType = event.value;\n    this.substanceFormStructurallyDiverseService.emitStructurallyDiverseUpdate();\n  }\n\n  clean() {\n    if (this.structurallyDiverse.$$diverseType === 'fraction') {\n      const check = ['organismFamily', 'organismGenus', 'organismSpecies', 'organismAuthor', 'infraSpecificType', 'infraSpecificName',\n      'hybridSpeciesMaternalOrganism', 'hybridSpeciesPaternalOrganism'];\n            check.forEach( field => {\n        if (this.structurallyDiverse[field] && this.structurallyDiverse[field] !== null &&\n          this.structurallyDiverse[field] !== '' ) {\n          //  this.structurallyDiverse[field] = null;\n          delete this.structurallyDiverse[field];\n          }\n      });\n    } else {\n      if (this.structurallyDiverse.partLocation && this.structurallyDiverse.partLocation !== null) {\n          delete  this.structurallyDiverse.partLocation;\n        }\n         if (this.structurallyDiverse.fractionName && this.structurallyDiverse.fractionName !== null) {\n            delete this.structurallyDiverse.fractionName;\n          }\n          if (this.structurallyDiverse.fractionMaterialType && this.structurallyDiverse.fractionMaterialType !== null) {\n              delete this.structurallyDiverse.fractionMaterialType;\n            }\n            if (this.structurallyDiverse.parentSubstance && this.structurallyDiverse.parentSubstance !== null ) {\n                delete this.structurallyDiverse.fractionMaterialType;\n              }\n    }\n    this.confirm = false;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DynamicComponentLoaderModule} from '@gsrs-core/dynamic-component-loader';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatSelectModule} from '@angular/material/select';\nimport {SubstanceFormModule} from '@gsrs-core/substance-form/substance-form.module';\nimport {NameResolverModule} from '@gsrs-core/name-resolver/name-resolver.module';\nimport {NgMultiSelectDropDownModule} from 'ng-multiselect-dropdown';\nimport {SubstanceFormStructurallyDiverseSourceComponent} from '@gsrs-core/substance-form/structurally-diverse/substance-form-structurally-diverse-source/substance-form-structurally-diverse-source.component';\nimport {MatRadioModule} from '@angular/material/radio';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormStructurallyDiverseSourceComponent),\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatSelectModule,\n    SubstanceFormModule,\n    NameResolverModule,\n    NgMultiSelectDropDownModule,\n    MatRadioModule,\n    SubstanceFormModule\n  ],\n  declarations: [\n    SubstanceFormStructurallyDiverseSourceComponent\n  ]\n})\nexport class SubstanceFormStructurallyDiverseSourceModule { }\n"],"sourceRoot":"webpack:///","file":"4952.1a61bab0769e4fcf.js"}