{"version":3,"mappings":"+eASIA,8BAAkCA,wDAFpCA,iBACEA,4BAA+DA,yDAAgBC,iBAAqBD,QACpGA,+BACFA,+DAHuHA,kCACrGA,0BAAe,8BACmBA,iEAGtDA,iBACIA,kBACGA,iBACCA,qBAAmBA,iDAASE,kBAC1BF,uBAAUA,uBACZA,QACFA,QACNA,SCNO,IAAMG,EAAb,eAAaA,EAAb,0CAQE,WACUC,EACAC,EACDC,GAAiC,6BAGxCC,cAAMD,IALEF,uBACAG,oBACDA,cANTA,iBAA8B,GAC9BA,eAAe,EACPA,gBAAqC,GAQ3CA,EAAKC,uBAAyB,wBAJUD,EAX5C,uCAkBE,WACEE,KAAKC,iBAAiBC,MAAK,GAC3BF,KAAKG,gBAAgBD,KAAK,YApB9B,6BAuBE,WAAe,WACPE,EAAqBJ,KAAKL,qBAAqBU,gBAAgBC,UAAU,YAC7EC,EAAKC,OAASA,EACdD,EAAKE,sBAEPT,KAAKU,cAAcC,KAAKP,GACxB,IAAMQ,EAAuBZ,KAAKL,qBAAqBkB,kBAAkBP,UAAU,YACjFC,EAAKO,SAAWA,EAChBP,EAAKE,sBAEPT,KAAKU,cAAcC,KAAKC,KAjC5B,yBAqCE,WACEZ,KAAKe,mBAAmBb,OACxBF,KAAKU,cAAcM,QAAQ,YACzBC,EAAaC,kBAxCnB,+BA4CE,WACE,IAAIC,EAAa,GACXC,EAAe,GACjBpB,KAAKc,UAAYd,KAAKQ,SACxBR,KAAKc,SAASE,QAAQ,YACpB,GAAqB,MAAjBK,EAAKC,UAAoBD,EAAKC,SAASC,OAAS,EAClD,QAASC,EAAI,EAAGA,GAAKH,EAAKC,SAASC,OAAQC,IACzCJ,EAAaT,KAAK,CAACc,aAAcJ,EAAKI,aAAcC,aAAcF,MAIxExB,KAAKQ,OAAOQ,QAAQ,YAClBG,EAAaA,EAAWQ,OAAOC,EAAMC,UAGzC7B,KAAK8B,eAAiBV,EAAaW,OAAO,YAAS,OAAQZ,EAAWa,KAAK,SAASC,GAChF,OAAQC,EAAKT,eAAiBQ,EAAKR,cAAgBS,EAAKR,eAAiBO,EAAKP,iBAGlF1B,KAAKmC,aAAef,EAAaG,OAASJ,EAAWI,SA/DzD,qBAkEE,WACEvB,KAAKoC,kBAnET,2BAsEE,WAAa,WACXpC,KAAKL,qBAAqB0C,oBAC1BC,WAAW,WACT/B,EAAKX,gBAAgB2C,gBAArB,qBAA2D,cAzEjE,yBA6EE,SAAYX,GACV5B,KAAKL,qBAAqB6C,qBAAqBZ,KA9EnD,0BAkFU,SAAmBa,EAAYC,EAAkBC,GACvD,IAD+DC,EACzDC,EAAqB,GADoCC,UAEzCL,GAFyC,IAE/D,2BAA6B,KAAlBM,EAAkBH,QACvBG,EAAQL,KAAcC,GACxBE,EAAclC,KAAKoC,UAJwCC,wBAO/D,OAAOH,MAzFXI,GAAkDC,kDAArCxD,GAA4BH,2DAA5BG,EAA4ByD,shBDbzC5D,iBAMEA,iBAAuEA,SAA6EA,QACpJA,uBAIFA,QACAA,8BAN0BA,2DAA+CA,kGACdA,mCAKlCA,qXCCZG,EAAb,GC4Ba0D,YAAb,eAAaA,KAAbC,iFAAaD,4DAvBF,CACPE,KACAC,cAAsC7D,GACtC8D,IACAC,IACAC,KACAC,KACAC,IACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,IACAC,SAQShB,EAAb","names":["i0","ctx_r6","ctx_r8","SubstanceFormSugarsComponent","substanceFormService","scrollToService","gaService","s","analyticsEventCategory","this","canAddItemUpdate","emit","menuLabelUpdate","sugarsSubscription","substanceSugars","subscribe","e","sugars","getRemainingSites","subscriptions","push","subunitsSubscription","substanceSubunits","subunits","componentDestroyed","forEach","subscription","unsubscribe","sugarArray","subunitArray","unit","sequence","length","i","subunitIndex","residueIndex","concat","sugar","sites","remainingSites","filter","some","obj2","item","invalidSites","addOtherSugar","addSubstanceSugar","setTimeout","scrollToElement","deleteSubstanceSugar","array","property","value","y","foundElements","d","element","X","a","SubstanceCardBaseFilteredList","selectors","SubstanceFormSugarsModule","v","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatTooltipModule","MatButtonToggleModule","MatInputModule","MatSelectModule"],"sources":["./src/app/core/substance-form/substance-form-sugars/substance-form-sugars.component.html","./src/app/core/substance-form/substance-form-sugars/substance-form-sugars.component.ts","./src/app/core/substance-form/substance-form-sugars/substance-form-sugars.module.ts"],"sourcesContent":["<div class=\"responsive\">\n  <!-- <div class = \"form-row\">\n    <button mat-button (click)=\"addOtherSugar()\">\n      Add sugar <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n    </button>\n  </div> -->\n  <div class = 'form-row' [ngClass] = \"invalidSites === 0?'':'too-many'\">Remaining Sugars: {{invalidSites === 0?remainingSites.length : invalidSites}}</div>\n  <div class = \"alternate-backgrounds\" *ngFor = \"let links of sugars; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-sugars-' + index\" >\n    <app-sugar-form [sugar]=\"links\" [remaining] = 'remainingSites' (sugarDeleted)=\"deleteSugar($event)\"></app-sugar-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n</div>\n<div class = 'form-row' *ngIf = \"sugars && sugars.length > 0\">\n    <span class = \"middle-fill\"></span>\n       <div class = \"form-row\">\n        <button mat-button (click)=\"addOtherSugar()\">\n          Add sugar <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n      </div>\n</div>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {Link, Linkage, Site, Subunit, Sugar} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\n\n@Component({\n  selector: 'app-substance-form-sugars',\n  templateUrl: './substance-form-sugars.component.html',\n  styleUrls: ['./substance-form-sugars.component.scss']\n})\nexport class SubstanceFormSugarsComponent extends SubstanceCardBaseFilteredList<Sugar>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList  {\n\n  sugars: Array<Sugar>;\n  subunits: Array<Subunit>;\n  remainingSites: Array<Site> = [];\n  invalidSites = 0 ;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private substanceFormService: SubstanceFormService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form sugars';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Sugars');\n  }\n\n  ngAfterViewInit() {\n    const sugarsSubscription = this.substanceFormService.substanceSugars.subscribe(sugars => {\n      this.sugars = sugars;\n      this.getRemainingSites();\n    });\n    this.subscriptions.push(sugarsSubscription);\n    const subunitsSubscription = this.substanceFormService.substanceSubunits.subscribe(subunits => {\n      this.subunits = subunits;\n      this.getRemainingSites();\n    });\n    this.subscriptions.push(subunitsSubscription);\n\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getRemainingSites(): void {\n    let sugarArray = [];\n    const subunitArray = [];\n    if (this.subunits && this.sugars) {\n      this.subunits.forEach(unit => {\n        if (unit.sequence != null && unit.sequence.length > 0) {\n          for (let i = 1; i <= unit.sequence.length; i++) {\n            subunitArray.push({subunitIndex: unit.subunitIndex, residueIndex: i});\n          }\n        }\n      });\n      this.sugars.forEach(sugar => {\n        sugarArray = sugarArray.concat(sugar.sites);\n      });\n    }\n    this.remainingSites = subunitArray.filter(item => {return !sugarArray.some(function(obj2) {\n        return (item.subunitIndex === obj2.subunitIndex && item.residueIndex === obj2.residueIndex);\n      });\n    });\n    this.invalidSites = subunitArray.length - sugarArray.length;\n  }\n\n  addItem(): void {\n    this.addOtherSugar();\n  }\n\n  addOtherSugar(): void {\n    this.substanceFormService.addSubstanceSugar();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-sugars-0`, 'center');\n    });\n  }\n\n  deleteSugar(sugar: Sugar): void {\n    this.substanceFormService.deleteSubstanceSugar(sugar);\n  }\n\n\n  private findElements<T, V>(array: T[], property: string, value: V): T[] {\n    const foundElements: T[] = [];\n    for (const element of array) {\n      if (element[property] === value) {\n        foundElements.push(element);\n      }\n    }\n    return foundElements;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DynamicComponentLoaderModule} from '@gsrs-core/dynamic-component-loader';\nimport {SubstanceFormModule} from '@gsrs-core/substance-form/substance-form.module';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ScrollToModule} from '@gsrs-core/scroll-to';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatSelectModule} from '@angular/material/select';\nimport {SubstanceFormSugarsComponent} from '@gsrs-core/substance-form/substance-form-sugars/substance-form-sugars.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormSugarsComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatTooltipModule,\n    MatButtonToggleModule,\n    MatInputModule,\n    MatSelectModule\n  ],\n  exports: [\n  ],\n  declarations: [\n    SubstanceFormSugarsComponent\n  ]\n})\nexport class SubstanceFormSugarsModule { }\n"],"sourceRoot":"webpack:///","file":"7441.ebe724642a3823f7.js"}