{"version":3,"mappings":"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","names":["i0","ctx_r46","SubstanceReferencesComponent","gaService","utilsService","o","Subject","FormControl","this","substanceUpdated","subscribe","i","substance","references","filtered","pageChange","searchControl","valueChanges","filterList","value","analyticsEventCategory","console","log","error","getFilterOptions","countUpdate","emit","length","citationFilter","citationFilterValue","filterTable","typeFilter","typeFilterValue","tagsFilter","tagsFilterValue","type","cFilter","tgFilter","tFilter","n","g","citation","toLowerCase","includes","docType","isIncluded","push","h","name","tags","string","m","oneTag","J","val","display","tagsFilterOptions","filter","e","v","oneType","typeFilterOptions","hideFilters","showHideFilterText","setValue","sort","data","slice","active","direction","a","b","isAsc","compare","toString","toUpperCase","s","SubstanceCardBaseFilteredList","selectors","ctx","SubstanceReferencesModule","y","CommonModule","DynamicComponentLoaderModule","MatTableModule","CdkTableModule","MatPaginatorModule","MatInputModule","MatFormFieldModule","MatSelectModule","ReactiveFormsModule","FormsModule","MatSortModule","MatIconModule","MatTooltipModule"],"sources":["./src/app/core/substance-details/substance-references/substance-references.component.html","./src/app/core/substance-details/substance-references/substance-references.component.ts","./src/app/core/substance-details/substance-references/substance-references.module.ts"],"sourcesContent":["<div class=\"flex-row\">\r\n    <span class=\"middle-fill\"></span>\r\n    <mat-form-field [floatLabel]=\"'never'\" class=\"search\">\r\n      <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\r\n    </mat-form-field>\r\n  </div>\r\n  <div class=\"responsive\">\r\n    <span class=\"show-filter-span\">\r\n      <mat-label class = \"mat-button mat-button-primary\" mat-flat-button color=\"warn\" (click)=\"toggleFilter()\">{{showHideFilterText}}</mat-label>\r\n    </span>\r\n    <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\">\r\n\r\n      <ng-container matColumnDef=\"citation\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Citation </th>\r\n        <td mat-cell *matCellDef=\"let reference\">\r\n          <a *ngIf = \"reference.url\" [href]=\"reference.url\" target = \"_blank\" >{{reference.citation}} </a>\r\n          <span *ngIf = \"!reference.url\"> {{reference.citation}} </span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"docType\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Type </th>\r\n        <td mat-cell *matCellDef=\"let reference\"> {{reference.docType}} </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"tags\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Tags </th>\r\n        <td mat-cell *matCellDef=\"let reference\">\r\n          <span *ngFor=\"let tag of reference.tags; last as isLast\">{{tag}}<span *ngIf=\"!isLast\">,&nbsp;</span></span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"citationFilter\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          <div class=\"tableFilter\">\r\n            <mat-form-field>\r\n              <input matInput class=\"form-field\" [formControl]=\"citationFilter\" placeholder=\"Citation Filter\">\r\n            </mat-form-field>\r\n          </div>\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let reference\">\r\n          <a *ngIf = \"reference.url\" [href]=\"reference.url\" target = \"_blank\" >{{reference.citation}} </a>\r\n          <span *ngIf = \"!reference.url\"> {{reference.citation}} </span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"typeFilter\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          <div class=\"tableFilter\">\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-select [formControl]=\"typeFilter\">\r\n                <mat-select-trigger>\r\n                  {{typeFilter.value ? typeFilter.value : ''}}\r\n                </mat-select-trigger>\r\n                <mat-option [value]=\"null\" selected>Select Type Filter</mat-option>\r\n                <mat-option *ngFor=\"let type of typeFilterOptions\" [value]=\"type.display\">{{type.display}}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let reference\"> {{reference.docType}} </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"tagsFilter\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          <div class=\"tableFilter\">\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-select [formControl]=\"tagsFilter\">\r\n                <mat-select-trigger>\r\n                  {{tagsFilter.value ? tagsFilter.value : ''}}\r\n                </mat-select-trigger>\r\n                <mat-option [value]=\"null\" selected>Select Tags Filter</mat-option>\r\n                <mat-option *ngFor=\"let tags of tagsFilterOptions\" [value]=\"tags.display\">{{tags.display}}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let reference\">\r\n          <span *ngFor=\"let tag of reference.tags; last as isLast\">{{tag}}<span *ngIf=\"!isLast\">,&nbsp;</span></span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"resetFilter\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          <div class=\"tableFilter\">\r\n            <button class = \"mat-button mat-button-primary\" mat-flat-button color=\"warn\" (click)=\"resetFilters()\">Reset</button>\r\n          </div>\r\n        </th>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"files\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> File </th>\r\n          <td mat-cell *matCellDef=\"let reference\">\r\n          <a *ngIf =\"reference.uploadedFile\" [href] = \"reference.uploadedFile\"><mat-icon color = \"primary\" class = \"blue\"  svgIcon=\"cloud_download\"></mat-icon></a>\r\n          </td>\r\n        </ng-container>\r\n\r\n      <ng-container matColumnDef=\"access\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Access </th>\r\n          <td mat-cell *matCellDef=\"let reference\"> \r\n            <span *ngIf=\"reference.access.length\" matTooltip=\"Not Public\">\r\n              <mat-icon svgIcon=\"lock\" class=\"icon-align blue-font\" *ngIf=\"reference.access.length\"></mat-icon></span>\r\n              <span *ngIf=\"!reference.access.length\" matTooltip=\"Public\">\r\n                  <mat-icon svgIcon=\"lock_open\" class=\"icon-align blue-font\" *ngIf=\"reference.access.length === 0\"></mat-icon></span>\r\n            </td>\r\n        </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr [hidden]=\"hideFilters\" mat-header-row *matHeaderRowDef=\"displayedFilterColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n  </div>\r\n  <mat-paginator [length]=\"filtered && filtered.length || 0\" [pageSize]=\"10\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\r\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\r\n  </mat-paginator>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {SubstanceDetail, SubstanceReference, TableFilterDDModel} from '../../substance/substance.model';\r\nimport { SubstanceCardBaseFilteredList } from '../substance-card-base-filtered-list';\r\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\r\nimport {Subject} from 'rxjs';\r\nimport {Sort} from '@angular/material/sort';\r\nimport {UtilsService} from '@gsrs-core/utils';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-substance-references',\r\n  templateUrl: './substance-references.component.html',\r\n  styleUrls: ['./substance-references.component.scss']\r\n})\r\nexport class SubstanceReferencesComponent extends SubstanceCardBaseFilteredList<SubstanceReference> implements OnInit {\r\n  references: Array<SubstanceReference> = [];\r\n  displayedColumns: string[] = ['citation', 'docType', 'tags', 'files', 'access'];\r\n  substanceUpdated = new Subject<SubstanceDetail>();\r\n  pageSize = 10;\r\n  hideFilters = true;\r\n  showHideFilterText = 'Show Filter';\r\n  displayedFilterColumns: string[] = ['citationFilter', 'typeFilter', 'tagsFilter', 'resetFilter'];\r\n  citationFilter = new FormControl();\r\n  typeFilter = new FormControl();\r\n  tagsFilter = new FormControl();\r\n  typeFilterOptions: Array<TableFilterDDModel> = [];\r\n  tagsFilterOptions: Array<TableFilterDDModel> = [];\r\n\r\n  constructor(\r\n    public gaService: GoogleAnalyticsService,\r\n    private utilsService: UtilsService\r\n  ) {\r\n    super(\r\n      gaService\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.substanceUpdated.subscribe(substance => {\r\n      this.substance = substance;\r\n      if (this.substance != null && this.substance.references != null) {\r\n        this.references = this.substance.references;\r\n        this.filtered = this.substance.references;\r\n        this.pageChange();\r\n\r\n        this.searchControl.valueChanges.subscribe(value => {\r\n          this.filterList(value, this.references, this.analyticsEventCategory);\r\n        }, error => {\r\n          console.log(error);\r\n        });\r\n        this.getFilterOptions('tags');\r\n        this.getFilterOptions('type');\r\n      }\r\n      this.countUpdate.emit(this.references.length);\r\n    });\r\n    this.citationFilter.valueChanges.subscribe((citationFilterValue) => {\r\n      this.filterTable();\r\n    });\r\n    this.typeFilter.valueChanges.subscribe((typeFilterValue) => {\r\n      this.filterTable();\r\n    });\r\n    this.tagsFilter.valueChanges.subscribe((tagsFilterValue) => {\r\n      this.filterTable();\r\n    });\r\n  }\r\n\r\n  filterTable(type?:string) {\r\n    const cFilter = this.citationFilter.value === null ? '' : this.citationFilter.value;\r\n    const tgFilter = this.tagsFilter.value === null ? '' : this.tagsFilter.value;\r\n    const tFilter = this.typeFilter.value === null ? '' : this.typeFilter.value;\r\n    this.filtered = [];\r\n    for(let n of this.references) {\r\n      if((n.citation.toLowerCase().includes(cFilter.toLowerCase())) &&\r\n      (n.docType.toLowerCase().includes(tFilter.toLowerCase())) && \r\n      (this.isIncluded(n, tgFilter))) {\r\n        this.filtered.push(n);\r\n      }\r\n    }\r\n    \r\n    this.pageChange();\r\n  }\r\n\r\n  isIncluded(name, value) {\r\n    if(value.length > 0) {\r\n      if(name.tags.includes(value)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  getFilterOptions(string) {\r\n    for(let n of this.references) {\r\n        if(string === 'tags') {\r\n          for(let t of n.tags) {\r\n            let oneTag = t;\r\n            let val: TableFilterDDModel = {\r\n              value: oneTag,\r\n              display: oneTag\r\n            }\r\n            if (this.tagsFilterOptions.filter(e => e.value === oneTag).length > 0) {\r\n            } else {\r\n              this.tagsFilterOptions.push(val);\r\n            }\r\n          }\r\n        } else if(string === 'type') {\r\n          let oneType = n.docType;\r\n          let value: TableFilterDDModel = {\r\n            value: oneType,\r\n            display: oneType\r\n          }\r\n          if (this.typeFilterOptions.filter(e => e.value === oneType).length > 0) {\r\n          } else {\r\n            this.typeFilterOptions.push(value);\r\n          }\r\n        }\r\n    }\r\n  }\r\n\r\n  toggleFilter() {\r\n    this.hideFilters = !this.hideFilters;\r\n    if(this.hideFilters) {\r\n      this.showHideFilterText = 'Show Filter';\r\n    } else {\r\n      this.showHideFilterText = 'Hide Filter';\r\n    }\r\n  }\r\n\r\n  resetFilters() {\r\n    this.pageChange();\r\n    this.searchControl.setValue('');\r\n    this.citationFilter.setValue('');\r\n    this.tagsFilter.setValue('');\r\n    this.typeFilter.setValue('');\r\n  }\r\n\r\n  sortData(sort: Sort) {\r\n    const data = this.references.slice();\r\n    if (!sort.active || sort.direction === '') {\r\n      this.filtered = data;\r\n      this.pageChange();\r\n      return;\r\n    }\r\n    this.filtered = data.sort((a, b) => {\r\n      const isAsc = sort.direction === 'asc';\r\n      return this.utilsService.compare(a[sort.active] ? a[sort.active].toString().toUpperCase() : null, b[sort.active] ? b[sort.active].toString().toUpperCase() : null, isAsc);\r\n    });\r\n    this.pageChange();\r\n  }\r\n\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubstanceReferencesComponent } from './substance-references.component';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DynamicComponentLoaderModule.forChild(SubstanceReferencesComponent),\r\n    MatTableModule,\r\n    CdkTableModule,\r\n    MatPaginatorModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatSortModule,\r\n    MatIconModule,\r\n    MatTooltipModule\r\n  ],\r\n  declarations: [SubstanceReferencesComponent]\r\n})\r\nexport class SubstanceReferencesModule { }\r\n"],"sourceRoot":"webpack:///","file":"1899.8922ab66454f116c.js"}