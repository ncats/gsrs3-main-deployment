{"version":3,"mappings":"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","names":["i0","ctx_r5","ctx_r9","ctx_r10","ctx_r11","ctx_r45","ctx_r47","ctx_r48","PropertyFormComponent","cvService","dialog","utilsService","overlayContainerService","substanceFormService","this","EventEmitter","overlayContainer","getContainerElement","privateProperty","set","property","referencedSubstanceUuid","referencedSubstance","refuuid","value","nonNumericValue","_nonNumeric","$$deletedCode","newUUID","name","type","deleteTimer","setTimeout","o","propertyDeleted","emit","id","parameters","splice","clearTimeout","access","substance","refPname","_name","uuid","substanceClass","approvalID","parameter","isNew","a","parameterCopyString","JSON","stringify","dialogRef","open","PropertyParameterDialogComponent","data","parse","width","style","zIndex","afterClosed","subscribe","newParameter","i","unshift","Object","keys","forEach","key","SubunitSelectorDialogComponent","card","link","feature","siteRange","panelClass","features","stringToSites","error","alert","vocab","some","r","selectors","ctx","ctx_r13","ctx_r15","SubstanceFormPropertiesCardComponent","substanceFormPropertiesService","scrollToService","gaService","s","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","propertiesSubscription","substanceProperties","properties","filtered","searchSubscription","searchControl","valueChanges","filterList","console","log","subscriptions","push","page","pageChange","componentDestroyed","subscription","unsubscribe","addProperty","addSubstanceProperty","scrollToElement","deleteSubstanceProperty","SubstanceCardBaseFilteredList","SubstanceFormPropertiesModule","v","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","MatCheckboxModule","MatListModule"],"sources":["./src/app/core/substance-form/properties/property-form.component.html","./src/app/core/substance-form/properties/property-form.component.ts","./src/app/core/substance-form/properties/substance-form-properties-card.component.html","./src/app/core/substance-form/properties/substance-form-properties-card.component.ts","./src/app/core/substance-form/properties/substance-form-properties.module.ts"],"sourcesContent":["<div class=\"property-form-container\">\n    <div *ngIf=\"property.$$deletedCode\" class=\"notification-backdrop\">\n      Deleted&nbsp;\n      <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n        <mat-icon svgIcon=\"undo\"></mat-icon>\n      </button>\n    </div>\n    <div class = \"flex-column\">\n        <div class=\"delete-container\">\n            <button mat-icon-button matTooltip=\"Delete property\" (click)=\"deleteProperty()\">\n              <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n            </button>\n          </div>\n    </div>\n    \n    <div class=\"flex-column form-content\">\n      <div class=\"form-row\">\n        <app-cv-input required = 'true' class=\"name property-name\" key = \"Property Name\"  title = \"Name\" [model] = \"property.name\"\n                      (valueChange)= \"property.name = $event\">\n        </app-cv-input>\n  \n        <app-cv-input required = 'true' class=\"type\" key = \"Property Property Type\"  title = \"Property Type\" [model] = \"property.propertyType\"\n                      (valueChange)= \"property.propertyType = $event\" name = \"type\">\n        </app-cv-input>\n  \n        <div class=\"checkbox-container column-checkbox\">\n          <mat-checkbox [(ngModel)]=\"property.defining\" name=\"defining\">\n            Defining\n          </mat-checkbox>\n        </div>\n        <div  *ngIf = \"property.propertyType === 'PROTEIN FEATURE' || property.propertyType === 'NUCLEIC ACID FEATURE'\">\n          <div class=\"amount-title\">Site Range</div>\n          <input [(ngModel)] = \"_nonNumeric\" (focusout)= \"validateRange()\">\n          <button mat-icon-button (click) = \"openFeatureDialog()\" matTooltip=\"Edit Feature Sites\">\n            <mat-icon svgIcon=\"edit\"></mat-icon>\n          </button>\n        </div>\n        <div class=\"flex-column referenced-substance\"  *ngIf = \"property.propertyType !== 'PROTEIN FEATURE' && property.propertyType !== 'NUCLEIC ACID FEATURE'\">\n            <app-substance-selector (selectionUpdated)=\"referencedSubstanceUpdated($event)\"\n              eventCategory=\"substancePropertyReferencedSub\" placeholder=\"Referenced Substance\" header=\"Referenced Substance\"\n              [subuuid]=\"referencedSubstanceUuid\">\n            </app-substance-selector>\n          </div>\n        <div>\n          <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"property.access\">\n          </app-access-manager>\n        </div>\n      </div>\n      <div class=\"form-row\" *ngIf=\"!property.$$deletedCode\">\n        <div>\n          <h4 class=\"parameters-title\">\n            Parameters\n            <button mat-icon-button (click)=\"openPropertyParameter()\" matTooltip=\"Add parameter\">\n              <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n            </button>\n          </h4>\n          <mat-list *ngIf=\"property.parameters\">\n              <div  mat-list-item *ngFor=\"let parameter of property.parameters; index as index\" >\n                 <button mat-icon-button (click) = \"deleteParameter(index)\"  class = \"parameter-delete-icon\">\n                   <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n                  </button>\n  \n              <span>{{parameter.name}}</span>\n              <span *ngIf=\"parameter.value != null\">\n                <span>\n                  &nbsp;\n                  {{parameter.value.type}}\n                </span>\n                <span *ngIf=\"parameter.value.average != null && parameter.value.average != ''\">\n                  &nbsp;-\n                  &nbsp;\n                  {{parameter.value.average}}\n                  &nbsp;\n                  {{parameter.value.units}}\n                </span>\n                <span *ngIf=\"(parameter.value.low != null && parameter.value.low != '')\n                    || (parameter.value.high != null && parameter.value.high != '')\">\n                  <span *ngIf=\"parameter.value.average == null || parameter.value.average == ''\">\n                    &nbsp;\n                    -\n                  </span>\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.value.high == null || parameter.value.high == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.value.low == null || parameter.value.low == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.value.low != null && parameter.value.low != ''\">\n                    {{parameter.value.low}}\n                  </span>\n                  <span *ngIf=\"parameter.value.low != null && parameter.value.low != ''\n                      && parameter.value.high != null && parameter.value.high != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.value.high != null && parameter.value.high != ''\">\n                    {{parameter.value.high}}\n                  </span>\n                  ]\n                  <span *ngIf=\"parameter.value.average == null || parameter.value.average == ''\">\n                    &nbsp;\n                    {{parameter.value.units}}\n                    &nbsp;\n                    (average)\n                  </span>\n                </span>\n                <span *ngIf=\"parameter.value.average != null && parameter.value.average != ''\">\n                  &nbsp;\n                  (average)\n                </span>\n                <span *ngIf=\"(parameter.value.lowLimit != null && parameter.value.lowLimit != '')\n                        || (parameter.value.highLimit != null && parameter.value.highLimit != '')\">\n                  &nbsp;-\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.value.highLimit == null || parameter.value.highLimit == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.value.lowLimit == null || parameter.value.lowLimit == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.value.lowLimit != null && parameter.value.lowLimit != ''\">\n                    {{parameter.value.lowLimit}}\n                  </span>\n                  <span *ngIf=\"parameter.value.lowLimit != null && parameter.value.lowLimit != ''\n                          && parameter.value.highLimit != null && parameter.value.highLimit != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.value.highLimit != null && parameter.value.highLimit != ''\">\n                    {{parameter.value.highLimit}}\n                  </span>\n                  ]\n                  &nbsp;(limits)\n                </span>\n                <span *ngIf=\"parameter.value.nonNumericValue\">\n                  &nbsp;-&nbsp;\n                  {{parameter.value.nonNumericValue}}\n                </span>\n              </span>\n              <button mat-icon-button (click)=\"openPropertyParameter(parameter)\"   class = \"parameter-icon\">\n                  <mat-icon svgIcon=\"edit\"></mat-icon>\n              </button>\n          </div>\n          </mat-list>\n        </div>\n      </div>\n    </div>\n    \n  </div>\n  <div *ngIf=\"!property.$$deletedCode\">\n    <div class=\"amount-form-container\"  *ngIf = \"property.propertyType !== 'PROTEIN FEATURE' && property.propertyType !== 'NUCLEIC ACID FEATURE'\">\n      <div class=\"amount-title\">Amount</div>\n      <app-amount-form [substanceAmount]=\"property.value\"></app-amount-form>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"references-container\">\n        <app-domain-references [referencesUuids]=\"property.references\" #references></app-domain-references>\n      </div>\n    </div>\n    <app-audit-info [source] = \"property\"></app-audit-info>\n  \n  </div>\n  ","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { SubstanceProperty, SubstanceSummary, SubstanceRelated, SubstanceParameter } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PropertyParameterDialogComponent } from '../property-parameter-dialog/property-parameter-dialog.component';\nimport { UtilsService } from '../../utils/utils.service';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport {SubunitSelectorDialogComponent} from '@gsrs-core/substance-form/subunit-selector-dialog/subunit-selector-dialog.component';\nimport { SubstanceFormService } from '@gsrs-core/substance-form/substance-form.service';\n\n@Component({\n  selector: 'app-property-form',\n  templateUrl: './property-form.component.html',\n  styleUrls: ['./property-form.component.scss']\n})\nexport class PropertyFormComponent implements OnInit {\n  deleteTimer: any;\n  private privateProperty: SubstanceProperty;\n  referencedSubstanceUuid: string;\n  @Output() propertyDeleted = new EventEmitter<SubstanceProperty>();\n  propertyNameList: Array<VocabularyTerm> = [];\n  propertyTypeList: Array<VocabularyTerm> = [];\n  private overlayContainer: HTMLElement;\n  _nonNumeric: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set property(property: SubstanceProperty) {\n    this.privateProperty = property;\n    this.referencedSubstanceUuid = this.privateProperty.referencedSubstance && this.privateProperty.referencedSubstance.refuuid || '';\n    if ( !this.privateProperty.value) {\n      this.privateProperty.value = {};\n    }\n    if (this.property.value && this.property.value.nonNumericValue) {\n      this._nonNumeric = this.property.value.nonNumericValue;\n    }\n  }\n\n  get property(): SubstanceProperty {\n    return this.privateProperty;\n  }\n\n  deleteProperty(): void {\n    this.privateProperty.$$deletedCode = this.utilsService.newUUID();\n    if ((!this.privateProperty.referencedSubstance || !this.privateProperty.referencedSubstance.refuuid)\n      && !this.privateProperty.name\n      && !this.privateProperty.type\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.propertyDeleted.emit(this.property);\n      }, 2000);\n    }\n  }\n\n  deleteParameter(id: number): void {\n    this.property.parameters.splice(id, 1);\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateProperty.$$deletedCode;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.property.access = access;\n  }\n\n  referencedSubstanceUpdated(substance: SubstanceSummary): void {\n    if (substance !== null){\n      const referencedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.property.referencedSubstance = referencedSubstance;\n    } else {\n      this.property.referencedSubstance = null;\n    }\n\n  }\n\n  openPropertyParameter(parameter?: SubstanceParameter): void {\n\n    let isNew: boolean;\n    if (parameter == null) {\n      isNew = true;\n      parameter = { value: {} };\n    }\n    const parameterCopyString = JSON.stringify(parameter);\n\n    const dialogRef = this.dialog.open(PropertyParameterDialogComponent, {\n      data: JSON.parse(parameterCopyString),\n      width: '1200px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe(newParameter => {\n      this.overlayContainer.style.zIndex = null;\n      if (newParameter != null) {\n        if (this.property.parameters == null) {\n          this.property.parameters = [];\n        }\n        if (isNew) {\n          this.property.parameters.unshift(newParameter);\n        } else {\n          Object.keys(newParameter).forEach(key => {\n            parameter[key] = newParameter[key];\n          });\n        }\n      }\n    });\n  }\n\n  openFeatureDialog() {\n    const feature = {'name': this.property.name, 'siteRange': this.property.value.nonNumericValue};\n    const dialogRef = this.dialog.open(SubunitSelectorDialogComponent, {\n      data: {'card': 'feature', 'link': [], 'feature': feature},\n      width: '1048px',\n      panelClass: 'subunit-dialog'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(features => {\n      this.overlayContainer.style.zIndex = null;\n      this.property.name = features.name || '';\n      this.property.value.nonNumericValue = features.siteRange;\n      this._nonNumeric = features.siteRange;\n    });\n  }\n\n  validateRange() {\n    try {\n      this.substanceFormService.stringToSites(this._nonNumeric);\n      this.property.value.nonNumericValue = this._nonNumeric;\n    } catch (error) {\n      alert('invalid shorthand for a site. Must be of form \"{subunit}_{residue}\" with multiple ranges seperated by a comma. Changes will be reverted');\n      this._nonNumeric = this.property.value.nonNumericValue;\n    }\n  }\n\n  addOtherOption(vocab: Array<VocabularyTerm>, property: string) {\n    if (vocab.some(r => property === r.value)) {\n    } else {\n    }\n    return vocab;\n  }\n\n\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"properties && properties.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addProperty()\">\n    Add property <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"properties && properties.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n    (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"property\" *ngFor=\"let property of paged; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-property-' + index\">\n  <app-property-form [property]=\"property\" (propertyDeleted)=\"deleteProperty($event)\"></app-property-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"properties && properties.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator> \n\n\n<div *ngIf = \"properties && properties.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addProperty()\">\n        Add property <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceProperty } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormPropertiesService } from './substance-form-properties.service';\n\n@Component({\n  selector: 'app-substance-form-properties-card',\n  templateUrl: './substance-form-properties-card.component.html',\n  styleUrls: ['./substance-form-properties-card.component.scss']\n})\nexport class SubstanceFormPropertiesCardComponent extends SubstanceCardBaseFilteredList<SubstanceProperty>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  properties: Array<SubstanceProperty>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormPropertiesService: SubstanceFormPropertiesService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form properties';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Properties');\n  }\n\n  ngAfterViewInit() {\n    const propertiesSubscription = this.substanceFormPropertiesService.substanceProperties.subscribe(properties => {\n      this.properties = properties;\n      this.filtered = properties;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.properties, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(propertiesSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addProperty();\n  }\n\n  addProperty(): void {\n    this.substanceFormPropertiesService.addSubstanceProperty();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-property-0`, 'center');\n    });\n  }\n\n  deleteProperty(property: SubstanceProperty): void {\n    this.substanceFormPropertiesService.deleteSubstanceProperty(property);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormPropertiesCardComponent } from './substance-form-properties-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { PropertyFormComponent } from './property-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormPropertiesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule,\n    MatCheckboxModule,\n    MatListModule\n  ],\n  declarations: [\n    SubstanceFormPropertiesCardComponent,\n    PropertyFormComponent\n  ]\n})\nexport class SubstanceFormPropertiesModule { }\n"],"sourceRoot":"webpack:///","file":"6102.3413f71a7ae8f5d2.js"}