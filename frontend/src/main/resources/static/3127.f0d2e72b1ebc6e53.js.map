{"version":3,"mappings":"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","names":["i0","ctx_r2","LinkFormComponent","cvService","dialog","utilsService","overlayContainerService","substanceFormService","this","EventEmitter","getVocabularies","overlayContainer","getContainerElement","updateDisplay","smiles","vocabulary","privateLink","linkage","fragmentStructure","structure","getStructureUrlFragment","getDomainVocabulary","pipe","take","subscribe","found","response","NUCLEIC_ACID_LINKAGE","list","forEach","val","value","t","subscriptions","subscription","unsubscribe","set","link","getStructure","event","sites","concat","remaining","emitLinkUpdate","siteDisplay","siteString","$$deletedCode","newUUID","deleteTimer","setTimeout","linkDeleted","emit","clearTimeout","linkageTypes","dictionary","push","dialogRef","open","SubunitSelectorDialogComponent","data","card","width","style","zIndex","dialogSubscription","afterClosed","newLinks","l","selectors","ctx","ctx_r5","SubstanceFormLinksCardComponent","substanceFormLinksService","scrollToService","gaService","r","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","linksSubscription","substanceLinks","s","links","getRemainingSites","subunitsSubscription","substanceSubunits","subunits","componentDestroyed","linkArray","subunitArray","unit","sequence","length","i","subunitIndex","residueIndex","remainingSites","filter","some","obj2","item","invalidSites","addOtherLink","addSubstanceLink","scrollToElement","deleteSubstanceLink","SubstanceCardBaseFilteredList","SubstanceFormLinksModule","m","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatTooltipModule","MatButtonToggleModule","MatInputModule","MatSelectModule"],"sources":["./src/app/core/substance-form/links/link-form.component.html","./src/app/core/substance-form/links/link-form.component.ts","./src/app/core/substance-form/links/substance-form-links_card.component.html","./src/app/core/substance-form/links/substance-form-links_card.component.ts","./src/app/core/substance-form/links/substance-form-links.module.ts"],"sourcesContent":["<div class=\"link-form-container\">\n  <div *ngIf=\"link.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete link\" (click)=\"deleteLink()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n    <div *ngIf = \"structure\">\n        <img class = \"structure-image\" [src] = \"structure\"/>\n    </div>\n    <div class = \"type\">\n      <app-cv-input domain = \"NUCLEIC_ACID_LINKAGE\" title = \"Sequence Type\" (valueChange) = \"updateLinkage($event)\" [model] = \"privateLink.linkage\"></app-cv-input>\n    </div>\n    <div class = \"addRemaining\">\n      <button mat-flat-button mat-primary matTooltip=\"Add remaining {{remaining.length}} sites\" [disabled] = \"remaining.length === 0\" (click)=\"addRemainingSites()\">\n       add remaining {{remaining.length}} sites\n      </button>\n    </div>\n\n    <div class = \"links\">\n      <div class=\"label\">link</div>\n      {{siteDisplay}}\n      <button mat-icon-button matTooltip=\"Select sites from display\" (click)=\"(openDialog())\">\n        <mat-icon svgIcon=\"edit\"></mat-icon>\n      </button>\n    </div>\n  </div>\n  <app-audit-info [source] = \"privateLink\"></app-audit-info>\n</div>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\nimport {Link, Linkage, Site} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {ControlledVocabularyService} from '@gsrs-core/controlled-vocabulary';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {SubunitSelectorDialogComponent} from '@gsrs-core/substance-form/subunit-selector-dialog/subunit-selector-dialog.component';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-link-form',\n  templateUrl: './link-form.component.html',\n  styleUrls: ['./link-form.component.scss']\n})\nexport class LinkFormComponent implements OnInit, OnDestroy {\n\n  privateLink: Linkage;\n  @Output() linkDeleted = new EventEmitter<Linkage>();\n  @Input() remaining: Array<Site>;\n  deleteTimer: any;\n  linkageTypes: any;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  vocabulary: any;\n  smiles: any;\n  structure: any = null;\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.updateDisplay();\n\n    \n   // this.cvService.getStructureUrlFragment(term.fragmentStructure);\n  }\n\n  getStructure() {\n    this.smiles = this.vocabulary[this.privateLink.linkage];\n    if (this.smiles && this.smiles.fragmentStructure) {\n      this.structure = this.cvService.getStructureUrlFragment(this.smiles.fragmentStructure);\n    } else {\n      this.cvService.getDomainVocabulary('NUCLEIC_ACID_LINKAGE').pipe(take(1)).subscribe(response => {\n        let list = response['NUCLEIC_ACID_LINKAGE'].list;\n        let found = false;\n        list.forEach(val => {\n          if (val.value === this.privateLink.linkage) {\n            this.smiles = val;\n            found = true;\n            this.structure = this.cvService.getStructureUrlFragment(this.smiles.fragmentStructure);\n          }\n        });\n        if (!found) {\n          this.structure = null;\n        }\n      });\n    }\n  //  this.structure = this.cvService.getStructureUrlFragment(term.fragmentStructure);\n    \n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  @Input()\n  set link(link: Link) {\n    this.privateLink = link;\n    this.getStructure();\n  }\n\n  get link(): Link {\n    this.updateDisplay();\n    return this.privateLink;\n  }\n\n  updateLinkage(event: any) {\n    this.privateLink.linkage = event;\n    this.getStructure();\n  }\n\n  addRemainingSites(): void {\n    if (this.privateLink.sites) {\n      this.privateLink.sites = this.privateLink.sites.concat(this.remaining);\n    } else {\n      this.privateLink.sites = this.remaining;\n    }\n    this.updateDisplay();\n    this.substanceFormService.emitLinkUpdate();\n  }\n\n  updateDisplay(): void {\n    if (this.privateLink) {\n      this.siteDisplay = this.substanceFormService.siteString(this.privateLink.sites);\n\n    }\n  }\n\n  deleteLink(): void {\n    this.privateLink.$$deletedCode = this.utilsService.newUUID();\n      this.deleteTimer = setTimeout(() => {\n        this.linkDeleted.emit(this.link);\n        this.substanceFormService.emitLinkUpdate();\n      }, 2000);\n  }\n\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateLink.$$deletedCode;\n  }\n\n  getVocabularies(): void {\n    const subscription = this.cvService.getDomainVocabulary('NUCLEIC_ACID_LINKAGE').subscribe(response => {\n      this.linkageTypes = response['NUCLEIC_ACID_LINKAGE'].list;\n      this.vocabulary = response['NUCLEIC_ACID_LINKAGE'].dictionary;\n      this.smiles = this.vocabulary[this.privateLink.linkage];\n      this.getStructure();\n    });\n    this.subscriptions.push(subscription);\n  }\n\n  openDialog(): void {\n\n    const dialogRef = this.dialog.open(SubunitSelectorDialogComponent, {\n      data: {'card': 'link', 'link': this.privateLink.sites},\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newLinks => {\n      this.overlayContainer.style.zIndex = null;\n      if (newLinks) {\n        this.privateLink.sites = newLinks;\n      }\n      this.updateDisplay();\n      this.substanceFormService.emitLinkUpdate();\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n}\n","<div class=\"responsive\">\n  <div class = \"form-row\">\n  </div>\n  <div class = 'form-row' [ngClass] = \"invalidSites === 0?'':'too-many'\">Remaining Links: {{invalidSites === 0?remainingSites.length : invalidSites}}</div>\n  <div class = \"alternate-backgrounds\" *ngFor = \"let links of links; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-other-links-' + index\" >\n    <app-link-form [link]=\"links\" [remaining] = 'remainingSites' (linkDeleted)=\"deleteLink($event)\"></app-link-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n\n\n\n    <div class = \"form-row\">\n        <span class = \"middle-fill\"></span>\n           <button mat-button (click)=\"addOtherLink()\">\n            Add linkage <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n          </button>\n</div>\n</div>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport { SubstanceCardBaseFilteredList,  SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {Link, Linkage, Site, Subunit} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceFormLinksService } from './substance-form-links.service';\n\n@Component({\n  selector: 'app-substance-form-links',\n  templateUrl: './substance-form-links_card.component.html',\n  styleUrls: ['./substance-form-links_card.component.scss']\n})\nexport class SubstanceFormLinksCardComponent extends SubstanceCardBaseFilteredList<Linkage>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n\n  links: Array<Linkage>;\n  subunits: Array<Subunit>;\n  remainingSites: Array<Site> = [];\n  invalidSites = 0 ;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private substanceFormLinksService: SubstanceFormLinksService,\n    private substanceFormService: SubstanceFormService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form links';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Links');\n  }\n\n  ngAfterViewInit() {\n    const linksSubscription = this.substanceFormLinksService.substanceLinks.subscribe(links => {\n      this.links = links;\n      this.getRemainingSites();\n    });\n    this.subscriptions.push(linksSubscription);\n    const subunitsSubscription = this.substanceFormService.substanceSubunits.subscribe(subunits => {\n      this.subunits = subunits;\n      this.getRemainingSites();\n    });\n   this.subscriptions.push(subunitsSubscription);\n\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getRemainingSites(): void {\n    let linkArray = [];\n    const subunitArray = [];\n    if (this.subunits && this.links) {\n      this.subunits.forEach(unit => {\n        if (unit.sequence != null && unit.sequence.length > 0) {\n          for (let i = 2; i <= unit.sequence.length; i++) {\n            subunitArray.push({subunitIndex: unit.subunitIndex, residueIndex: i});\n          }\n        }\n      });\n      this.links.forEach(link => {\n        linkArray = linkArray.concat(link.sites);\n      });\n    }\n    this.remainingSites = subunitArray.filter(item => {return !linkArray.some(function(obj2) {\n      return (item.subunitIndex === obj2.subunitIndex && item.residueIndex === obj2.residueIndex);\n     });\n    });\n      this.invalidSites = subunitArray.length - linkArray.length;\n\n  }\n\n  addItem(): void {\n    this.addOtherLink();\n  }\n\n  addOtherLink(): void {\n    this.substanceFormLinksService.addSubstanceLink();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-other-links-0`, 'center');\n    });\n  }\n\n  deleteLink(link: Link): void {\n    this.substanceFormLinksService.deleteSubstanceLink(link);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DynamicComponentLoaderModule} from '@gsrs-core/dynamic-component-loader';\nimport {SubstanceFormModule} from '@gsrs-core/substance-form/substance-form.module';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ScrollToModule} from '@gsrs-core/scroll-to';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {SubstanceFormLinksCardComponent} from '@gsrs-core/substance-form/links/substance-form-links_card.component';\nimport {MatSelectModule} from '@angular/material/select';\nimport { LinkFormComponent } from './link-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormLinksCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatTooltipModule,\n    MatButtonToggleModule,\n    MatInputModule,\n    MatSelectModule\n  ],\n  exports: [\n  ],\n  declarations: [\n    SubstanceFormLinksCardComponent,\n    LinkFormComponent\n  ]\n})\nexport class SubstanceFormLinksModule { }\n"],"sourceRoot":"webpack:///","file":"3127.f0d2e72b1ebc6e53.js"}