{"version":3,"mappings":"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","names":["i0","SubstanceSubunitsComponent","cvService","gaService","t","Subject","this","substance","protein","subunits","length","countUpdate","emit","cvType","substanceType","getVocabularies","uuid","nucleicAcid","substanceUpdated","subscribe","e","getDomainVocabulary","vocabulary","response","dictionary","processSubunits","forEach","subunitSequence","fullSequence","subunit","sequence","subunitIndex","sequencesSectionGroups","subunitSequences","push","addSequenceSectionsGroup","squenceString","arguments","indexStart","sequenceSectionLength","sequenceSectionGroup","sequenceSections","sequenceSectionString","substr","addSequenceSections","sectionGroup","sectionNumberAddend","index","indexEnd","indexIncrement","sequenceSection","sectionNumber","sectionUnits","sequenceUnit","unitIndex","unitValue","toUpperCase","class","vocabDisplay","display","event","sendEvent","analyticsEventCategory","value","view","u","SubstanceCardBase","selectors","ctx","SubstanceSubunitsModule","h","CommonModule","DynamicComponentLoaderModule","MatTooltipModule","MatButtonToggleModule","MatIconModule","RouterModule"],"sources":["./src/app/core/substance-details/substance-subunits/substance-subunits.component.html","./src/app/core/substance-details/substance-subunits/substance-subunits.component.ts","./src/app/core/substance-details/substance-subunits/substance-subunits.module.ts"],"sourcesContent":["<div class=\"filters-container\">\r\n  <mat-button-toggle-group [value]=\"view\" (change)=\"updateView($event)\">\r\n    <mat-button-toggle aria-label=\"View List\" value=\"details\">\r\n      <mat-icon svgIcon=\"list\"></mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle aria-label=\"View Raw\" value=\"raw\">\r\n      <mat-icon svgIcon=\"view_stream\"></mat-icon>\r\n    </mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n</div>\r\n<div [ngClass]=\"view\">\r\n  <div class=\"subunit-sequence\" *ngFor=\"let subunitSequence of subunitSequences\">\r\n  <div class = \"form-row subunit-row\">\r\n    <div class = \"subunit-label\"> Subunit {{subunitSequence.subunitIndex}}</div>\r\n    <div>\r\n      <a class = \"subunit-title\" [routerLink]=\"['/sequence-search']\" target=\"_blank\"\r\n         [queryParams]=\"{substance: uuid, subunit: subunitSequence.uuid, seq_type: substanceType}\">similarity search\r\n         <mat-icon class = \"icon small-icon\" svgIcon=\"open_in_new\"></mat-icon>\r\n      </a>\r\n    </div>\r\n\r\n  </div>\r\n    <div class = \"subunit-sequence\">\r\n    <div class=\"responsive\">\r\n      <div class=\"sequence-section-group\" *ngFor=\"let sequencesSectionGroup of subunitSequence.sequencesSectionGroups;last as last1\">\r\n        <div class=\"sequence-section\" *ngFor=\"let sequencesSectionGroup of sequencesSectionGroup.sequenceSections;last as last2\" class= \"sequence-section\"  [ngClass] = \"last1 && last2? 'last-section' : ''\" >\r\n          <div class=\"section-number\">{{sequencesSectionGroup.sectionNumber}}</div>\r\n          <div class=\"section-units-container\">\r\n            <span class=\"section-unit  selectedSite siteref\" [ngClass] = \"sectionUnit.class? 'error':''\" *ngFor=\"let sectionUnit of sequencesSectionGroup.sectionUnits\" [matTooltip]=\"getTooltipMessage(subunitSequence.subunitIndex, sectionUnit.unitIndex, sectionUnit.unitValue)\">\r\n              {{sectionUnit.unitValue}}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"subunit\" *ngFor=\"let subunit of subunits\">\r\n    <h4>Subunit {{subunit.subunitIndex}}</h4>\r\n    <div class=\"raw-sequence\">{{subunit.sequence}}</div>\r\n  </div>\r\n</div>\r\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\r\nimport { SubstanceCardBase } from '../substance-card-base';\r\nimport {SubstanceDetail, Subunit} from '../../substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\r\nimport {Subject} from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-substance-subunits',\r\n  templateUrl: './substance-subunits.component.html',\r\n  styleUrls: ['./substance-subunits.component.scss']\r\n})\r\nexport class SubstanceSubunitsComponent extends SubstanceCardBase implements OnInit, AfterViewInit {\r\n  subunits: Array<Subunit> = [];\r\n  subunitSequences: Array<SubunitSequence> = [];\r\n  vocabulary: { [vocabularyTermValue: string]: VocabularyTerm } = {};\r\n  view = 'details';\r\n  substanceUpdated = new Subject<SubstanceDetail>();\r\n  cvType = 'AMINO_ACID_RESIDUE';\r\n  uuid: string;\r\n  substanceType: string;\r\n\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService,\r\n    public gaService: GoogleAnalyticsService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n      if (this.substance != null\r\n        && this.substance.protein != null\r\n        && this.substance.protein.subunits != null\r\n        && this.substance.protein.subunits.length) {\r\n        this.subunits = this.substance.protein.subunits;\r\n        this.countUpdate.emit(this.subunits.length);\r\n        this.cvType = 'AMINO_ACID_RESIDUE';\r\n        this.substanceType = 'protein';\r\n        this.getVocabularies();\r\n        this.uuid = this.substance.uuid;\r\n      } else if (this.substance != null\r\n        && this.substance.nucleicAcid != null\r\n        && this.substance.nucleicAcid.subunits != null\r\n        && this.substance.nucleicAcid.subunits.length) {\r\n        this.subunits = this.substance.nucleicAcid.subunits;\r\n        this.countUpdate.emit(this.subunits.length);\r\n        this.cvType = 'NUCLEIC_ACID_BASE';\r\n        this.substanceType = 'nucleicAcid';\r\n        this.getVocabularies();\r\n        this.uuid = this.substance.uuid;\r\n      }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.substanceUpdated.subscribe(substance => {\r\n      this.substance = substance;\r\n      this.uuid = this.substance.uuid;\r\n      if (this.substance.protein) {\r\n          this.subunits = this.substance.protein.subunits;\r\n      } else if (this.substance.nucleicAcid) {\r\n          this.subunits = this.substance.nucleicAcid.subunits;\r\n      }\r\n      this.countUpdate.emit(this.subunits.length);\r\n    });\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary(this.cvType).subscribe(response => {\r\n      this.vocabulary = response[this.cvType].dictionary;\r\n      this.processSubunits();\r\n    }, error => {\r\n      this.processSubunits();\r\n    });\r\n  }\r\n\r\n  private processSubunits(): void {\r\n    this.subunits.forEach(subunit => {\r\n      const subunitSequence: SubunitSequence = {\r\n        fullSequence: subunit.sequence,\r\n        subunitIndex: subunit.subunitIndex,\r\n        uuid: subunit.uuid,\r\n        sequencesSectionGroups: []\r\n      };\r\n      this.subunitSequences.push(subunitSequence);\r\n      this.addSequenceSectionsGroup(subunitSequence, subunit.sequence);\r\n    });\r\n  }\r\n\r\n  private addSequenceSectionsGroup(subunitSequence: SubunitSequence, squenceString: string = '', indexStart: number = 0) {\r\n    const sequenceSectionLength = 50;\r\n    if (squenceString.length > (indexStart + 1)) {\r\n      const sequenceSectionGroup: SequenceSectionGroup = {\r\n        sequenceSections: []\r\n      };\r\n      subunitSequence.sequencesSectionGroups.push(sequenceSectionGroup);\r\n      const sequenceSectionString = squenceString.substr(indexStart, sequenceSectionLength);\r\n\r\n      this.addSequenceSections(sequenceSectionGroup, sequenceSectionString, indexStart);\r\n\r\n      if (sequenceSectionString.length === sequenceSectionLength) {\r\n        indexStart = indexStart + sequenceSectionLength;\r\n        this.addSequenceSectionsGroup(subunitSequence, squenceString, indexStart);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addSequenceSections(\r\n    sectionGroup: SequenceSectionGroup,\r\n    sequenceSectionString: string = '',\r\n    sectionNumberAddend: number,\r\n    index: number = 0,\r\n    indexEnd: number = 9) {\r\n    const indexIncrement = 10;\r\n\r\n    if (sequenceSectionString !== '') {\r\n\r\n      const sequenceSection: SequenceSection = {\r\n        sectionNumber: 0,\r\n        sectionUnits: []\r\n      };\r\n\r\n      while (index <= indexEnd) {\r\n        if (sequenceSectionString[index]) {\r\n          const sequenceUnit: SequenceUnit = {\r\n            unitIndex: index + sectionNumberAddend + 1,\r\n            unitValue: sequenceSectionString[index]\r\n          };\r\n          if (!this.vocabulary[sequenceUnit.unitValue.toUpperCase()]) {\r\n              sequenceUnit.class = 'error';\r\n          }\r\n          sequenceSection.sectionUnits.push(sequenceUnit);\r\n          index++;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      sequenceSection.sectionNumber = index + sectionNumberAddend;\r\n\r\n      sectionGroup.sequenceSections.push(sequenceSection);\r\n\r\n      if (sequenceSectionString.length > index) {\r\n        indexEnd = indexEnd + indexIncrement;\r\n        this.addSequenceSections(sectionGroup, sequenceSectionString, sectionNumberAddend, index, indexEnd);\r\n      }\r\n    }\r\n  }\r\n\r\n  getTooltipMessage(subunitIndex: number, unitIndex: number, unitValue: string): string {\r\n    let vocabDisplay = '';\r\n    if (this.vocabulary[unitValue.toUpperCase()]) {\r\n      vocabDisplay = this.vocabulary[unitValue.toUpperCase()].display;\r\n    } else {\r\n      vocabDisplay = 'UNDEFINED';\r\n    }\r\n    return `${subunitIndex} - ${unitIndex}: ${unitValue.toUpperCase()} (${vocabDisplay})`;\r\n  }\r\n\r\n  updateView(event): void {\r\n    this.gaService.sendEvent(this.analyticsEventCategory, 'button:view-update', event.value);\r\n    this.view = event.value;\r\n  }\r\n}\r\n\r\ninterface SubunitSequence {\r\n  subunitIndex: number;\r\n  fullSequence?: string;\r\n  uuid?: string;\r\n  sequencesSectionGroups: Array<SequenceSectionGroup>;\r\n}\r\n\r\ninterface SequenceSectionGroup {\r\n  sequenceSections: Array<SequenceSection>;\r\n}\r\n\r\ninterface SequenceSection {\r\n  sectionNumber: number;\r\n  sectionUnits: Array<SequenceUnit>;\r\n}\r\n\r\ninterface SequenceUnit {\r\n  unitIndex: number;\r\n  unitValue: string;\r\n  class?: string;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubstanceSubunitsComponent } from './substance-subunits.component';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {RouterModule} from '@angular/router';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DynamicComponentLoaderModule.forChild(SubstanceSubunitsComponent),\r\n    MatTooltipModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [SubstanceSubunitsComponent]\r\n})\r\nexport class SubstanceSubunitsModule { }\r\n"],"sourceRoot":"webpack:///","file":"7398.5d25de6d5e4fd059.js"}