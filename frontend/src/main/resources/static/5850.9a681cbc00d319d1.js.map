{"version":3,"mappings":"ydAAAA,iBACEA,iBACEA,iBACEA,iBACAA,0BACcA,wDAAiBC,iBAA6DD,QAC1FA,0BACcA,wDAAiBE,gBAA0DF,QAE3FA,QACAA,iBACEA,8BACmBA,uDAAcG,YACcH,QACjDA,0BACyDA,wDAAeI,oBAAwBJ,QAElGA,QACAA,QACAA,iBACEA,sCAAwBA,6DAAoBK,4BAG5CL,QACFA,QAGFA,QACAA,8BAEFA,8BAzB0DA,sDAECA,oDAKFA,wDAGrCA,yDAOUA,iDAMZA,2CCNX,IAAMM,EAAb,eAAaA,EAAb,0CAQE,WACUC,EACDC,EACAC,GAAsC,6BAE7CC,gBAJQH,4CACDG,cACAA,cALDA,gBAAqC,GAC7CA,mBAAsC,GAOpCA,EAAKC,uBAAyB,wCAHeD,EAXjD,uCAiBE,WAAQ,WACNE,KAAKC,gBAAgBC,KAAK,0BAC1B,IAAMC,EAAsBH,KAAKL,0CAA0CS,+BAA+BC,UAAU,YAClHC,EAAKC,eAAiBA,EACtBD,EAAKE,qBAAuBF,EAAKC,eAAeE,iBAAmBH,EAAKC,eAAeE,gBAAgBC,SAAW,KAEpHV,KAAKW,cAAcC,KAAKT,GAExBH,KAAKa,iBAAmB,CAAEC,iBAAiB,EAAOC,QAAS,QAASC,UAAW,UAAWC,cAAe,aACvGC,gBAAiB,eAAgBC,eAAgB,EAAGC,mBAAmB,KA1B7E,6BA6BE,cA7BF,yBAgCE,WACEpB,KAAKW,cAAcU,QAAQ,YACzBC,EAAaC,kBAlCnB,oBAsCE,SAAOC,GACLxB,KAAKO,eAAekB,gBAAkBD,IAvC1C,wBA0CE,SAAWE,GACT1B,KAAKO,eAAeoB,WAAaD,IA3CrC,4BA8CE,SAAeA,GACb1B,KAAKO,eAAeqB,gBAAkBF,IA/C1C,yBAkDE,SAAYA,GACR1B,KAAKO,eAAesB,aAAeH,IAnDzC,oCAsDE,SAAuBI,GACrB,GAAkB,OAAdA,EAAmB,CACrB,IAAMC,EAAqC,CACzCC,SAAUF,EAAUG,MACpBC,KAAMJ,EAAUG,MAChBvB,QAASoB,EAAUK,KACnBC,eAAgB,YAChBC,WAAYP,EAAUO,YAExBrC,KAAKO,eAAeE,gBAAkBsB,EACtC/B,KAAKQ,qBAAuBuB,GAAoBA,EAAiBrB,SAAW,QAE5EV,KAAKO,eAAeE,gBAAkB,KACtCT,KAAKQ,qBAAuB,OAnElC,0BAwEE,SAAa8B,GACXtC,KAAKO,eAAe+B,OAASA,MAzEjCC,GAAiEC,kDAApD9C,GAA2CN,2DAA3CM,EAA2C+C,+yBDtBxDrD,6BAAkCA,qoCCsBrBM,EAAb,cCOagD,EAAb,eAAaA,KAAbC,iFAAaD,4DAhBF,CACPE,KACAC,aAAsCnD,GACtCoD,KACAC,IACAC,KACAC,KACAC,KACAC,IACAC,IACAC,QAMSX,EAAb","names":["i0","ctx_r1","ctx_r3","ctx_r4","ctx_r5","ctx_r6","SubstanceFormPolymerClassificationComponent","substanceFormPolymerClassificationService","gaService","cvService","c","analyticsEventCategory","this","menuLabelUpdate","emit","proteinSubscription","substancePolymerClassification","subscribe","e","classification","relatedSubstanceUuid","parentSubstance","refuuid","subscriptions","push","dropdownSettings","singleSelection","idField","textField","selectAllText","unSelectAllText","itemsShowLimit","allowSearchFilter","forEach","subscription","unsubscribe","tags","polymerSubclass","type","sourceType","polymerGeometry","polymerClass","substance","relatedSubstance","refPname","_name","name","uuid","substanceClass","approvalID","access","l","SubstanceFormBase","selectors","SubstanceFormPolymerClassificationModule","m","CommonModule","DynamicComponentLoaderModule","MatFormFieldModule","MatInputModule","ReactiveFormsModule","FormsModule","MatSelectModule","SubstanceFormModule","NameResolverModule","SubstanceSelectorModule"],"sources":["./src/app/core/substance-form/polymer-classification/substance-form-polymer-classification.component.html","./src/app/core/substance-form/polymer-classification/substance-form-polymer-classification.component.ts","./src/app/core/substance-form/polymer-classification/substance-form-polymer-classification.module.ts"],"sourcesContent":["<div class=\"name-form-container\" *ngIf = \"classification\">\n  <div class=\"form-row\">\n    <div class = \"field-container\">\n      <div class = \"field-row\">\n      <app-cv-input class = \"class\" domain = \"POLYMER_CLASS\" title = \"Polymer Class\"\n                    (valueChange) = \"updateClass($event)\" [model] = \"classification.polymerClass\"></app-cv-input>\n        <app-cv-input class = \"type\" domain = \"POLYMER_SOURCE_TYPE\" title = \"Source Type\"\n                      (valueChange) = \"updateType($event)\" [model] = \"classification.sourceType\"></app-cv-input>\n\n      </div>\n      <div class = \"field-row\">\n        <app-tag-selector  placeholder = \"polymer subclass\" class = \"tags subtype\"\n                           (tagsUpdate)=\"update($event)\" [tags]=\"classification.polymerSubclass\"\n                           cvDomain=\"POLYMER_SUBCLASS\"></app-tag-selector>\n      <app-cv-input class = \"geometry\" domain = \"POLYMER_GEOMETRY\" title = \"Polymer Geometry\"\n                    [model] = \"classification.polymerGeometry\" (valueChange)=\"updateGeometry($event)\"></app-cv-input>\n\n    </div>\n    </div>\n    <div class=\"flex-column related-substance\">\n      <app-substance-selector (selectionUpdated)=\"parentSubstanceUpdated($event)\"\n                              eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Parent Substance\" header=\"Parent Substance\"\n                              [subuuid]=\"relatedSubstanceUuid\">\n      </app-substance-selector>\n    </div>\n <!-- <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"classification.access\">\n    </app-access-manager>-->\n  </div>\n  <app-audit-info [source] = \"classification\"></app-audit-info>\n\n</div>\n\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {\n  Polymer,\n  PolymerClassification,\n  Protein,\n  SubstanceDetail,\n  SubstanceName,\n  SubstanceRelated, SubstanceSummary\n} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport { IDropdownSettings} from 'ng-multiselect-dropdown';\nimport { SubstanceFormBase } from '../base-classes/substance-form-base';\nimport { SubstanceFormPolymerClassificationService } from './substance-form-polymer-classification.service';\n\n@Component({\n  selector: 'app-substance-form-polymer-classification',\n  templateUrl: './substance-form-polymer-classification.component.html',\n  styleUrls: ['./substance-form-polymer-classification.component.scss']\n})\n// eslint-disable-next-line max-len\nexport class SubstanceFormPolymerClassificationComponent extends SubstanceFormBase\n  implements OnInit, AfterViewInit, OnDestroy {\n\n  classification: PolymerClassification;\n  parent: SubstanceRelated;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  dropdownSettings: IDropdownSettings = {};\n  constructor(\n    private substanceFormPolymerClassificationService: SubstanceFormPolymerClassificationService,\n    public gaService: GoogleAnalyticsService,\n    public cvService: ControlledVocabularyService\n  ) {\n    super();\n    this.analyticsEventCategory = 'substance form Polymer Classification';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Polymer Classification');\n    const proteinSubscription = this.substanceFormPolymerClassificationService.substancePolymerClassification.subscribe(classification => {\n      this.classification = classification;\n      this.relatedSubstanceUuid = this.classification.parentSubstance && this.classification.parentSubstance.refuuid || '';\n    });\n    this.subscriptions.push(proteinSubscription);\n\n    this.dropdownSettings = { singleSelection: false, idField: 'value', textField: 'display', selectAllText: 'Select All',\n      unSelectAllText: 'UnSelect All', itemsShowLimit: 3, allowSearchFilter: true};\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  update(tags: Array<string>): void {\n    this.classification.polymerSubclass = tags;\n  }\n\n  updateType(type: string): void {\n    this.classification.sourceType = type;\n  }\n\n  updateGeometry(type: string): void {\n    this.classification.polymerGeometry = type;\n  }\n\n  updateClass(type: string): void {\n      this.classification.polymerClass = type;\n  }\n\n  parentSubstanceUpdated(substance: SubstanceSummary): void {\n    if (substance !== null){\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.classification.parentSubstance = relatedSubstance;\n      this.relatedSubstanceUuid = relatedSubstance && relatedSubstance.refuuid || '';\n    } else {\n      this.classification.parentSubstance = null;\n      this.relatedSubstanceUuid = null;\n    }\n\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.classification.access = access;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { NameResolverModule } from '../../name-resolver/name-resolver.module';\nimport {SubstanceFormPolymerClassificationComponent} from '@gsrs-core/substance-form/polymer-classification/substance-form-polymer-classification.component';\nimport {SubstanceSelectorModule} from '@gsrs-core/substance-selector/substance-selector.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormPolymerClassificationComponent),\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatSelectModule,\n    SubstanceFormModule,\n    NameResolverModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormPolymerClassificationComponent\n  ]\n})\nexport class SubstanceFormPolymerClassificationModule { }\n"],"sourceRoot":"webpack:///","file":"5850.9a681cbc00d319d1.js"}