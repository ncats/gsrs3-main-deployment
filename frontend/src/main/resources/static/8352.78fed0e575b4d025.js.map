{"version":3,"mappings":"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","names":["i0","SubstanceHierarchyComponent","substanceService","authService","o","NestedTreeControl","node","children","MatTreeNestedDataSource","_","length","this","uuid","substance","name","_nameHTML","selfNode","id","type","parent","expandable","value","refuuid","approvalID","relationship","getHierarchy","subscribe","t","loadHierarchy","resp","isAdmin","hasAnyRoles","orig","push","i","row","depth","formatHierarchy","temp2","list_to_tree","dataSource","data","activeNode","lastID","lastProp","parentRemap","subref","self","linkingID","matches","text","match","includes","splice","sort","a","b","textA","toUpperCase","textB","k","list","map","roots","order","SubstanceCardBase","selectors","SubstanceHierarchyModule","CommonModule","RouterModule","DynamicComponentLoaderModule","MatTreeModule","MatIconModule"],"sources":["./src/app/core/substance-details/substance-hierarchy/substance-hierarchy.component.html","./src/app/core/substance-details/substance-hierarchy/substance-hierarchy.component.ts","./src/app/core/substance-details/substance-hierarchy/substance-hierarchy.module.ts"],"sourcesContent":["<div *ngIf=\"substance\">\r\n\r\n    <div>\r\n        <div class = \"label tree-label\">Substance Hierarchy</div>\r\n        <mat-tree *ngIf = \"dataSource.data && dataSource.data.length > 0\" [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"hierarchy-tree\">\r\n          <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\r\n            <li class=\"mat-tree-node\" [ngClass] = \"{'odd':node.order === 'odd', 'primary': activeNode === node}\" (click)=\"activeNode = node\" >\r\n              <button mat-icon-button class = \"tree-button\" disabled [attr.aria-label]=\"node.text\"></button>\r\n              <div class = 'node-container nochild'>\r\n                <div class = 'title'>\r\n                  <a class=\"hierarchy-link\" matTooltip=\"view substance details\" [ngClass] = \"node.self ? 'current-record':''\"\r\n                     [routerLink]=\"['/substances', node.value.refuuid || '']\" aria-label = \"view substance\" [innerHTML] = \"node.value.refPname\">\r\n                  </a>\r\n                  <a  class = \"hierarchy-edit\" [routerLink]=\"['/substances', node.value.refuuid || '', 'edit']\"\r\n                     target = \"_blank\"  matTooltip = \"edit substance in new tab\" aria-label=\"edit substance in new tab\"><span hidden>edit in new tab</span>\r\n                    <mat-icon *ngIf =\"isAdmin\" svgIcon=\"edit\"  color = \"primary\"></mat-icon>\r\n                  </a>\r\n                </div>\r\n                <div class = \"filler\">\r\n                </div>\r\n                <div class = \"right-container\">\r\n                  <span class = 'approval'>{{node.value.approvalID? node.value.approvalID : 'PENDING'}}</span>\r\n                  <span class = \"end\" *ngIf = \"node.relationship !== ''\"> {{node.relationship}}</span>\r\n      \r\n                </div>\r\n              </div>\r\n            </li>\r\n          </mat-tree-node>\r\n          <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\" >\r\n            <li class = \"no-border\">\r\n              <div class=\"mat-tree-node\" [ngClass] = \"{'odd':node.order === 'odd', 'primary': activeNode === node}\"\r\n                   (click)=\"activeNode = node\"  (click)=\"activeNode = node\">\r\n      \r\n      \r\n                <button mat-icon-button matTreeNodeToggle class = \"tree-button\"\r\n                        [attr.aria-label]=\"'toggle ' + node.text\">\r\n                  <mat-icon [svgIcon]=\"treeControl.isExpanded(node) ? 'chevron_down' : 'chevron_right'\"></mat-icon>\r\n                </button>\r\n                <div class = 'node-container'>\r\n                  <div class = 'title'>\r\n                    <a class=\"hierarchy-link\"  matTooltip=\"view substance details\" [ngClass] = \"node.self ? 'current-record':''\"\r\n                       [routerLink]=\"['/substances', node.value.refuuid || '']\" [innerHTML] = \"node.value.refPname\"></a>\r\n         \r\n                    <a class = \"hierarchy-edit\" [routerLink]=\"['/substances', node.value.refuuid || '', 'edit']\" aria-label=\"edit substance in new tab\">\r\n                      <mat-icon *ngIf =\"isAdmin\" matTooltip = \"edit substance in new tab\"  svgIcon=\"edit\"  color = \"primary\"></mat-icon>\r\n                    </a>\r\n                  </div>\r\n                  <div class = \"right-container\">\r\n                    <span class = 'approval'>{{node.value.approvalID || 'PENDING'}}</span>\r\n                     <span class = \"end\" *ngIf = \"node.relationship !== ''\"> {{node.relationship}}</span>\r\n                   </div>\r\n                  </div>\r\n                </div>\r\n              <ul [class.hierarchy-tree-invisible]=\"!treeControl.isExpanded(node)\">\r\n                <ng-container matTreeNodeOutlet></ng-container>\r\n              </ul>\r\n            </li>\r\n          </mat-nested-tree-node>\r\n        </mat-tree>\r\n      </div>\r\n      \r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { SubstanceCardBase } from '../substance-card-base';\r\nimport { SubstanceService } from '@gsrs-core/substance/substance.service';\r\nimport { AuthService } from '@gsrs-core/auth';\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource } from '@angular/material/tree';\r\nimport { HierarchyNode } from '@gsrs-core/substances-browse/substance-hierarchy/hierarchy.model';\r\n\r\n@Component({\r\n  selector: 'app-substance-hierarchy',\r\n  templateUrl: './substance-hierarchy.component.html',\r\n  styleUrls: ['./substance-hierarchy.component.scss']\r\n})\r\nexport class SubstanceHierarchyComponent extends SubstanceCardBase implements OnInit {\r\n\r\n  constructor(\r\n    private substanceService: SubstanceService,\r\n    private authService: AuthService\r\n  ) {\r\n   \r\n    super();\r\n  }\r\n\r\n  uuid: string;\r\n  name: string;\r\n  approvalID?: string;\r\n  treeControl = new NestedTreeControl<any>(node => node.children);\r\n  dataSource = new MatTreeNestedDataSource<any>();\r\n  selfNode: HierarchyNode;\r\n  activeNode: any;\r\n  isAdmin: boolean;\r\n  hasChild = (_: number, node: any) => !!node.children && node.children.length > 0;\r\n\r\n  ngOnInit() {\r\n    this.uuid = this.substance.uuid;\r\n    this.name = this.substance._nameHTML;\r\n    this.selfNode = {\r\n      'id': 0,\r\n      'type': 'ROOT',\r\n      'parent': '#',\r\n      'expandable': false,\r\n      'value': {\r\n        'refuuid': this.uuid,\r\n        'name': this.name,\r\n        'approvalID': this.approvalID || ''\r\n      },\r\n      'relationship': ''\r\n    };\r\n      this.substanceService.getHierarchy(this.uuid).subscribe(resp => {\r\n        this.loadHierarchy(resp);\r\n      }, error => {\r\n       this.loadHierarchy([this.selfNode]);\r\n      });\r\n      this.isAdmin = this.authService.hasAnyRoles('Admin', 'Updater', 'SuperUpdater');\r\n  }\r\n\r\n  loadHierarchy(orig: any): void {\r\n\r\n    if (orig.length === 0) {\r\n      orig.push(this.selfNode);\r\n    }\r\n\r\n    for (let i = 0; i < orig.length; i++) {\r\n      const row: any = orig[i];\r\n      if (row.depth === 0) {\r\n        row.parent = '#';\r\n      }\r\n    }\r\n    if (orig.length > 1) {\r\n      orig = this.formatHierarchy(orig);\r\n    }\r\n    const temp2 = this.list_to_tree(orig);\r\n    this.dataSource.data = temp2;\r\n    this.activeNode = this.dataSource.data[0];\r\n  }\r\n\r\n    formatHierarchy(data: any): HierarchyNode {\r\n    let lastID = '';\r\n    let lastProp = '';\r\n    const parentRemap = [];\r\n\r\n    for (let i = (data.length - 1); i >= 0; i--) {\r\n      if (data[i].depth === 0) {\r\n        data[i].parent = '#';\r\n      }\r\n      const subref = data[i].value;\r\n      data[i].relationship = '';\r\n      if (subref.refuuid === this.uuid) {\r\n        data[i].self = true;\r\n      }\r\n\r\n      if (!subref.approvalID && subref.linkingID && subref.linkingID.length === 10) {\r\n        data[i].value.approvalID = data[i].value.linkingID;\r\n      }\r\n      if (!data[i].value.approvalID) {\r\n        const matches = data[i].text.match(/\\[(.*?)\\]/);\r\n        if (matches) {\r\n          data[i].value.approvalID = matches[1];\r\n        }\r\n      }\r\n      // remove children identical to parent with active moiety relationship, format text\r\n      if ((subref.refuuid === lastID) && (lastProp.includes('HAS ACTIVE MOIETY'))) {\r\n        parentRemap.push([data[i + 1].id, data[i].id]);\r\n        data.splice(i + 1, 1);\r\n        data[i].relationship += '{ACTIVE MOIETY} ';\r\n      }\r\n      if (data[i].type.includes('HAS ACTIVE MOIETY')) {\r\n        data[i].relationship += '{ACTIVE FORM} ';\r\n      } else if (data[i].type.includes('IS SALT/SOLVATE OF')) {\r\n        data[i].relationship += '{SALT/SOLVATE} ';\r\n      } else if (data[i].type.includes('IS SUBCONCEPT OF')) {\r\n        data[i].relationship += '{SUBCONCEPT} ';\r\n      } else if (data[i].type.includes('IS G1SS CONSTITUENT OF')) {\r\n        data[i].relationship += '{G1SS} ';\r\n      } else if ((data[i].type.length > 8 ) && (data[i].relationship = '')) {\r\n        data[i].relationship += ' {' + data[i].type + '} ';\r\n      }\r\n\r\n\r\n      data[i].refuuid = data[i].value.refuuid;\r\n      lastID = data[i].refuuid;\r\n      lastProp = data[i].type;\r\n    }\r\n    // further remove self referential relationships with both salt and moiety relationship.\r\n    data.sort(function(a, b) {\r\n      const textA = a.refuuid.toUpperCase();\r\n      const textB = b.refuuid.toUpperCase();\r\n      if (textA === textB) {\r\n        return (a.parent < b.parent) ? -1 : (a.parent > b.parent) ? 1 : 0;\r\n      } else {\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n      }\r\n    });\r\n\r\n    // delete duplicates entries with both active moiety and salt/ solvate relationships.\r\n    for (let i = (data.length - 1); i >= 0; i--) {\r\n      if (i !== data.length - 1) {\r\n        if ((data[i].value.refuuid === data[i + 1].value.refuuid)) {\r\n          if ((data[i].parent === data[i + 1].parent)) {\r\n            if (data[i].type.includes('HAS ACTIVE MOIETY') && data[i + 1].type.includes('IS SALT/SOLVATE OF')) {\r\n              parentRemap.push([data[i].id, data[i + 1].id]);\r\n              data.splice(i, 1);\r\n            } else if (data[i + 1].type.includes('HAS ACTIVE MOIETY') && data[i].type.includes('IS SALT/SOLVATE OF')) {\r\n              parentRemap.push([data[i + 1].id, data[i].id]);\r\n              data.splice(i + 1, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    data.sort(function(a, b) {\r\n      return a.id - b.id;\r\n    });\r\n\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      for (let k = 0; k < parentRemap.length; k++) {\r\n        if (data[i].parent === parentRemap[k][0]) {\r\n          data[i].parent = parentRemap[k][1];\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  list_to_tree(list) {\r\n    const map = {}, roots = [];\r\n    let node, i;\r\n    for (i = 0; i < list.length; i += 1) {\r\n      map[list[i].id] = i;\r\n      list[i].children = [];\r\n      if (i === 0) {\r\n        list[i].order = 'primary';\r\n\r\n      } else if (i % 2 === 0) {\r\n        list[i].order = 'even';\r\n      } else {\r\n        list[i].order = 'odd';\r\n      }\r\n    }\r\n    for (i = 0; i < list.length; i += 1) {\r\n      node = list[i];\r\n      if (node.parent !== '#') {\r\n        list[map[node.parent]].children.push(node);\r\n      } else {\r\n        roots.push(node);\r\n      }\r\n    }\r\n    return roots;\r\n  }\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubstanceHierarchyComponent } from './substance-hierarchy.component';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    DynamicComponentLoaderModule.forChild(SubstanceHierarchyComponent),\r\n    MatTreeModule,\r\n    MatIconModule\r\n  ],\r\n  declarations: [SubstanceHierarchyComponent]\r\n})\r\nexport class SubstanceHierarchyModule { }\r\n"],"sourceRoot":"webpack:///","file":"8352.78fed0e575b4d025.js"}