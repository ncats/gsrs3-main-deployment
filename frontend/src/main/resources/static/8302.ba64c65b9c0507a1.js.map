{"version":3,"mappings":"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","names":["i0","ctx_r13","ReuseReferencesDialogComponent","dialogRef","data","cvService","this","domainReferenceUuids","domainRefereceUuids","slice","substanceReferences","unfiltered","JSON","parse","stringify","getVocabularies","beforeClosed","subscribe","i","close","length","filterRefs","filter","item","docType","getDomainVocabulary","documentTypes","response","DOCUMENT_TYPE","dictionary","event","reference","domainReferenceIndex","indexOf","uuid","checked","push","splice","a","MAT_DIALOG_DATA","selectors","ctx","ctx_r2","$event","ctx_r40","ctx_r43","ctx_r47","DomainReferencesComponent","substanceFormReferencesService","dialog","element","utilsService","overlayContainerService","substanceFormService","x","referencesSubscription","references","$$deletedCode","canReuse","loadReferences","subscriptions","overlayContainer","getContainerElement","forEach","subscription","unsubscribe","set","referencesUuids","dictionarySubscription","documentTypesDictionary","substanceReference","find","tableData","MatTableDataSource","open","RefernceFormDialogComponent","tags","access","width","style","zIndex","dialogSubscription","afterClosed","newReference","addSubstanceReference","setTimeout","addDomainReference","c","unshift","updateDomainReferences","referenceUuids","arguments","referenceUuidIndex","substanceReferenceIndex","findIndex","isExpanded","Event","bubbles","cancelable","nativeElement","dispatchEvent","url","bypassUpdateCheck","window","ctx_r5","ctx_r7","substanceService","authService","l","citation","ref","lastEdited","lastEditedBy","created","createdBy","_self","showPrev","d"],"sources":["./src/app/core/substance-form/references/references-dialogs/reuse-references-dialog.component.html","./src/app/core/substance-form/references/references-dialogs/reuse-references-dialog.component.ts","./src/app/core/substance-form/references/domain-references/domain-references.component.html","./src/app/core/substance-form/references/domain-references/domain-references.component.ts","./src/app/core/substance-form/references/references-dialogs/refernce-form-dialog.component.html","./src/app/core/substance-form/references/references-dialogs/refernce-form-dialog.component.ts"],"sourcesContent":["<h1 mat-dialog-title>Reuse Substance References</h1>\n<div mat-dialog-content>\n<div class = \"form-row\">\n    <mat-checkbox matTooltip=\"Apply\" (change)=\"filterRefs()\"\n    [checked]=\"filter\">Filter Out System / Validation references\n  </mat-checkbox>\n\n</div>\n  <table mat-table [dataSource]=\"substanceReferences\">\n\n    <ng-container matColumnDef=\"apply\">\n      <th mat-header-cell *matHeaderCellDef> Apply </th>\n      <td mat-cell *matCellDef=\"let reference\">\n        <mat-checkbox matTooltip=\"Apply\" (change)=\"toggleReference($event, reference)\"\n          [checked]=\"domainReferenceUuids.indexOf(reference.uuid) > -1\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"type\">\n      <th mat-header-cell *matHeaderCellDef> Type </th>\n      <td mat-cell *matCellDef=\"let reference\"> {{documentTypes[reference.docType] && documentTypes[reference.docType].value}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"citation\">\n      <th mat-header-cell *matHeaderCellDef> Citation </th>\n      <td mat-cell *matCellDef=\"let reference\">\n        <span *ngIf=\"!reference.url\">{{reference.citation}}</span>\n        <a [href]=\"reference.url\" target=\"_blank\" *ngIf=\"reference.url\">{{reference.citation}}</a>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"publicDomain\">\n      <th mat-header-cell *matHeaderCellDef> Public Domain </th>\n      <td mat-cell *matCellDef=\"let reference\">\n        {{reference.publicDomain ? 'Yes' : 'No'}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"access\">\n      <th mat-header-cell *matHeaderCellDef> Access </th>\n      <td mat-cell *matCellDef=\"let reference\">\n        <span *ngIf=\"!reference.access || reference.access.length === 0\">\n          Public\n        </span>\n        <span *ngIf=\"reference.access && reference.access.length > 0\">\n          <span *ngFor=\"let item of reference.access; last as isLast\">\n            {{item}}\n            <span *ngIf=\"!isLast\">, </span>\n          </span>\n        </span>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n<div matDialogActions>\n  <span class=\"middle-fill\"></span>\n  <button mat-button (click)=\"cancel()\">Cancel</button>\n  <button mat-button (click)=\"save()\">\n    Save\n  </button>\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SubstanceReference } from '../../../substance/substance.model';\nimport { ReuseReferencesDialogData } from './reuse-references-dialog-data.model';\nimport { ControlledVocabularyService } from '../../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../../controlled-vocabulary/vocabulary.model';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-reuse-references-dialog',\n  templateUrl: './reuse-references-dialog.component.html',\n  styleUrls: ['./reuse-references-dialog.component.scss']\n})\nexport class ReuseReferencesDialogComponent implements OnInit {\n  domainReferenceUuids: Array<string> = [];\n  substanceReferences: Array<SubstanceReference>;\n  documentTypes: { [vocabularyValue: string]: VocabularyTerm } = {};\n  displayedColumns: string[] = ['apply', 'type', 'citation', 'publicDomain', 'access'];\n  filter = false;\n  unfiltered: Array<SubstanceReference>;\n\n  constructor(\n    public dialogRef: MatDialogRef<ReuseReferencesDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) private data: ReuseReferencesDialogData,\n    private cvService: ControlledVocabularyService\n  ) {\n    this.domainReferenceUuids = data.domainRefereceUuids.slice();\n    this.substanceReferences = data.substanceReferences;\n  }\n\n  ngOnInit() {\n    this.unfiltered = JSON.parse(JSON.stringify(this.substanceReferences));\n    this.getVocabularies();\n    this.dialogRef.beforeClosed().subscribe(() => this.dialogRef.close(\n      (this.domainReferenceUuids && this.domainReferenceUuids.length > 0) ? this.domainReferenceUuids : null));\n      this.filterRefs();\n  }\n\n  filterRefs() {\n    this.filter = !this.filter;\n    if (this.filter) {\n      this.substanceReferences = this.substanceReferences.filter( item => {\n          return item.docType !== 'SYSTEM' && item.docType !== 'VALIDATION_MESSAGE';\n      });\n    } else {\n      this.substanceReferences = JSON.parse(JSON.stringify(this.unfiltered));\n    }\n  }\n  \n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('DOCUMENT_TYPE').subscribe(response => {\n      this.documentTypes = response['DOCUMENT_TYPE'].dictionary;\n    });\n  }\n\n  toggleReference(event: MatCheckboxChange, reference: SubstanceReference): void {\n\n    const domainReferenceIndex = this.domainReferenceUuids.indexOf(reference.uuid);\n\n    if (event.checked && domainReferenceIndex === -1) {\n      this.domainReferenceUuids.push(reference.uuid);\n    } else if (!event.checked && domainReferenceIndex > -1) {\n      this.domainReferenceUuids.splice(domainReferenceIndex, 1);\n    }\n\n  }\n\n  save(): void {\n    this.dialogRef.close(this.domainReferenceUuids);\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<div class=\"domain-references-content\">\n  <mat-accordion>\n    <mat-expansion-panel (closed)=\"panelClosed()\" (opened)=\"panelOpened()\">\n      <mat-expansion-panel-header class=\"domain-reference-header\">\n        <mat-panel-title>\n          <h4 class=\"title ref-title\" matTooltip=\"Expand references\">\n            {{card && card === 'definition'? 'Definitional ': ''}}References\n            <span [matBadge]=\"referencesUuids && referencesUuids.length || 0\" class = \"custom-badge\" matBadgeOverlap=\"false\">\n            </span>\n          </h4>\n          <div class=\"middle-fill\"></div>\n          <div class=\"title-actions\">\n            <button mat-flat-button color=\"primary\" matTooltip=\"Create new reference\"\n              (click)=\"addNewReference(); $event.stopPropagation()\">\n              Create new\n              <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n            </button>\n            <button mat-flat-button color=\"primary\" matTooltip=\"Reuse existing reference\"\n              (click)=\"reuseExistingReference(); $event.stopPropagation()\" *ngIf=\"canReuse\">\n              Reuse\n              <mat-icon svgIcon=\"move_to_inbox\"></mat-icon>\n            </button>\n          </div>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div>\n        <table mat-table *ngIf=\"referencesUuids\" [dataSource]=\"tableData\">\n          <ng-container matColumnDef=\"type\">\n            <th mat-header-cell *matHeaderCellDef> Type </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              {{documentTypesDictionary[reference.docType] && documentTypesDictionary[reference.docType].value}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"citation\">\n            <th mat-header-cell *matHeaderCellDef> Citation </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <span *ngIf=\"!reference.url\">{{reference.citation}}</span>\n              <a [href]=\"reference.url\" target=\"_blank\" *ngIf=\"reference.url\">{{reference.citation}}</a>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"publicDomain\">\n            <th mat-header-cell *matHeaderCellDef> Public Domain </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              {{reference.publicDomain ? 'Yes' : 'No'}}\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"access\">\n            <th mat-header-cell *matHeaderCellDef> Access </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <span *ngIf=\"!reference.access || reference.access.length === 0\">\n                Public\n              </span>\n              <span *ngIf=\"reference.access && reference.access.length > 0\">\n                <span *ngFor=\"let item of reference.access; last as isLast\">\n                  {{item}}\n                  <span *ngIf=\"!isLast\">, </span>\n                </span>\n              </span>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"goToReference\">\n            <th mat-header-cell *matHeaderCellDef> Edit </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <button mat-icon-button matTooltip=\"Open reference form\" (click)=\"openExistingReferenceForm(reference)\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"remove\">\n            <th mat-header-cell *matHeaderCellDef> Deselect </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <button mat-icon-button matTooltip=\"Remove reference\" (click)=\"removeDomainReference(reference.uuid)\">\n                <mat-icon svgIcon=\"clear\"></mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"attachment\">\n            <th mat-header-cell *matHeaderCellDef> </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <div *ngIf=\"reference.uploadedFile\">\n                <a mat-icon-button matTooltip=\"Download document\" (click)=\"downloadDocument(reference.uploadedFile)\">\n                  <mat-icon svgIcon=\"cloud_download\"></mat-icon>\n                </a>\n              </div>\n            </td>\n          </ng-container>\n\n          <!-- <ng-container matColumnDef=\"delete\">\n            <th mat-header-cell *matHeaderCellDef> Delete </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <button mat-icon-button matTooltip=\"Delete reference from entire substance\"\n                (click)=\"deleteReference(reference)\">\n                <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n              </button>\n            </td>\n          </ng-container> -->\n\n          <ng-container matColumnDef=\"tags\">\n            <th mat-header-cell *matHeaderCellDef> Tags </th>\n            <td mat-cell *matCellDef=\"let reference\">\n              <span  *ngIf = \"showmore && (reference.tags && reference.tags.length > 0)\" ><span class = \"badge\" *ngFor = \"let tag of reference.tags\"> {{tag}} </span> <a *ngIf = \"reference.tags.length > 1\" class = \"morelink\" (click) = \"showmore = !showmore\">hide</a> </span>  \n                <span  *ngIf = \"!showmore && (reference.tags && reference.tags.length > 0)\" ><span class = \"badge\" > {{reference.tags.length > 0? reference.tags[0]:null}}</span> <a *ngIf = \"reference.tags.length > 1\" class = \"morelink\" (click) = \"showmore = !showmore\">more...</a> </span>  \n                </td>\n          </ng-container>\n          \n          <ng-container matColumnDef=\"apply\">\n              <th mat-header-cell *matHeaderCellDef></th>\n              <td mat-cell *matCellDef=\"let reference\">\n                  <app-apply-reference [subReferenceUuid]=\"reference.uuid\"></app-apply-reference>\n              </td>\n            </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      </div>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n","import { Component, OnInit, Input, ElementRef, OnDestroy } from '@angular/core';\nimport { SubstanceReference } from '../../../substance/substance.model';\nimport { SubstanceFormService } from '../../substance-form.service';\nimport { ControlledVocabularyService } from '../../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../../controlled-vocabulary/vocabulary.model';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RefernceFormDialogComponent } from '../references-dialogs/refernce-form-dialog.component';\nimport { ReuseReferencesDialogComponent } from '../references-dialogs/reuse-references-dialog.component';\nimport { ReuseReferencesDialogData } from '../references-dialogs/reuse-references-dialog-data.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { UtilsService } from '../../../utils/utils.service';\nimport { Subscription } from 'rxjs';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { SubstanceFormReferencesService } from '../substance-form-references.service';\n\n@Component({\n  selector: 'app-domain-references',\n  templateUrl: './domain-references.component.html',\n  styleUrls: ['./domain-references.component.scss']\n})\nexport class DomainReferencesComponent implements OnInit, OnDestroy {\n  @Input() card?: string;\n  private domainReferenceUuids: Array<string>;\n  private substanceReferences: Array<SubstanceReference>;\n  canReuse = false;\n  references: Array<SubstanceReference> = [];\n  documentTypesDictionary: { [dictionaryValue: string]: VocabularyTerm } = {};\n  displayedColumns: string[] = ['type', 'citation', 'publicDomain', 'access', 'goToReference', 'remove', 'attachment', 'tags', 'apply'];\n  tableData: MatTableDataSource<SubstanceReference>;\n  isExpanded = false;\n  showmore = false;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private element: ElementRef,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n    const referencesSubscription = this.substanceFormReferencesService.substanceReferences.subscribe(references => {\n      if (references && references.length) {\n        this.substanceReferences = references.filter(reference => !reference.$$deletedCode);\n      } else {\n        this.substanceReferences = [];\n      }\n      this.canReuse = this.substanceReferences && this.substanceReferences.length > 0;\n      this.loadReferences();\n    });\n    this.subscriptions.push(referencesSubscription);\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  @Input()\n  set referencesUuids(referencesUuids: Array<string>) {\n    this.domainReferenceUuids = referencesUuids || [];\n    this.loadReferences();\n  }\n\n  get referencesUuids(): Array<string> {\n    return this.domainReferenceUuids;\n  }\n\n  getVocabularies(): void {\n    const dictionarySubscription = this.cvService.getDomainVocabulary('DOCUMENT_TYPE').subscribe(response => {\n      this.documentTypesDictionary = response['DOCUMENT_TYPE'].dictionary;\n    });\n    this.subscriptions.push(dictionarySubscription);\n  }\n\n  private loadReferences() {\n    if (this.domainReferenceUuids && this.substanceReferences) {\n      this.references = [];\n      this.domainReferenceUuids.forEach((uuid: string) => {\n        const substanceReference = this.substanceReferences.find(reference => reference.uuid === uuid);\n        if (substanceReference != null) {\n          this.references.push(substanceReference);\n        }\n      });\n      this.tableData = new MatTableDataSource<SubstanceReference>(this.references);\n    } else {\n      this.references = [];\n    }\n  }\n\n  addNewReference(): void {\n\n    const reference: SubstanceReference = {\n      tags: [],\n      access: []\n    };\n\n    const dialogRef = this.dialog.open(RefernceFormDialogComponent, {\n      data: reference,\n      width: '900px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newReference => {\n      this.overlayContainer.style.zIndex = null;\n      if (newReference != null) {\n        newReference = this.substanceFormReferencesService.addSubstanceReference(newReference);\n        setTimeout(() => {\n          this.addDomainReference(newReference.uuid);\n        });\n        this.canReuse = true;\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  openExistingReferenceForm(reference: SubstanceReference): void {\n\n    const dialogRef = this.dialog.open(RefernceFormDialogComponent, {\n      data: reference,\n      width: '900px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(updatedReference => {\n      this.overlayContainer.style.zIndex = null;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  addDomainReference(uuid: string): void {\n    if (this.domainReferenceUuids.indexOf(uuid) === -1) {\n      this.domainReferenceUuids.push(uuid);\n    }\n\n    let substanceReference = this.references.find(reference => reference.uuid === uuid);\n    if (substanceReference == null) {\n      substanceReference = this.substanceReferences.find(reference => reference.uuid === uuid);\n      if (substanceReference != null) {\n        this.references.unshift(substanceReference);\n        this.tableData.data = this.references;\n      }\n    }\n  }\n\n  reuseExistingReference(): void {\n\n    const data: ReuseReferencesDialogData = {\n      domainRefereceUuids: this.domainReferenceUuids,\n      substanceReferences: this.substanceReferences\n    };\n\n    const dialogRef = this.dialog.open(ReuseReferencesDialogComponent, {\n      data: data,\n      width: '900px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(domainRefereceUuids => {\n      this.overlayContainer.style.zIndex = null;\n      if (domainRefereceUuids != null) {\n        this.updateDomainReferences(domainRefereceUuids);\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateDomainReferences(referenceUuids: Array<string> = []): void {\n    this.domainReferenceUuids.length = 0;\n    referenceUuids.forEach(uuid => {\n        this.domainReferenceUuids.push(uuid);\n    });\n    const references = [];\n    this.domainReferenceUuids.forEach((uuid: string) => {\n      const substanceReference = this.substanceReferences.find(reference => reference.uuid === uuid);\n      if (substanceReference != null) {\n        references.push(substanceReference);\n      }\n    });\n    this.references = references;\n    this.tableData.data = this.references;\n  }\n\n  removeDomainReference(uuid: string): void {\n    const referenceUuidIndex = this.domainReferenceUuids.indexOf(uuid);\n\n    if (referenceUuidIndex > -1) {\n      this.domainReferenceUuids.splice(referenceUuidIndex, 1);\n    }\n    const substanceReferenceIndex = this.references.findIndex(reference => reference.uuid === uuid);\n\n    if (substanceReferenceIndex > -1) {\n      this.references.splice(substanceReferenceIndex, 1);\n    }\n    this.tableData.data = this.references;\n  }\n\n  // COMMENTING OUT IN CASE WE NEED TO ADD BACK SOMEDAY\n  // deleteReference(reference: SubstanceReference): void {\n  //   reference.$$deletedCode = this.utilsService.newUUID();\n  //   this.substanceFormReferencesService.emitReferencesUpdate();\n  // }\n\n  panelOpened(): void {\n    this.isExpanded = true;\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true });\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  panelClosed(): void {\n    this.isExpanded = false;\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true });\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  downloadDocument(url: string): void {\n    this.substanceFormService.bypassUpdateCheck();\n    window.open(url);\n  }\n}\n","<h1 mat-dialog-title>{{reference.uuid ? 'Edit' : 'Add'}} Reference</h1>\n<div mat-dialog-content name = \"reference-dialog-container\" id = \"reference-dialog-container\">\n  <app-previous-references (selectedReference) = \"fillReference($event)\" *ngIf =\"showPrev\"></app-previous-references>\n  <div *ngIf=\"reference\">\n    <app-reference-form [reference]=\"reference\" #referenceForm hideDelete=\"true\" id = \"reference-dialog-form\" name = \"reference-dialog-form\"></app-reference-form>\n    <div class=\"actions\">\n      <span class=\"middle-fill\"></span>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button mat-button [disabled]=\"!referenceForm || !referenceForm.isValid\" (click)=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SubstanceReference } from '../../../substance/substance.model';\nimport { SubstanceService } from '@gsrs-core/substance/substance.service';\nimport { AuthService } from '@gsrs-core/auth';\nimport { Content } from '@angular/compiler/src/render3/r3_ast';\n\n@Component({\n  selector: 'app-refernce-form-dialog',\n  templateUrl: './refernce-form-dialog.component.html',\n  styleUrls: ['./refernce-form-dialog.component.scss']\n})\nexport class RefernceFormDialogComponent implements OnInit {\nuser: string;\nshowPrev = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<RefernceFormDialogComponent>,\n    private substanceService: SubstanceService,\n    private authService: AuthService,\n    @Inject(MAT_DIALOG_DATA) public reference: SubstanceReference = {}\n  ) {}\n\n  ngOnInit() {\n    this.dialogRef.beforeClosed().subscribe(() => this.dialogRef.close(\n      ((this.reference.docType && this.reference.docType !== '') &&\n      (this.reference.citation && this.reference.citation !== '')) ? this.reference : null));\n  }\n\n  save(): void {\n    this.dialogRef.close(this.reference);\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  fillReference(ref: SubstanceReference) {\n    delete ref.uuid;\n    delete ref.lastEdited;\n    delete ref.lastEditedBy;\n    delete ref.created;\n    delete ref.createdBy;\n    delete ref._self;\n    if ((ref.docType && ref.docType !== '') && (ref.citation && ref.citation !== '')) {\n      this.reference = ref;\n    }\n    this.showPrev = false;\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"8302.ba64c65b9c0507a1.js"}