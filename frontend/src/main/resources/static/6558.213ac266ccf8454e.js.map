{"version":3,"mappings":"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","names":["i0","ctx_r18","ctx_r19","ctx_r25","ctx_r28","ctx_r32","ctx_r36","ctx_r37","ctx_r38","ctx_r39","ctx_r40","ctx_r41","ctx_r42","SubstanceFormDefinitionComponent","cvService","substanceService","substanceFormService","overlayContainerService","configService","activatedRoute","d","ENTER","COMMA","FormControl","value","disabled","this","overlayContainer","getContainerElement","menuLabelUpdate","emit","getVocabularies","getTags","subscribe","t","suggestedTags","tags","filteredSuggestedTags","crossCheckTags","tagsCtrl","enable","tagsSubscription","valueChanges","filter","tag","toLowerCase","indexOf","subscriptions","push","configData","showOldLinks","oldlink","subscription","definition","defAccess","getDefinitionForDefRef","substanceClass","toUpperCase","definitionType","definitionLevel","json","getJson","status","getDomainVocabulary","pipe","take","type","vocabularyResponse","RELATIONSHIP_TYPE","dictionary","relationships","length","primarySubstance","find","relationship","getSubstanceSummary","relatedSubstance","refuuid","response","primarySubUuid","uuid","getUuid","imported","getMethod","source","snapshot","queryParams","forEach","unsubscribe","oldSiteRedirect","definitionTypes","DEFINITION_TYPE","list","definitionLevels","DEFINITION_LEVEL","event","indexToRemove","findIndex","i","splice","updateDefinition","substance","setPrimarySubstance","removePrimarySubstance","Object","prototype","toString","call","refPname","_name","approvalID","access","setDefinitionFromDefRef","sort","trim","addedTag","addTag","input","tagIndex","usedSuggestedTags","availableTag","option","setValue","tagsInput","nativeElement","decreaseOverlayZindex","autocompleteInputValue","style","zIndex","u","SubstanceFormBase","selectors","ElementRef","SubstanceFormDefinitionModule","S","CommonModule","DynamicComponentLoaderModule","ReactiveFormsModule","FormsModule","MatFormFieldModule","MatSelectModule","MatMenuModule","MatCheckboxModule","MatButtonModule","MatIconModule","SubstanceFormModule","ScrollToModule","SubstanceSelectorModule","MatTooltipModule","RouterModule","MatRadioModule","MatChipsModule","MatAutocompleteModule","MatProgressBarModule","ElementLabelDisplayModule"],"sources":["./src/app/core/substance-form/substance-form-definition/substance-form-definition.component.html","./src/app/core/substance-form/substance-form-definition/substance-form-definition.component.ts","./src/app/core/substance-form/substance-form-definition/substance-form-definition.module.ts"],"sourcesContent":["<div *ngIf=\"definition\">\n  <div class=\"substance-form-row form-header\">\n    <div><span class = \"sub-header\">{{(uuid && !imported) ? 'Editing ' : 'Registering New '}}</span>\n      <span> {{substanceClass | titlecase}}</span>\n    </div>\n    <span class = \"approval\" *ngIf = \"definition.approvalID && definition.approvalID !== ''\">{{definition.approvalID}}</span>\n  </div>\n  <div class=\"substance-form-row form-name\" *ngIf = \"definition._name\">\n\n    <div>{{ 'displayNameTitle' | elementLabel : 'substance_names_name' }}: <span class = \"name\" [innerHTML] = \"definition._nameHTML ? definition._nameHTML : definition._name\"></span></div>\n  </div>\n  <div class=\"substance-form-row\">\n    <mat-form-field *ngIf = 'definition.substanceClass !== \"concept\"' style = \"margin-right: 5px\">\n      <mat-label>Definition Type</mat-label>\n      <mat-select [(ngModel)]=\"definition.definitionType\" name=\"definitionType\" (selectionChange)=\"updateDefinitionType($event)\" required>\n        <mat-option *ngFor=\"let defitionType of definitionTypes\" [value]=\"defitionType.value\">\n          {{defitionType.display}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div class=\"primary-substance-container\" *ngIf=\"definition.definitionType == 'ALTERNATIVE'\">\n      <app-substance-selector (selectionUpdated)=\"primartySubstanceUpdated($event)\"\n        eventCategory=\"substanceFormDefinitionType\"\n        placeholder=\"Primary Substance\"\n        header=\"Primary Substance\"\n        [subuuid]=\"primarySubUuid\">\n      </app-substance-selector>\n    </div>\n    <mat-form-field  *ngIf = 'definition.substanceClass !== \"concept\"'>\n      <mat-label>Definition Level</mat-label>\n      <mat-select [(ngModel)]=\"definition.definitionLevel\" name=\"definitionLevel\" (selectionChange)=\"updateDefinition()\">\n        <mat-option *ngFor=\"let defitionLevel of definitionLevels\" [value]=\"defitionLevel.value\">\n          {{defitionLevel.display}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div class=\"checkbox-container\">\n      <mat-checkbox [(ngModel)]=\"definition.deprecated\" name=\"deprecated\" (change)=\"updateDefinition()\">Deprecated</mat-checkbox>\n    </div>\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"definition.access\" label = \"Record Level Access\"></app-access-manager>\n    </div>\n    <div class = 'redirect-links' *ngIf = \"uuid\" >\n      <a [href]=\"getRedirect()\" *ngIf = \"oldlink\" target = \"_blank\" matTooltip= \"open old edit form in new tab\">\n        Old edit form <mat-icon class = \"icon\"  svgIcon=\"open_in_new\"></mat-icon>\n      </a>\n      <br/>\n      <a [routerLink]=\"['/substances', uuid]\" target = \"_blank\" matTooltip= \"open details page in new tab\">\n        Details page <mat-icon class = \"icon\" svgIcon=\"open_in_new\"></mat-icon>\n      </a>\n    </div>\n  </div>\n  <div class=\"substance-form-row\">\n    <mat-form-field class=\"tag-list\">\n      <mat-chip-list #tagList aria-label=\"Tags edit\" selectable=\"false\">\n        <mat-chip\n          *ngFor=\"let tag of definition.tags\"\n          removable=\"true\"\n          (removed)=\"removeTag(tag)\">\n            {{tag}}\n          <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\n        </mat-chip>\n        <input\n          placeholder=\"Substance tags\"\n          #tagsInput\n          [formControl]=\"tagsCtrl\"\n          [matAutocomplete]=\"tagsAuto\"\n          [matChipInputFor]=\"tagList\"\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n          (matChipInputTokenEnd)=\"tagAdded($event)\"\n          (blur)=\"tagsBlurred()\">\n      </mat-chip-list>\n      <mat-autocomplete\n        #tagsAuto=\"matAutocomplete\"\n        (opened)=\"increaseOverlayZindex()\"\n        (closed)=\"tagsAutocompleteClosed()\"\n        (optionSelected)=\"selectedTag($event)\">\n        <mat-option *ngFor=\"let tag of filteredSuggestedTags\" [value]=\"tag\">\n          {{tag}}\n        </mat-option>\n      </mat-autocomplete>\n      <mat-hint>Enter new tags (and press Enter after each entry) or select from suggested tags below</mat-hint>\n    </mat-form-field>\n  </div>\n  <div class=\"substance-form-row\" *ngIf=\"definition.substanceClass !== 'concept'\">\n    <div class=\"references-container\">\n      <app-domain-references [referencesUuids]=\"definition.references\" card = \"definition\" #references></app-domain-references>\n    </div>\n    <div matTooltip = \"Set {{definition.substanceClass}} access\">\n      <app-access-manager (accessOut)=\"updateDefAccess($event)\" [access]=\"defAccess\" label = \"Definition Access\"></app-access-manager>\n    </div>\n  </div>\n\n  <div class = \"substance-form-row\" *ngIf=\"definition.substanceClass === 'concept'\">\n    Concepts have no defining information, but are collections of terms, codes and related information. <br/> They can be promoted to a defined substance at a later time, when appropriate.\n  </div>\n  <app-audit-info [source] = \"definition\"></app-audit-info>\n</div>\n","import { Component, OnInit, AfterViewInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { SubstanceFormBase } from '../base-classes/substance-form-base';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { MatSelectChange } from '@angular/material/select';\nimport { SubstanceService } from '../../substance/substance.service';\nimport { SubstanceSummary, SubstanceRelationship } from '../../substance/substance.model';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { SubstanceFormDefinition } from '../substance-form.model';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport { FormControl } from '@angular/forms';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigService } from '@gsrs-core/config';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-substance-form-definition',\n  templateUrl: './substance-form-definition.component.html',\n  styleUrls: ['./substance-form-definition.component.scss']\n})\nexport class SubstanceFormDefinitionComponent extends SubstanceFormBase implements OnInit, AfterViewInit, OnDestroy {\n  definitionTypes: Array<VocabularyTerm>;\n  definitionLevels: Array<VocabularyTerm>;\n  primarySubstance?: SubstanceSummary;\n  definition: SubstanceFormDefinition;\n  primarySubUuid: string;\n  uuid: string;\n  json: any;\n  feature: string;\n  substanceClass: string;\n  status: string;\n  accessLabel?:string;\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n  tagsCtrl = new FormControl({value: '', disabled: true});\n  private suggestedTags: Array<string>;\n  filteredSuggestedTags: Array<string>;\n  private usedSuggestedTags: Array<string> = [];\n  private overlayContainer: HTMLElement;\n  private subscriptions: Array<Subscription> = [];\n  defAccess: Array<any>;\n  @ViewChild('tagsInput', { read: ElementRef, static: false }) tagsInput: ElementRef<HTMLInputElement>;\n  imported = false;\n  oldlink = false;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    public substanceService: SubstanceService,\n    private substanceFormService: SubstanceFormService,\n    private overlayContainerService: OverlayContainer,\n    private configService: ConfigService,\n    private activatedRoute: ActivatedRoute,\n\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.menuLabelUpdate.emit('Overview');\n    this.getVocabularies();\n    this.substanceService.getTags().subscribe(tags => {\n      this.suggestedTags = tags;\n      this.filteredSuggestedTags = tags;\n      this.crossCheckTags();\n      this.tagsCtrl.enable();\n    });\n    const tagsSubscription = this.tagsCtrl.valueChanges.subscribe(value => {\n      this.filteredSuggestedTags = this.suggestedTags.filter(tag => tag.toLowerCase().indexOf((value || '').toLowerCase()) > -1);\n    });\n    this.subscriptions.push(tagsSubscription);\n\n    if (this.configService.configData && this.configService.configData.showOldLinks) {\n      this.oldlink = true;\n\n    }\n  }\n\n  ngAfterViewInit() {\n  const subscription =  this.substanceFormService.definition.subscribe(definition => {\n    this.defAccess = this.substanceFormService.getDefinitionForDefRef();\n      this.definition = definition || {};\n      this.crossCheckTags();\n      if (this.definition.substanceClass === 'structure') {\n        this.substanceClass = 'chemical';\n      } else if (this.definition.substanceClass === 'nucleicAcid') {\n        this.substanceClass = 'Nucleic Acid';\n      } else if (this.definition.substanceClass === 'structurallyDiverse') {\n        this.substanceClass = 'Structurally Diverse';\n      } else if (this.definition.substanceClass.toUpperCase() === 'SPECIFIEDSUBSTANCE') {\n        this.substanceClass = 'Specified Substance Group 1';\n      } else if (this.definition.substanceClass.toUpperCase() === 'SPECIFIEDSUBSTANCEG3') {\n        this.substanceClass = 'Specified Substance Group 3';\n      } else {\n        this.substanceClass = this.definition.substanceClass;\n      }\n      if (!this.definition.definitionType) {\n        this.definition.definitionType = 'PRIMARY';\n      }\n\n      if (!this.definition.definitionLevel) {\n        this.definition.definitionLevel = 'COMPLETE';\n      }\n      this.json = this.substanceFormService.getJson();\n      if (this.definition.status) {\n        this.status = this.definition.status;\n      }\n      if (this.definition.definitionType === 'ALTERNATIVE') {\n        this.cvService.getDomainVocabulary('RELATIONSHIP_TYPE').pipe(take(1)).subscribe(vocabularyResponse => {\n          const type = vocabularyResponse['RELATIONSHIP_TYPE']\n            && vocabularyResponse['RELATIONSHIP_TYPE'].dictionary['SUB_ALTERNATE->SUBSTANCE']\n            && vocabularyResponse['RELATIONSHIP_TYPE'].dictionary['SUB_ALTERNATE->SUBSTANCE'].value\n            || null;\n\n          if (type && this.definition.relationships && this.definition.relationships.length) {\n            const primarySubstance = this.definition.relationships.find(relationship => relationship.type === type);\n            if (primarySubstance != null) {\n              this.substanceService.getSubstanceSummary(primarySubstance.relatedSubstance.refuuid).subscribe(response => {\n                this.primarySubstance = response;\n                this.primarySubUuid = this.primarySubstance.uuid;\n              });\n            }\n          }\n        });\n      }\n      this.uuid = this.substanceFormService.getUuid();\n      const imported = this.substanceFormService.getMethod();\n      const source = this.activatedRoute.snapshot.queryParams['source'] || null;\n      if (imported && imported === 'import' && (!source || source !== 'draft')) {\n        this.imported = true;\n      } else {\n        this.imported = false;\n      }\n\n    });\n\n    this.subscriptions.push(subscription);\n\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getRedirect() {\n    if (this.uuid) {\n      return this.substanceService.oldSiteRedirect('edit', this.substanceFormService.getUuid());\n    } else {\n      return '#';\n    }\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('DEFINITION_TYPE', 'DEFINITION_LEVEL').subscribe(response => {\n      this.definitionTypes = response['DEFINITION_TYPE'].list;\n      this.definitionLevels = response['DEFINITION_LEVEL'].list;\n    });\n  }\n\n  updateDefinitionType(event: MatSelectChange): void {\n    if (this.definition.definitionType === 'PRIMARY' && this.definition.relationships != null && this.definition.relationships.length) {\n      const indexToRemove = this.definition.relationships\n        .findIndex((relationship) => relationship.relatedSubstance.refuuid === this.primarySubstance.uuid);\n      if (indexToRemove > -1) {\n        this.definition.relationships.splice(indexToRemove, 1);\n      }\n      this.primarySubstance = null;\n    }\n    this.substanceFormService.updateDefinition(this.definition);\n  }\n\n  primartySubstanceUpdated(substance?: SubstanceSummary): void {\n    if (substance != null) {\n      this.setPrimarySubstance(substance);\n    } else {\n      this.removePrimarySubstance();\n    }\n  }\n\n  setPrimarySubstance(substance: SubstanceSummary): void {\n\n    this.primarySubstance = substance;\n    this.primarySubUuid = substance.uuid;\n\n    if (this.definition.relationships == null\n      || Object.prototype.toString.call(this.definition.relationships) !== '[object Array]') {\n      this.definition.relationships = [];\n    }\n    this.cvService.getDomainVocabulary('RELATIONSHIP_TYPE').subscribe(vocabularyResponse => {\n      const relationship: SubstanceRelationship = {\n        relatedSubstance: {\n          refuuid: this.primarySubstance.uuid,\n          refPname: this.primarySubstance._name,\n          approvalID: this.primarySubstance.approvalID,\n          substanceClass: 'reference'\n        },\n        access: [],\n        type: vocabularyResponse['RELATIONSHIP_TYPE']\n          && vocabularyResponse['RELATIONSHIP_TYPE'].dictionary['SUB_ALTERNATE->SUBSTANCE']\n          && vocabularyResponse['RELATIONSHIP_TYPE'].dictionary['SUB_ALTERNATE->SUBSTANCE'].value\n          || ''\n      };\n      this.definition.relationships.push(relationship);\n      this.substanceFormService.updateDefinition(this.definition);\n    });\n  }\n\n  removePrimarySubstance(): void {\n    const indexToRemove = this.definition.relationships\n      .findIndex((relationship) => relationship.relatedSubstance.refuuid === this.primarySubUuid);\n    this.definition.relationships.splice(indexToRemove, 1);\n    this.primarySubstance = null;\n    this.substanceFormService.updateDefinition(this.definition);\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.definition.access = access;\n    this.substanceFormService.updateDefinition(this.definition);\n  }\n\n  updateDefAccess(access: Array<string>): void {\n    this.substanceFormService.setDefinitionFromDefRef(access);\n    this.substanceFormService.updateDefinition(this.definition);\n  }\n\n  updateDefinition(): void {\n    this.substanceFormService.updateDefinition(this.definition);\n  }\n\n  private crossCheckTags(): void {\n    if (\n      this.definition != null\n      && this.definition.tags != null\n      && this.definition.tags.length > 0\n      && this.suggestedTags != null) {\n        const tags = this.definition.tags.sort();\n        let i = 0;\n        this.definition.tags.forEach(tag => {\n          for (i = i; i < this.suggestedTags.length; i++) {\n            if (tag.toLowerCase() === this.suggestedTags[i].toLowerCase()) {\n              this.suggestedTags.splice(i, 1);\n              break;\n            }\n          }\n        });\n    }\n  }\n\n  tagAdded(event: MatChipInputEvent): void {\n    if ((event.value || '').trim()) {\n      const addedTag = event.value.trim();\n      this.addTag(addedTag);\n    }\n    if (event.input) {\n      event.input.value = '';\n    }\n  }\n\n  private addTag(addedTag: string): void {\n    this.definition.tags.push(addedTag);\n    this.updateDefinition();\n    for (let i = 0; i < this.suggestedTags.length; i++) {\n      if (addedTag.toLowerCase() === this.suggestedTags[i].toLowerCase()) {\n        this.suggestedTags.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  removeTag(tag: string): void {\n    const tagIndex = this.definition.tags.indexOf(tag);\n\n    if (tagIndex > -1) {\n      this.definition.tags.splice(tagIndex, 1);\n      this.updateDefinition();\n\n      if (this.usedSuggestedTags.length > 0) {\n        for (let i = 0; i < this.usedSuggestedTags.length; i++) {\n          if (tag.toLowerCase() === this.usedSuggestedTags[i].toLowerCase()) {\n            const availableTag = this.usedSuggestedTags.splice(i, 1)[0];\n            this.suggestedTags.push(availableTag);\n            this.suggestedTags.sort();\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  selectedTag(event: MatAutocompleteSelectedEvent): void {\n    this.definition.tags.push(event.option.value);\n    this.updateDefinition();\n    this.tagsCtrl.setValue(null);\n    this.tagsInput.nativeElement.value = '';\n    this.usedSuggestedTags.push(event.option.value);\n    const tagIndex = this.suggestedTags.indexOf(event.option.value);\n    if (tagIndex > -1) {\n      this.suggestedTags.splice(tagIndex, 1);\n    }\n  }\n\n  tagsAutocompleteClosed(): void {\n    this.decreaseOverlayZindex();\n    let autocompleteInputValue = this.tagsCtrl.value;\n    if (autocompleteInputValue != null && autocompleteInputValue !== '') {\n      autocompleteInputValue = autocompleteInputValue.trim();\n      this.addTag(autocompleteInputValue);\n      this.tagsCtrl.setValue(null);\n      this.tagsInput.nativeElement.value = '';\n    }\n  }\n\n  tagsBlurred(): void {\n    if (this.filteredSuggestedTags.length === 0) {\n      let autocompleteInputValue = this.tagsCtrl.value;\n      if (autocompleteInputValue != null && autocompleteInputValue !== '') {\n        autocompleteInputValue = autocompleteInputValue.trim();\n        this.addTag(autocompleteInputValue);\n        this.tagsCtrl.setValue(null);\n        this.tagsInput.nativeElement.value = '';\n      }\n    }\n  }\n\n  increaseOverlayZindex(): void {\n    this.overlayContainer.style.zIndex = '1002';\n  }\n\n  decreaseOverlayZindex(): void {\n    this.overlayContainer.style.zIndex = null;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormDefinitionComponent } from './substance-form-definition.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { SubstanceSelectorModule } from '../../substance-selector/substance-selector.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {RouterModule} from '@angular/router';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport { ElementLabelDisplayModule } from '@gsrs-core/utils/element-label-display.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        DynamicComponentLoaderModule.forChild(SubstanceFormDefinitionComponent),\n        ReactiveFormsModule,\n        FormsModule,\n        MatFormFieldModule,\n        MatSelectModule,\n        MatMenuModule,\n        MatCheckboxModule,\n        MatButtonModule,\n        MatIconModule,\n        SubstanceFormModule,\n        ScrollToModule,\n        SubstanceSelectorModule,\n        MatTooltipModule,\n        RouterModule,\n        MatRadioModule,\n        MatChipsModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        ElementLabelDisplayModule\n    ],\n  declarations: [\n    SubstanceFormDefinitionComponent\n  ]\n})\nexport class SubstanceFormDefinitionModule { }\n"],"sourceRoot":"webpack:///","file":"6558.213ac266ccf8454e.js"}