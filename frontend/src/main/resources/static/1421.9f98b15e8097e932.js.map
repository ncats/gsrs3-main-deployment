{"version":3,"mappings":"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","names":["SubstanceDetailsBaseTableDisplay","gaService","service","o","pageEvent","this","page","pageIndex","pageSize","results","totalRecords","filtered","pageChangeFda","analyticsEventCategory","paged","i","length","push","r","SubstanceCardBaseFilteredList","factory","i0","ctx_r20","ctx_r41","ctx_r43","SubstanceApplicationComponent","router","authService","loadingService","applicationService","generalService","dialog","s","EventEmitter","applicationSearchSortValues","hasAnyRolesAsync","pipe","take","subscribe","n","isAdmin","response","bdnum","getApplicationCenterList","privateSearch","getApplicationBySubstanceKeyCenter","centerListOriginal","centerList","foundCenterList","loadingComplete","$event","textLabel","tab","loadingStatus","index","indexOf","center","slice","fromTable","searchType","setPageEvent","showSpinner","subscription","getApplicationAll","order","privateFacetParams","u","etagAllExport","pagingResponse","etag","total","applicationCount","setResultData","content","countApplicationOut","emit","console","log","unsubscribe","extension","url","getApiExportUrl","getUser","open","ExportDialogComponent","width","data","type","entity","hideOptionButtons","afterClosed","name","id","setLoading","startUserDownload","privateExport","navigate","getAppAllApiExportUrl","getUpdateApplicationUrl","exportUrl","getApplicationListExportUrl","sort","active","orderIndex","displayedColumns","toString","ascDescDir","direction","sortValues","forEach","sortValue","value","selectors","ctx","clinicalTrialSearchSortValues","display","ctx_r18","ctx_r27","ctx_r29","SubstanceClinicalTrialsComponent","clinicalTrialService","configService","loadedComponents","configData","substanceUuid","getSubstanceClinicalTrials","subscriptions","skip","subscriptionClinical","getClinicalTrials","searchTerm","cutoff","facets","clinicalTrialCount","countClinicalTrialOut","getClinicalTrialListExportUrl","ctx_r14","ctx_r23","ctx_r25","SubstanceClinicalTrialsEuropeComponent","getSubstanceClinicalTrialsEurope","clinicalTrialEuCount","countClinicalTrialEuOut","getApiEuropeExportUrl","cteu","_","clinicalTrialEuropeMeddraList","join","ctx_r16","SubstanceAdverseEventPtComponent","adverseEventService","adverseEventPtSearchSortValues","rolesSubscription","getAdverseEventPt","getFaersDashboardUrl","getFaersDashboardRecordByName","adverseEventPtListExportUrl","getAdverseEventShinyConfig","adverseEventCount","countAdvPtOut","getAdverseEventPtListExportUrl","getApiExportUrlPt","faersNameSubscription","substanceName","FAERSDashboardSubstanceName","FAERSDashboardAdverseEventUrl","FAERSDashboardReactionTerm","FAERSDashboardSearchTerm","adverseEventShinySubstanceNameDisplay","JSON","parse","adverseEventShinySubstanceNameURL","adverseEventShinySubstanceNameURLWithParam","decodeURIComponent","adverseEventShinyAdverseEventDisplay","adverseEventShinyAdverseEventURL","adverseEventShinyAdverseEventURLWithParam","result","SubstanceAdverseEventDmeComponent","l","adverseEventDmeSearchSortValues","getAdverseEventDme","adverseEventDmeListExportUrl","countAdvDmeOut","getApiExportUrlDme","getAdverseEventDmeListExportUrl","ctx_r12","SubstanceAdverseEventCvmComponent","adverseEventCvmSearchSortValues","getAdverseEventCvm","adverseEventCvmListExportUrl","countAdvCvmOut","getApiExportUrlCvm","getAdverseEventCvmListExportUrl","impuritiesSearchSortValues","SubstanceImpuritiesComponent","impuritiesService","getImpuritiesBySubstanceUuid","impuritiesListExportUrl","privateSearchTerm","searchImpurities","impurities","impuritiesCount","countImpuritiesOut","loadImpuritiesTestDetails","totalImpurities","element","impuritiesSubstanceList","elementSub","indexSub","_parentSubstanceName","_parentSubstanceUuid","impuritiesTestList","elementTest","indexTest","impuritiesDetailsList","elementDetail","indexDetail","relatedSubstanceUuid","subSubscription","getSubstanceNamesBySubstanceUuid","substanceNames","names","displayName","preferredTerm","getImpuritiesListExportUrl","ctx_r33","ctx_r74","ctx_r76","ctx_r77","ctx_r79","ctx_r81","ctx_r83","ctx_r85","ctx_r87","ctx_r89","ctx_r91","SubstanceProductsComponent","productService","productSearchSortValues","substance","uuid","getSubstanceKey","getProductProvenanceList","getSubstanceProducts","baseDomain","apiUrlDomain","advPtCount","advDmeCount","advCvmCount","_name","codes","codeSystem","code","provenanceList","foundProvenanceList","getProducts","productCount","provenance","SubstanceProductsModule","C","CommonModule","DynamicComponentLoaderModule","MatTableModule","CdkTableModule","MatPaginatorModule","MatSortModule","MatInputModule","MatTabsModule","MatButtonModule","MatIconModule","MatProgressSpinnerModule","ReactiveFormsModule","FormsModule","RouterModule"],"sources":["./src/app/fda/substance-details/substance-products/substance-details-base-table-display.ts","./src/app/fda/substance-details/substance-products/substance-application/substance-application.component.html","./src/app/fda/substance-details/substance-products/substance-application/substance-application.component.ts","./src/app/fda/clinical-trials/clinical-trial-search-sort-values.ts","./src/app/fda/substance-details/substance-products/substance-clinical-trials/substance-clinical-trials.component.html","./src/app/fda/substance-details/substance-products/substance-clinical-trials/substance-clinical-trials.component.ts","./src/app/fda/substance-details/substance-products/substance-clinical-trials-eu/substance-clinical-trials-eu.component.html","./src/app/fda/substance-details/substance-products/substance-clinical-trials-eu/substance-clinical-trials-eu.component.ts","./src/app/fda/substance-details/substance-products/substance-adverseevent/adverseeventpt/substance-adverseeventpt.component.html","./src/app/fda/substance-details/substance-products/substance-adverseevent/adverseeventpt/substance-adverseeventpt.component.ts","./src/app/fda/substance-details/substance-products/substance-adverseevent/adverseeventdme/substance-adverseeventdme.component.html","./src/app/fda/substance-details/substance-products/substance-adverseevent/adverseeventdme/substance-adverseeventdme.component.ts","./src/app/fda/substance-details/substance-products/substance-adverseevent/adverseeventcvm/substance-adverseeventcvm.component.html","./src/app/fda/substance-details/substance-products/substance-adverseevent/adverseeventcvm/substance-adverseeventcvm.component.ts","./src/app/fda/impurities/impurities-search-sort-values.ts","./src/app/fda/substance-details/substance-products/substance-impurities/substance-impurities.component.html","./src/app/fda/substance-details/substance-products/substance-impurities/substance-impurities.component.ts","./src/app/fda/substance-details/substance-products/substance-products.component.html","./src/app/fda/substance-details/substance-products/substance-products.component.ts","./src/app/fda/substance-details/substance-products/substance-products.module.ts"],"sourcesContent":["import { Component, OnInit, Input, Injectable } from '@angular/core';\nimport { PageEvent } from '@angular/material/paginator';\nimport { FormControl } from '@angular/forms';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\n\n@Injectable()\nexport class SubstanceDetailsBaseTableDisplay extends SubstanceCardBaseFilteredList<any> implements OnInit {\n\n  totalRecords: 0;\n  public results: Array<any> = [];\n  isAdmin = false;\n  exportUrl: string;\n\n  @Input() bdnum: string;\n\n  constructor(\n    public gaService: GoogleAnalyticsService,\n    private service\n  ) {\n      super(gaService);\n     // this.service = service;\n    }\n\n  ngOnInit(): void {\n  }\n\n  setPageEvent(pageEvent?: PageEvent): void {\n    if (pageEvent != null) {\n      this.page = pageEvent.pageIndex;\n      this.pageSize = pageEvent.pageSize;\n    }\n  }\n\n  setResultData(results: Array<any>, totalRecords?: number): void {\n    this.results = results;\n    this.filtered = results;\n    this.totalRecords = this.service.totalRecords;\n    this.pageChangeFda();\n  }\n\n  pageChangeFda(pageEvent?: PageEvent, analyticsEventCategory?: string): void {\n    if (pageEvent != null) {\n\n      /*\n      let eventAction;\n      let eventValue;\n\n      if (this.pageSize !== pageEvent.pageSize) {\n          eventAction = 'select:page-size';\n          eventValue = pageEvent.pageSize;\n      } else if (this.page !== pageEvent.pageIndex) {\n          eventAction = 'icon-button:page-number';\n          eventValue = pageEvent.pageIndex + 1;\n      }\n\n      this.gaService.sendEvent(analyticsEventCategory, eventAction, 'pager', eventValue);\n      */\n\n     // this.page = pageEvent.pageIndex;\n     // this.pageSize = pageEvent.pageSize;\n    }\n\n    this.paged = [];\n\n    if (this.filtered) {\n     for (let i = 0; i < this.filtered.length; i++) {\n       if (this.filtered[i] != null) {\n          this.paged.push(this.filtered[i]);\n       } else {\n          break;\n       }\n     }\n    }\n  }\n\n}\n","<div *ngIf=\"(loadingComplete === true && foundCenterList === false && applicationCount === 0)\">\n  <br>\n  <div class=\"padleft25px colorblue\"><b>No Application Found</b></div>\n  <br>\n</div>\n\n<mat-tab-group (selectedTabChange)=\"applicationTabSelected($event)\">\n  <mat-tab label=\"{{appCenter}}\" *ngFor=\"let appCenter of centerList; let index = index\">\n\n    <div class=\"padtop5px padleft25px font15px colorblue\">\n      <b> {{appCenter}}</b>\n      &nbsp;&nbsp;&nbsp;\n      <span class=\"colorred\">{{loadingStatus}}</span>\n      &nbsp;&nbsp;&nbsp;\n      <!-- Export Button -->\n      <span class=\"export\" *ngIf=\"isAdmin && totalRecords > 0\">\n        <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\"\n          class=\"mat-button export-button mat-raised-button\">\n          <mat-icon svgIcon=\"get_app\"></mat-icon> Export All Applications\n        </button>\n      </span>\n\n      <!--\n      <a [href]=\"exportUrl\" target=\"_blank\" matTooltip='ApplicationRecords' *ngIf=\"totalRecords > 0\">\n        <button mat-icon-button color=\"primary\">\n          <mat-icon>arrow_downward</mat-icon>Export All Applications\n        </button>\n      </a>\n      -->\n    </div>\n\n    <div class=\"responsive mat-table-style\">\n\n      <!-- Spinner -->\n      <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n        <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n        </mat-progress-spinner>\n      </div>\n\n      <table mat-table [dataSource]=\"paged\" class=\"font12px\" matSort (matSortChange)=\"sortData($event)\"\n      matSortActive=\"ptCount\" matSortDirection=\"desc\" matSortDisableClear>\n        <ng-container matColumnDef=\"appType\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Application Type </th>\n          <td mat-cell *matCellDef=\"let application\">\n            <span *ngIf=\"(application.fromTable && application.fromTable === 'GSRS')\">\n            <a [routerLink]=\"['/application', application.id]\" target=\"_blank\">{{application.appType}}</a>\n            &nbsp;&nbsp;\n            <a [routerLink]=\"['/application', application.id, 'edit']\" target=\"_blank\" *ngIf=\"isAdmin\"\n              matTooltip='Edit GSRS Application Record'>\n              <mat-icon svgIcon=\"edit\"></mat-icon>\n            </a>\n            </span>\n            <span *ngIf=\"application.fromTable && application.fromTable !== 'GSRS'\">\n              <a [routerLink]=\"['/application-darrts', application.appType, application.appNumber]\"\n                target=\"_blank\">{{application.appType}}</a>\n              <br><span class=\"font10px colorgray\">(Integrity)</span>\n            </span>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"appNumber\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Application Number </th>\n          <td mat-cell *matCellDef=\"let application\"> {{application.appNumber}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"productName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Product Name </th>\n          <td mat-cell *matCellDef=\"let application\">\n\n            <div *ngFor=\"let prod of application.applicationProductList; let i = index\">\n              <!-- Product Names-->\n              <div class=\"row\" *ngFor=\"let prodName of prod.applicationProductNameList; let i = index\">\n                {{prodName.productName}}\n              </div>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"sponsorName\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Sponsor Name </th>\n          <td mat-cell *matCellDef=\"let application\"> {{application.sponsorName}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"appStatus\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Application Status </th>\n          <td mat-cell *matCellDef=\"let application\"> {{application.appStatus}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"applicationSubType\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Application Sub Type </th>\n          <td mat-cell *matCellDef=\"let application\"> {{application.appSubType}} </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n    </div>\n    <mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n      (page)=\"getApplicationBySubstanceKeyCenter($event)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n    </mat-paginator>\n  </mat-tab>\n</mat-tab-group>\n\n<!--\n</div>\n<ng-template #nocenter>\n  <br>\n  <div class=\"padleft25px colorblue\"><b>No Application Found</b></div>\n  <br>\n</ng-template>\n-->","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PageEvent } from '@angular/material/paginator';\nimport { take } from 'rxjs/operators';\nimport { Sort } from '@angular/material/sort';\nimport { AuthService } from '@gsrs-core/auth';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { ApplicationService } from '../../../application/service/application.service';\nimport { GeneralService } from '../../../service/general.service';\nimport { Application } from '../../../application/model/application.model';\nimport { SubstanceDetailsBaseTableDisplay } from '../../substance-products/substance-details-base-table-display';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { applicationSearchSortValues } from '../../../application/applications-browse/application-search-sort-values';\n\n@Component({\n  selector: 'app-substance-application',\n  templateUrl: './substance-application.component.html',\n  styleUrls: ['./substance-application.component.scss']\n})\n\nexport class SubstanceApplicationComponent extends SubstanceDetailsBaseTableDisplay implements OnInit {\n  application: any;\n  applicationCount = 0;\n  totalApplication = 0;\n  centerList: Array<String> = [];\n  centerListOriginal: Array<String> = [];\n  center = '';\n  fromTable = '';\n  loadingStatus = '';\n  showSpinner = false;\n  foundCenterList = false;\n  loadingComplete = false;\n  // result: any;\n  public privateSearch?: string;\n  private privateFacetParams: FacetParam;\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  etagAllExport = '';\n  @Input() bdnum: string;\n  @Output() countApplicationOut: EventEmitter<number> = new EventEmitter<number>();\n  public sortValues = applicationSearchSortValues;\n  order = '$root_appNumber';\n  ascDescDir = 'desc';\n  displayedColumns: string[] = [\n    'appType',\n    'appNumber',\n    'productName',\n    'sponsorName',\n    'appStatus',\n    'applicationSubType'\n  ];\n\n  constructor(\n    private router: Router,\n    public authService: AuthService,\n    private loadingService: LoadingService,\n    public gaService: GoogleAnalyticsService,\n    private applicationService: ApplicationService,\n    private generalService: GeneralService,\n    private dialog: MatDialog\n  ) {\n    super(gaService, applicationService);\n  }\n\n  ngOnInit() {\n    this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').pipe(take(1)).subscribe(response => {\n      this.isAdmin = response;\n    });\n\n    if (this.bdnum) {\n      this.getApplicationCenterList();\n\n      this.privateSearch = 'root_applicationProductList_applicationIngredientList_substanceKey:'\n        + this.bdnum;\n      this.getApplicationBySubstanceKeyCenter(null, 'initial');\n    }\n  }\n\n  getApplicationCenterList(): void {\n    this.applicationService.getApplicationCenterList(this.bdnum).subscribe(results => {\n      this.centerListOriginal = results;\n      this.centerList = results;\n      if (this.centerList && this.centerList.length > 0) {\n        this.foundCenterList = true;\n\n        // Replace 'Darrts' to 'Integrity' and 'SRS' to 'GSRS'\n        /* this.centerList.forEach((cent, index) => {\n          if (cent != null) {\n            let centerReplace = '';\n            if (cent.indexOf('Darrts') > 0) {\n              centerReplace = cent.replace('Darrts', 'Integrity');\n            } else if (cent.indexOf('SRS') > 0) {\n              centerReplace = cent.replace('SRS', 'GSRS');\n            }\n\n            if (centerReplace.length > 0) {\n              this.centerList[index] = centerReplace;\n            }\n          }\n        }); */\n      }\n      this.loadingComplete = true;\n    });\n  }\n\n  applicationTabSelected($event) {\n    if ($event) {\n      const evt: any = $event.tab;\n      const textLabel: string = evt.textLabel;\n      // Get Center and fromTable/Source from Tab Label\n      if (textLabel != null) {\n        this.loadingStatus = 'Loading data...';\n        const index = textLabel.indexOf(' ');\n        this.center = textLabel.slice(0, index);\n        this.fromTable = textLabel.slice(index + 1, textLabel.length);\n\n        //let fromReplace = '';\n        /*\n        if (this.fromTable.indexOf('Integrity') >= 0) {\n          fromReplace = this.fromTable.replace('Integrity', 'Darrts');\n        } else if (this.fromTable.indexOf('GSRS') >= 0) {\n          fromReplace = this.fromTable.replace('GSRS', 'SRS');\n        }\n        if (fromReplace && fromReplace.length > 0) {\n          this.fromTable = fromReplace;\n        }\n        */\n      }\n\n      // set the current result data to empty or null.\n      this.paged = [];\n\n      this.privateSearch = 'root_applicationProductList_applicationIngredientList_substanceKey:'\n        + this.bdnum + ' AND root_center:' + this.center + ' AND root_fromTable: ' + this.fromTable;\n\n      this.getApplicationBySubstanceKeyCenter();\n    }\n  }\n\n  // GSRS 3.0\n  getApplicationBySubstanceKeyCenter(pageEvent?: PageEvent, searchType?: string) {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n    const skip = this.page * this.pageSize;\n\n    // if (searchType && searchType === 'initial') {\n    //    this.pageSize = 100;\n    //  }\n    const subscription = this.applicationService.getApplicationAll(\n      this.order,\n      skip,\n      this.pageSize,\n      this.privateSearch,\n      this.privateFacetParams\n    )\n      .subscribe(pagingResponse => {\n        if (searchType && searchType === 'initial') {\n          this.etagAllExport = pagingResponse.etag;\n        } else {\n          this.applicationService.totalRecords = pagingResponse.total;\n          this.applicationCount = pagingResponse.total;\n\n          this.setResultData(pagingResponse.content);\n\n          this.etag = pagingResponse.etag;\n          this.countApplicationOut.emit(this.applicationCount);\n        }\n      }, error => {\n        this.showSpinner = false;  // Stop progress spinner\n        console.log('error');\n      }, () => {\n        this.showSpinner = false;  // Stop progress spinner\n        subscription.unsubscribe();\n      });\n    this.loadingStatus = '';\n    // this.showSpinner = false;  // Stop progress spinner\n  }\n\n  /*\n  getSubstanceApplications(pageEvent ?: PageEvent): void {\n    this.setPageEvent(pageEvent);\n\n    this.showSpinner = true;  // Start progress spinner\n    this.applicationService.getSubstanceApplications(this.bdnum, this.center, this.fromTable, this.page, this.pageSize)\n      .subscribe(results => {\n        this.setResultData(results);\n        this.applicationCount = this.totalRecords;\n        this.countApplicationOut.emit(this.applicationCount);\n        this.loadingStatus = '';\n        this.showSpinner = false;  // Stop progress spinner\n      });\n  */\n  /*\n      this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.clinicaltrials, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.countUpdate.emit(clinicaltrials.length);\n    });\n\n}\n*/\n\n  export() {\n    if (this.etagAllExport) {\n      const extension = 'xlsx';\n      const url = this.getApiExportUrl(this.etagAllExport, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n          // height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceApplication', 'entity': 'applications', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n              // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.applicationCount\n                }\n              };\n              const params = { 'total': this.applicationCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.applicationService.getAppAllApiExportUrl(etag, extension);\n  }\n\n  get updateApplicationUrl(): string {\n    return this.applicationService.getUpdateApplicationUrl();\n  }\n\n  applicationListExportUrl() {\n    if (this.bdnum != null) {\n      this.exportUrl = this.applicationService.getApplicationListExportUrl(this.bdnum);\n    }\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      // Get Sort Values from applicationSearchSortValues\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getApplicationBySubstanceKeyCenter();\n    }\n    return;\n  }\n}\n","export const clinicalTrialSearchSortValues = [\n  {\n    'value': 'default',\n    'display': 'Relevance'\n  },\n  {\n    'value': '^root_trialNumber',\n    'display': 'NCT Number, Ascending',\n    'displayedColumns': 'trialNumber',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_trialNumber',\n    'display': 'NCT Number, Descending',\n    'displayedColumns': 'trialNumber',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_title',\n    'display': 'Title, Ascending',\n    'displayedColumns': 'title',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_title',\n    'display': 'Title, Descending',\n    'displayedColumns': 'title',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_sponsor',\n    'display': 'Sponsor Name, Ascending',\n    'displayedColumns': 'sponsor',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_sponsor',\n    'display': 'Sponsor Name, Descending',\n    'displayedColumns': 'sponsor',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_sponsorName',\n    'display': 'Sponsor Name, Ascending',\n    'displayedColumns': 'sponsorName',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_sponsorName',\n    'display': 'Sponsor Name, Descending',\n    'displayedColumns': 'sponsorName',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_conditions',\n    'display': 'Conditions, Ascending',\n    'displayedColumns': 'conditions',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_conditions',\n    'display': 'Conditions, Descending',\n    'displayedColumns': 'conditions',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_clinicalTrialEuropeMeddraList_meddraTerm',\n    'display': 'Conditions, Ascending',\n    'displayedColumns': 'conditionsEU',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_clinicalTrialEuropeMeddraList_meddraTerm',\n    'display': 'Conditions, Descending',\n    'displayedColumns': 'conditionsEU',\n    'direction': 'desc'\n  }\n];\n","<div *ngIf=\"!clinicalTrialCount\" class=\"padtop5px padleft25px font15px colorblue\">\n  <b>No Clinical Trial US Found</b>\n</div>\n\n<div *ngIf=\"clinicalTrialCount && clinicalTrialCount>0\">\n  <div class=\"padtop5px padleft25px font15px colorblue\">\n    <b>Clinical Trials US</b>\n    &nbsp;&nbsp;&nbsp;\n  </div>\n  <div>\n  <!-- Export Button -->\n  <span class=\"export\" *ngIf=\"isAdmin\" >\n    <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\" class=\"mat-button export-button mat-raised-button\">\n      <mat-icon svgIcon=\"get_app\"></mat-icon> Export CTs\n    </button>\n  </span>\n</div>\n\n<div class=\"responsive mat-table-style\">\n  <!-- Spinner -->\n  <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n    <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n    </mat-progress-spinner>\n  </div>\n\n  <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\"\n  matSortActive=\"nctNumber\" matSortDirection=\"desc\" matSortDisableClear>\n\n    <ng-container matColumnDef=\"edit\">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef=\"let clinical\">\n        <a class=\"clinical-trials-browse-edit1\" target=\"_blank\" title=\"Edit in new tab\" [href]=\"'edit-clinical-trial/' + clinical.trialNumber\">\n          <mat-icon style=\"width: 20px;  height: 20px;\" svgIcon=\"edit\"></mat-icon>\n        </a>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"trialNumber\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Trial Number</th>\n      <td mat-cell *matCellDef=\"let clinical\">\n\n        <a target=\"_blank\" title=\"see clinicaltrials.gov\" [href]=\"'https://clinicaltrials.gov/ct2/show/' + clinical.trialNumber\">{{clinical.trialNumber}}</a>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"title\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Title </th>\n      <td mat-cell *matCellDef=\"let clinical\"> {{clinical.title}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"sponsor\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Sponsor Name </th>\n      <td mat-cell *matCellDef=\"let clinical\"> {{clinical.sponsor}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"conditions\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Conditions </th>\n      <td mat-cell *matCellDef=\"let clinical\"> {{clinical.conditions}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"outcomemeasures\">\n      <th mat-header-cell *matHeaderCellDef> Outcome Measures </th>\n      <td mat-cell *matCellDef=\"let clinical\"> {{clinical.outcomeMeasures}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n\n<mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"getSubstanceClinicalTrials($event)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { ClinicalTrialService } from '../../../clinical-trials/clinical-trial/clinical-trial.service';\nimport { SubstanceDetailsBaseTableDisplay } from '../../substance-products/substance-details-base-table-display';\nimport { PageEvent } from '@angular/material/paginator';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { Sort } from '@angular/material/sort';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { Subscription, Observable, Subject } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AuthService } from '@gsrs-core/auth';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { ConfigService, LoadedComponents } from '@gsrs-core/config';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { take } from 'rxjs/operators';\nimport { clinicalTrialSearchSortValues } from '../../../clinical-trials/clinical-trial-search-sort-values';\n\n@Component({\n  selector: 'app-substance-clinical-trials',\n  templateUrl: './substance-clinical-trials.component.html',\n  styleUrls: ['./substance-clinical-trials.component.scss']\n})\n\nexport class SubstanceClinicalTrialsComponent extends SubstanceDetailsBaseTableDisplay implements OnInit {\n\n  private privateFacetParams: FacetParam;\n  clinicalTrialCount = 0;\n  showSpinner = false;\n  private subscriptions: Array<Subscription> = [];\n\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  etagAllExport = '';\n  loadedComponents: LoadedComponents;\n  loadingStatus = '';\n  public sortValues = clinicalTrialSearchSortValues;\n  order = '$root_trialNumber';\n  ascDescDir = 'desc';\n\n  @Input() substanceUuid: string;\n  @Output() countClinicalTrialOut: EventEmitter<number> = new EventEmitter<number>();\n\n  displayedColumns: string[] = [\n    'edit',\n    'trialNumber',\n    'title',\n    'sponsor',\n    'conditions',\n    'outcomemeasures'\n  ];\n\n  constructor(\n    public gaService: GoogleAnalyticsService,\n    private clinicalTrialService: ClinicalTrialService,\n    private configService: ConfigService,\n    public authService: AuthService,\n    private loadingService: LoadingService,\n    private router: Router,\n    private dialog: MatDialog\n  ) {\n    super(gaService, clinicalTrialService);\n  }\n\n  ngOnInit() {\n    this.loadedComponents = this.configService.configData.loadedComponents || null;\n    this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').pipe(take(1)).subscribe(response => {\n      this.isAdmin = response;\n    });\n    if (this.substanceUuid) {\n     this.getSubstanceClinicalTrials(null, 'initial');\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getSubstanceClinicalTrials(pageEvent?: PageEvent, searchType?: string): void {\n    this.setPageEvent(pageEvent);\n    const skip = this.page * this.pageSize;\n    this.showSpinner = true;  // Start progress spinner\n    const subscriptionClinical = this.clinicalTrialService.getClinicalTrials({\n      searchTerm: this.substanceUuid,\n      cutoff: null,\n      type: \"substanceKey\",\n      order: this.order,\n      pageSize: this.pageSize,\n      facets: this.privateFacetParams,\n      skip: skip\n    })\n      .subscribe(pagingResponse => {\n        if (searchType && searchType === 'initial') {\n          this.etagAllExport = pagingResponse.etag;\n        }\n        // AW removed else clause so this runs every time.\n        // This makes it work, but AW might need to understand the\n        // intention better.\n        // else {\n        this.clinicalTrialService.totalRecords = pagingResponse.total;\n        this.setResultData(pagingResponse.content);\n        this.clinicalTrialCount = pagingResponse.total;\n        this.etag = pagingResponse.etag;\n        // }\n\n        this.countClinicalTrialOut.emit(this.clinicalTrialCount);\n        this.showSpinner = false;  // Stop progress spinner\n      });\n\n    /*\n        this.searchControl.valueChanges.subscribe(value => {\n          this.filterList(value, this.clinicaltrials, this.analyticsEventCategory);\n        }, error => {\n          console.log(error);\n        });\n        this.countUpdate.emit(clinicaltrials.length);\n      });\n      */\n     this.subscriptions.push(subscriptionClinical);\n  }\n\n\n  export() {\n    if (this.etagAllExport) {\n      const extension = 'ctus.xlsx';\n      const url = this.getApiExportUrl(this.etagAllExport, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n         // height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceClinicalTrialUS', 'entity': 'clinicaltrialsus', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n           // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.clinicalTrialCount\n                }\n              };\n              const params = { 'total': this.clinicalTrialCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.clinicalTrialService.getApiExportUrl(etag, extension);\n  }\n\n\n\n  clinicalTrialListExportUrl() {\n    if (this.substanceUuid != null) {\n      this.exportUrl = this.clinicalTrialService.getClinicalTrialListExportUrl(this.substanceUuid);\n    }\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getSubstanceClinicalTrials();\n    }\n    return;\n  }\n\n  /*\n  // copied from products but has no effect. Make approaoch uniform in future.\n  tabSelected($event) {\n    if ($event) {\n      console.log(\"EVENT\");\n      const evt: any = $event.tab;\n      const textLabel: string = evt.textLabel;\n      if (textLabel != null) {\n        this.loadingStatus = 'Loading data...';\n        this.paged = [];\n        this.getSubstanceClinicalTrials();\n      }\n\n    }\n  }\n*/\n\n}\n","<div *ngIf=\"!clinicalTrialEuCount\" class=\"padtop5px padleft25px font15px colorblue\">\n  <b>No Clinical Trial Europe Found</b>\n</div>\n\n<div *ngIf=\"clinicalTrialEuCount && clinicalTrialEuCount>0\">\n  <div class=\"padtop5px padleft25px font15px colorblue\">\n    <b>Clinical Trials Europe</b>\n    &nbsp;&nbsp;&nbsp;\n  </div>\n  <div>\n  <!-- Export Button -->\n  <span class=\"export\" *ngIf=\"isAdmin\" >\n    <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\" class=\"mat-button export-button mat-raised-button\">\n      <mat-icon svgIcon=\"get_app\"></mat-icon> Export CTs\n    </button>\n  </span>\n</div>\n\n<div class=\"responsive mat-table-style\">\n  <!-- Spinner -->\n  <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n    <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n    </mat-progress-spinner>\n  </div>\n\n  <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\"\n  matSortActive=\"trialNumber\" matSortDirection=\"desc\" matSortDisableClear>\n\n    <ng-container  matColumnDef=\"trialNumber\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Eudract Number</th>\n      <td mat-cell *matCellDef=\"let clinical\">\n        <div *ngIf=\"clinical.trialNumber\">\n          <a href=\"{{clinical.url}}\">{{clinical.trialNumber}}</a>\n        </div>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"title\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Title </th>\n      <td mat-cell *matCellDef=\"let clinical\"> {{clinical.title}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"sponsorName\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Sponsor Name </th>\n      <td mat-cell *matCellDef=\"let clinical\"> {{clinical.sponsorName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"conditionsEU\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Conditions</th>\n      <td mat-cell *matCellDef=\"let clinical\">{{joinMeddraTerms(clinical)}}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n\n<mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"getSubstanceClinicalTrialsEurope($event)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { ClinicalTrialService } from '../../../clinical-trials/clinical-trial/clinical-trial.service';\nimport { SubstanceDetailsBaseTableDisplay } from '../../substance-products/substance-details-base-table-display';\nimport { PageEvent } from '@angular/material/paginator';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { Sort } from '@angular/material/sort';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { Subscription, Observable, Subject } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AuthService } from '@gsrs-core/auth';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { ConfigService, LoadedComponents } from '@gsrs-core/config';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { take } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport { clinicalTrialSearchSortValues } from '../../../clinical-trials/clinical-trial-search-sort-values';\n\n@Component({\n  selector: 'app-substance-clinical-trials-eu',\n  templateUrl: './substance-clinical-trials-eu.component.html',\n  styleUrls: ['./substance-clinical-trials-eu.component.scss']\n})\n\nexport class SubstanceClinicalTrialsEuropeComponent extends SubstanceDetailsBaseTableDisplay implements OnInit {\n  private privateFacetParams: FacetParam;\n  clinicalTrialEuCount = 0;\n  showSpinner = false;\n  private subscriptions: Array<Subscription> = [];\n\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  etagAllExport = '';\n  loadedComponents: LoadedComponents;\n  loadingStatus = '';\n  public sortValues = clinicalTrialSearchSortValues;\n  order = '$root_trialNumber';\n  ascDescDir = 'desc';\n\n  @Input() substanceUuid: string;\n  @Output() countClinicalTrialEuOut: EventEmitter<number> = new EventEmitter<number>();\n\n  displayedColumns: string[] = [\n    'trialNumber',\n    'title',\n    'sponsorName',\n    'conditionsEU'\n  ];\n\n  constructor(\n    public gaService: GoogleAnalyticsService,\n    private clinicalTrialService: ClinicalTrialService,\n    private configService: ConfigService,\n    public authService: AuthService,\n    private loadingService: LoadingService,\n    private router: Router,\n    private dialog: MatDialog\n  ) {\n    super(gaService, clinicalTrialService);\n  }\n\n  ngOnInit() {\n    this.loadedComponents = this.configService.configData.loadedComponents || null;\n    this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').pipe(take(1)).subscribe(response => {\n      this.isAdmin = response;\n    });\n    if (this.substanceUuid) {\n     this.getSubstanceClinicalTrialsEurope(null, 'initial');\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getSubstanceClinicalTrialsEurope(pageEvent?: PageEvent, searchType?: string): void {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n\n    const subscriptionClinical = this.clinicalTrialService.getSubstanceClinicalTrialsEurope(\n      this.substanceUuid,\n      this.page,\n      this.pageSize,\n      this.order\n    )\n      .subscribe(pagingResponse => {\n        if (searchType && searchType === 'initial') {\n          this.etagAllExport = pagingResponse['etag'];\n        }\n        this.setResultData(pagingResponse['content']);\n        this.clinicalTrialEuCount = pagingResponse['total'];\n        this.countClinicalTrialEuOut.emit(this.clinicalTrialEuCount);\n        this.showSpinner = false;  // Stop progress spinner\n      });\n    /*\n        this.searchControl.valueChanges.subscribe(value => {\n          this.filterList(value, this.clinicaltrials, this.analyticsEventCategory);\n        }, error => {\n          console.log(error);\n        });\n        this.countUpdate.emit(clinicaltrials.length);\n      });\n      */\n     this.subscriptions.push(subscriptionClinical);\n  }\n\n\n  export() {\n    if (this.etagAllExport) {\n      const extension = 'cteu.xlsx';\n      const url = this.getApiExportUrl(this.etagAllExport, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n        //  height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceClinicalTrialEU', 'entity' : 'clinicaltrialseurope', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n          //  this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.clinicalTrialEuCount\n                }\n              };\n              const params = { 'total': this.clinicalTrialEuCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.clinicalTrialService.getApiEuropeExportUrl(etag, extension);\n  }\n\n\n// delete this?\n//  clinicalTrialListExportUrl() {\n//    if (this.substanceUuid != null) {\n//      this.exportUrl = this.clinicalTrialService.getClinicalTrialEuropeListExportUrl(this.substanceUuid);\n//    }\n//  }\n\n  /*\n  // copied from products but has no effect. Make approaoch uniform in future.\n  tabSelected($event) {\n    if ($event) {\n      console.log(\"EVENT\");\n      const evt: any = $event.tab;\n      const textLabel: string = evt.textLabel;\n      if (textLabel != null) {\n        this.loadingStatus = 'Loading data...';\n        this.paged = [];\n        this.getSubstanceClinicalTrials();\n      }\n\n  */\n  joinMeddraTerms(cteu: any) {\n    if(cteu) {\n      // const a =[{\"meddraTerm\": \"meddraTerm1\"}, {\"meddraTerm\": \"meddraTerm2\"},{\"meddraTerm\": \"meddraTerm3\"},{\"meddraTerm\": \"meddraTerm4\"}];\n      return _.map(cteu.clinicalTrialEuropeMeddraList, 'meddraTerm').join(\"|\");\n    }\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getSubstanceClinicalTrialsEurope();\n    }\n    return;\n  }\n}","<div class=\"padtop5px padleft25px font15px colorblue\">\n\n  <div class=\"divflex\">\n    <div class=\"padtop10px\">\n      <b>Adverse Event PT</b>\n    </div>\n    <div class=\"marginleft50px padleft25px padtopneg50px width120px\" *ngIf=\"totalRecords > 0\">\n      <!--\n      <a [href]=\"exportUrl\" target=\"_blank\" matTooltip='Adverse Event PT Records'>\n        <button mat-icon-button color=\"primary\">\n          <mat-icon>arrow_downward</mat-icon>Export\n        </button>\n      </a>\n      -->\n      <!-- Export Button -->\n      <span class=\"export\" *ngIf=\"isAdmin && adverseEventCount > 0\">\n        <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\"\n          class=\"mat-button export-button mat-raised-button\">\n          <mat-icon svgIcon=\"get_app\"></mat-icon> Export\n        </button>\n      </span>\n    </div>\n    <div class=\"marginleft50px padleft25px width200px\" *ngIf=\"adverseEventShinySubstanceNameDisplay === true\">\n      <a href=\"{{adverseEventShinySubstanceNameURLWithParam}}\" target=\"_blank\">\n        <button mat-icon-button color=\"accent\" aria-label=\"Analysis by Substance Name on Shiny Server\">\n          <mat-icon>analytics</mat-icon><span class=\"colororange\">Analysis by Substance</span>\n        </button>\n      </a>\n    </div>\n  </div>\n\n  <div class=\"responsive mat-table-style\">\n\n    <!-- SPINNER -->\n    <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n      <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n      </mat-progress-spinner>\n    </div>\n\n    <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\" matSortActive=\"ptCount\"\n      matSortDirection=\"desc\" matSortDisableClear>\n\n      <ng-container matColumnDef=\"ptTerm\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> PT Term </th>\n        <td mat-cell *matCellDef=\"let adverse\">\n          {{adverse.ptTerm}}\n          <span class=\"\" *ngIf=\"adverseEventShinyAdverseEventDisplay === true\">\n            <a href=\"{{adverseEventShinyAdverseEventURLWithParam}}{{getDecodeURL(adverse.ptTerm)}}\" target=\"_blank\"\n              title=\"Analysis by Adverse Event/PT Term on Shiny Server\">\n              <mat-icon>analytics</mat-icon>\n            </a>\n          </span>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"primSoc\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Prim SOC </th>\n        <td mat-cell *matCellDef=\"let adverse\"> {{adverse.primSoc}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"caseCount\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Case Count </th>\n        <td mat-cell *matCellDef=\"let adverse\"> {{adverse.caseCount}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"ptCount\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> PT Count </th>\n        <td mat-cell *matCellDef=\"let adverse\">\n          <div *ngIf=\"FAERSDashboardAdverseEventUrl; else noFaersLink\">\n            <a href=\"{{FAERSDashboardAdverseEventUrl}}{{getDecodeURL(adverse.ptTerm | titlecase)}}{{FAERSDashboardReactionGroup}}{{getDecodeURL(adverse.primSoc | titlecase)}}\"\n              target=\"_blank\" title=\"FAERS Public Dashboard\">\n              <div [innerHTML]=\"adverse.ptCount\"></div>\n            </a>\n            <span class=\"colorgray font10px\">FAERS Public Dashboard</span>\n          </div>\n          <ng-template #noFaersLink>\n            <div [innerHTML]=\"adverse.ptCount\"></div>\n          </ng-template>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"prr\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> PRR </th>\n        <td mat-cell *matCellDef=\"let adverse\"> {{adverse.prr | number : '.2-2'}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n  </div>\n  <mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"getAdverseEventPt($event)\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>","import { Component, OnInit, OnDestroy, Output, EventEmitter, Input } from '@angular/core';\nimport { TitleCasePipe } from '@angular/common';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { PageEvent } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { AdverseEventService } from '../../../../adverse-event/service/adverseevent.service';\nimport { SubstanceDetailsBaseTableDisplay } from '../../../substance-products/substance-details-base-table-display';\nimport { Sort } from '@angular/material/sort';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { ConfigService } from '@gsrs-core/config';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { AuthService } from '@gsrs-core/auth';\nimport { Subscription } from 'rxjs';\nimport { adverseEventPtSearchSortValues } from '../../../../adverse-event/adverse-events-pt-browse/adverse-events-pt-search-sort-values';\n\n@Component({\n  selector: 'app-substance-adverseeventpt',\n  templateUrl: './substance-adverseeventpt.component.html',\n  styleUrls: ['./substance-adverseeventpt.component.scss']\n})\n\nexport class SubstanceAdverseEventPtComponent extends SubstanceDetailsBaseTableDisplay implements OnInit, OnDestroy {\n  @Input() bdnum: string;\n  @Input() substanceName: string;\n  @Output() countAdvPtOut: EventEmitter<number> = new EventEmitter<number>();\n\n  adverseEventCount = 0;\n  order = '$root_ptCount';\n  ascDescDir = 'desc';\n  showSpinner = false;\n  public privateSearchTerm?: string;\n  private privateFacetParams: FacetParam;\n  public sortValues = adverseEventPtSearchSortValues;\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  loadingStatus = '';\n  private subscriptions: Array<Subscription> = [];\n\n  adverseEventShinySubstanceNameDisplay = false;\n  adverseEventShinyAdverseEventDisplay = false;\n  adverseEventShinySubstanceNameURL: string;\n  adverseEventShinyAdverseEventURL: string;\n  adverseEventShinySubstanceNameURLWithParam: string;\n  adverseEventShinyAdverseEventURLWithParam: string;\n\n  // FAERS DASHBOARD\n  FAERSDashboardAdverseEventUrl: string;\n  FAERSDashboardSubstanceName: string;\n  FAERSDashboardSearchTerm = \"/select/Search%20Term/\"; // FAERS Adverse Event 'Substance Name'\n  FAERSDashboardReactionTerm = \"/select/Reaction%20Term/\"; // GSRS Adverse Event 'PT Term'\n  FAERSDashboardReactionGroup = \"/select/Reaction%20Group/\"; // GSRS Adverse Event 'Prim SOC'\n\n  filtered: Array<any>;\n  displayedColumns: string[] = [\n    'ptTerm',\n    'primSoc',\n    'caseCount',\n    'ptCount',\n    'prr'\n  ];\n  constructor(\n    private router: Router,\n    public gaService: GoogleAnalyticsService,\n    private adverseEventService: AdverseEventService,\n    private loadingService: LoadingService,\n    private configService: ConfigService,\n    private authService: AuthService,\n    private dialog: MatDialog\n  ) {\n    super(gaService, adverseEventService);\n  }\n\n  ngOnInit() {\n    const rolesSubscription = this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').subscribe(response => {\n      this.isAdmin = response;\n    });\n    this.subscriptions.push(rolesSubscription);\n\n    if (this.bdnum) {\n      this.getAdverseEventPt();\n\n      // FAERS DASHBOARD\n      this.getFaersDashboardUrl();\n      this.getFaersDashboardRecordByName();\n\n      this.adverseEventPtListExportUrl();\n      this.getAdverseEventShinyConfig();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getAdverseEventPt(pageEvent?: PageEvent) {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n    const skip = this.page * this.pageSize;\n    const privateSearch = 'root_substanceKey:' + this.bdnum;\n    const subscription = this.adverseEventService.getAdverseEventPt(\n      this.order,\n      skip,\n      this.pageSize,\n      privateSearch,\n      this.privateFacetParams\n    )\n      .subscribe(pagingResponse => {\n        this.adverseEventService.totalRecords = pagingResponse.total;\n        this.adverseEventCount = pagingResponse.total;\n        this.setResultData(pagingResponse.content);\n        this.etag = pagingResponse.etag;\n        this.countAdvPtOut.emit(this.adverseEventCount);\n      }, error => {\n        this.showSpinner = false;  // Stop progress spinner\n        console.log('error');\n      }, () => {\n        this.showSpinner = false;  // Stop progress spinner\n        subscription.unsubscribe();\n      });\n    this.loadingStatus = '';\n    // this.showSpinner = false;  // Stop progress spinner\n  }\n\n  /*\n  getSubstanceAdverseEventPt(pageEvent?: PageEvent): void {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n    this.adverseEventService.getSubstanceAdverseEventPtAdv(this.bdnum, this.page, this.pageSize,\n      this.orderBy, this.ascDescDir).subscribe(results => {\n        this.setResultData(results);\n        this.advPtCount = this.totalRecords;\n        this.countAdvPtOut.emit(this.advPtCount);\n        this.showSpinner = false;  // Stop progress spinner\n      });\n  }\n  */\n\n  adverseEventPtListExportUrl() {\n    if (this.bdnum != null) {\n      this.exportUrl = this.adverseEventService.getAdverseEventPtListExportUrl(this.bdnum);\n    }\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getAdverseEventPt();\n    }\n    return;\n  }\n\n  export() {\n    if (this.etag) {\n      const extension = 'xlsx';\n      const url = this.getApiExportUrl(this.etag, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n         // height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceAdverseEventPt', 'entity': 'adverseeventpt', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n           // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.adverseEventCount\n                }\n              };\n              const params = { 'total': this.adverseEventCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.adverseEventService.getApiExportUrlPt(etag, extension);\n  }\n\n  getFaersDashboardRecordByName(): void {\n    // Get FAERS Name from database table that contains 'P' and 'G' in name.\n    // Example: Acetazolamide (G) instead of GSRS name Acetazolamide\n    const faersNameSubscription = this.adverseEventService.getFaersDashboardRecordByName(this.substanceName).subscribe(results => {\n      if (results) {\n        if (results.name) {\n          this.FAERSDashboardSubstanceName = results.name;\n          this.FAERSDashboardAdverseEventUrl = this.FAERSDashboardAdverseEventUrl + results.name + this.FAERSDashboardReactionTerm;\n        }\n      }\n    });\n    this.subscriptions.push(faersNameSubscription);\n  }\n\n  getFaersDashboardUrl(): void {\n    if (this.configService.configData) {\n      if (this.configService.configData.FAERSDashboardAdverseEventUrl\n        && this.configService.configData.FAERSDashboardAdverseEventUrl !== null) {\n        const faersUrlConfig = this.configService.configData.FAERSDashboardAdverseEventUrl;\n\n        // FULL FAERS DASHBOARD URL\n        // faersUrl + /select/Search%20Term/ + FaersName + /select/Reaction%20Term/ + ptTerm + /select/Reaction%20Group/ + primSoc;\n        this.FAERSDashboardAdverseEventUrl = faersUrlConfig + this.FAERSDashboardSearchTerm;\n      }\n    }\n  }\n\n  getAdverseEventShinyConfig(): void {\n    if (this.configService.configData) {\n\n      // Analysis by Substance in Shiny Config\n      if (this.configService.configData.adverseEventShinySubstanceNameDisplay\n        && this.configService.configData.adverseEventShinySubstanceNameDisplay !== null) {\n        this.adverseEventShinySubstanceNameDisplay = JSON.parse(this.configService.configData.adverseEventShinySubstanceNameDisplay);\n      }\n      if (this.configService.configData.adverseEventShinySubstanceNameURL\n        && this.configService.configData.adverseEventShinySubstanceNameURL !== null) {\n        this.adverseEventShinySubstanceNameURL = this.configService.configData.adverseEventShinySubstanceNameURL;\n        this.adverseEventShinySubstanceNameURLWithParam = this.adverseEventShinySubstanceNameURL + decodeURIComponent(this.substanceName);\n      }\n\n      // Analysis by Adverse Event in Shiny Config\n      if (this.configService.configData.adverseEventShinyAdverseEventDisplay\n        && this.configService.configData.adverseEventShinyAdverseEventDisplay !== null) {\n        this.adverseEventShinyAdverseEventDisplay = JSON.parse(this.configService.configData.adverseEventShinyAdverseEventDisplay);\n      }\n      if (this.configService.configData.adverseEventShinyAdverseEventURL\n        && this.configService.configData.adverseEventShinyAdverseEventURL !== null) {\n        this.adverseEventShinyAdverseEventURL = this.configService.configData.adverseEventShinyAdverseEventURL;\n        this.adverseEventShinyAdverseEventURLWithParam = this.adverseEventShinyAdverseEventURL;\n      }\n\n    }\n  }\n\n  getDecodeURL(value: string): string {\n    let result = '';\n    if (value !== null) {\n      result = decodeURIComponent(value);\n    }\n    return result;\n  }\n\n}\n\n","<div class=\"padtop5px padleft25px font15px colorblue\">\n  <b>Adverse Event DME</b>\n  &nbsp;&nbsp;&nbsp;\n  <!--\n  <a [href]=\"exportUrl\" target=\"_blank\" matTooltip='Adverse Event DME Records' *ngIf=\"totalRecords > 0\">\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>arrow_downward</mat-icon>Export\n    </button>\n  </a>\n  -->\n  <!-- Export Button -->\n  <span class=\"export\" *ngIf=\"isAdmin && adverseEventCount > 0\">\n    <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\"\n      class=\"mat-button export-button mat-raised-button\">\n      <mat-icon svgIcon=\"get_app\"></mat-icon> Export\n    </button>\n  </span>\n</div>\n<!--\n<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n</div>\n-->\n<div class=\"responsive mat-table-style\">\n\n  <!-- SPINNER -->\n  <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n    <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n    </mat-progress-spinner>\n  </div>\n\n  <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\" matSortActive=\"dmeCount\"\n    matSortDirection=\"desc\" matSortDisableClear>\n\n    <ng-container matColumnDef=\"dmeReactions\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> DME Reactions </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.dmeReactions}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"ptTermMeddra\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> PT Term Meddra </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.ptTermMeddra}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"caseCount\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Case Count </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.caseCount}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dmeCount\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Dme Count </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.dmeCount}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dmeCountPercent\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Dme Count Percent </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.dmeCountPercent}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"weightedAvgPrr\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Weighted Average PRR</th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.weightedAvgPrr | number : '.2-2'}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n<mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"getAdverseEventDme($event)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Sort } from '@angular/material/sort';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { AdverseEventService } from '../../../../adverse-event/service/adverseevent.service';\nimport { SubstanceDetailsBaseTableDisplay } from '../../../substance-products/substance-details-base-table-display';\nimport { PageEvent } from '@angular/material/paginator';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { AuthService } from '@gsrs-core/auth';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { Subscription } from 'rxjs';\nimport { adverseEventDmeSearchSortValues } from '../../../../adverse-event/adverse-events-dme-browse/adverse-events-dme-search-sort-values';\n\n@Component({\n  selector: 'app-substance-adverseeventdme',\n  templateUrl: './substance-adverseeventdme.component.html',\n  styleUrls: ['./substance-adverseeventdme.component.scss']\n})\n\nexport class SubstanceAdverseEventDmeComponent extends SubstanceDetailsBaseTableDisplay implements OnInit {\n\n  @Input() bdnum: string;\n  @Output() countAdvDmeOut: EventEmitter<number> = new EventEmitter<number>();\n\n  adverseEventCount = 0;\n  order = '$root_dmeCount';\n  ascDescDir = 'desc';\n  showSpinner = false;\n  public privateSearchTerm?: string;\n  private privateFacetParams: FacetParam;\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  loadingStatus = '';\n  public sortValues = adverseEventDmeSearchSortValues;\n  private subscriptions: Array<Subscription> = [];\n\n  displayedColumns: string[] = [\n    'dmeReactions', 'ptTermMeddra', 'caseCount', 'dmeCount', 'dmeCountPercent', 'weightedAvgPrr'\n  ];\n\n  constructor(\n    private router: Router,\n    public gaService: GoogleAnalyticsService,\n    private adverseEventService: AdverseEventService,\n    private authService: AuthService,\n    private loadingService: LoadingService,\n    private dialog: MatDialog\n  ) {\n    super(gaService, adverseEventService);\n  }\n\n  ngOnInit() {\n    const rolesSubscription = this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').subscribe(response => {\n      this.isAdmin = response;\n    });\n    this.subscriptions.push(rolesSubscription);\n\n    if (this.bdnum) {\n      this.getAdverseEventDme();\n      // this.getSubstanceAdverseEventDme();\n      this.adverseEventDmeListExportUrl();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getAdverseEventDme(pageEvent?: PageEvent) {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n    const skip = this.page * this.pageSize;\n    const privateSearch = 'root_substanceKey:' + this.bdnum;\n    const subscription = this.adverseEventService.getAdverseEventDme(\n      this.order,\n      skip,\n      this.pageSize,\n      privateSearch,\n      this.privateFacetParams\n    )\n      .subscribe(pagingResponse => {\n        this.adverseEventService.totalRecords = pagingResponse.total;\n        this.adverseEventCount = pagingResponse.total;\n        this.setResultData(pagingResponse.content);\n        this.etag = pagingResponse.etag;\n        this.countAdvDmeOut.emit(this.adverseEventCount);\n      }, error => {\n        this.showSpinner = false;  // Stop progress spinner\n        console.log('error');\n      }, () => {\n        this.showSpinner = false;  // Stop progress spinner\n        subscription.unsubscribe();\n      });\n    this.loadingStatus = '';\n    // this.showSpinner = false;  // Stop progress spinner\n  }\n\n  /*\n  getSubstanceAdverseEventDme(pageEvent?: PageEvent): void {\n    this.setPageEvent(pageEvent);\n\n    this.showSpinner = true;  // Start progress spinner\n    this.adverseEventService.getSubstanceAdverseEventDme(this.bdnum, this.page, this.pageSize).subscribe(results => {\n      this.setResultData(results);\n      this.advDmeCount = this.totalRecords;\n      this.countAdvDmeOut.emit(this.advDmeCount);\n      this.showSpinner = false;  // Stop progress spinner\n    });\n  }\n  */\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString();\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getAdverseEventDme();\n    }\n    return;\n  }\n\n  export() {\n    if (this.etag) {\n      const extension = 'xlsx';\n      const url = this.getApiExportUrl(this.etag, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n        //  height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceAdverseEventDme','entity': 'adverseeventdme', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n           // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.adverseEventCount\n                }\n              };\n              const params = { 'total': this.adverseEventCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.adverseEventService.getApiExportUrlDme(etag, extension);\n  }\n\n  adverseEventDmeListExportUrl() {\n    if (this.bdnum != null) {\n      this.exportUrl = this.adverseEventService.getAdverseEventDmeListExportUrl(this.bdnum);\n    }\n  }\n\n}\n","<div class=\"padtop5px padleft25px font15px colorblue\">\n  <b>Adverse Event CVM</b>\n  &nbsp;&nbsp;&nbsp;\n  <!--\n  <a [href]=\"exportUrl\" target=\"_blank\" matTooltip='Adverse Event CVM Records' *ngIf=\"totalRecords > 0\">\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>arrow_downward</mat-icon>Export\n    </button>\n  </a>\n  -->\n  <!-- Export Button -->\n  <span class=\"export\" *ngIf=\"isAdmin && adverseEventCount > 0\">\n    <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\"\n      class=\"mat-button export-button mat-raised-button\">\n      <mat-icon svgIcon=\"get_app\"></mat-icon> Export\n    </button>\n  </span>\n</div>\n\n<!--\n<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>d\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n</div>\n-->\n\n<div class=\"responsive mat-table-style\">\n\n  <!-- Spinner -->\n  <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n    <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n    </mat-progress-spinner>\n  </div>\n\n  <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\" matSortActive=\"adverseEventCount\"\n    matSortDirection=\"desc\" matSortDisableClear>\n\n    <ng-container matColumnDef=\"adverseEvent\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Adverse Event </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.adverseEvent}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"species\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Species </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.species}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"adverseEventCount\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Adverse Event Count </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.aeCount}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"routeOfAdmin\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Route of Administration </th>\n      <td mat-cell *matCellDef=\"let adverse\"> {{adverse.routeOfAdmin}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n<mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"getAdverseEventCvm($event)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Sort } from '@angular/material/sort';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { AdverseEventService } from '../../../../adverse-event/service/adverseevent.service';\nimport { SubstanceDetailsBaseTableDisplay } from '../../../substance-products/substance-details-base-table-display';\nimport { PageEvent } from '@angular/material/paginator';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { AuthService } from '@gsrs-core/auth';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { Subscription } from 'rxjs';\nimport { adverseEventCvmSearchSortValues } from '../../../../adverse-event/adverse-events-cvm-browse/adverse-events-cvm-search-sort-values';\n\n@Component({\n  selector: 'app-substance-adverseeventcvm',\n  templateUrl: './substance-adverseeventcvm.component.html',\n  styleUrls: ['./substance-adverseeventcvm.component.scss']\n})\n\nexport class SubstanceAdverseEventCvmComponent extends SubstanceDetailsBaseTableDisplay implements OnInit {\n\n  @Input() bdnum: string;\n  @Output() countAdvCvmOut: EventEmitter<number> = new EventEmitter<number>();\n\n  adverseEventCount = 0;\n  order = '$root_aeCount';\n  ascDescDir = 'desc';\n  showSpinner = false;\n  public privateSearchTerm?: string;\n  private privateFacetParams: FacetParam;\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  loadingStatus = '';\n  public sortValues = adverseEventCvmSearchSortValues;\n  private subscriptions: Array<Subscription> = [];\n\n  displayedColumns: string[] = [\n    'adverseEvent', 'species', 'adverseEventCount', 'routeOfAdmin'\n  ];\n\n  constructor(\n    private router: Router,\n    public gaService: GoogleAnalyticsService,\n    private adverseEventService: AdverseEventService,\n    private authService: AuthService,\n    private loadingService: LoadingService,\n    private dialog: MatDialog\n  ) {\n    super(gaService, adverseEventService);\n  }\n\n  ngOnInit() {\n    const rolesSubscription = this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').subscribe(response => {\n      this.isAdmin = response;\n    });\n    this.subscriptions.push(rolesSubscription);\n    if (this.bdnum) {\n      this.getAdverseEventCvm();\n      // this.getSubstanceAdverseEventCvm();\n      this.adverseEventCvmListExportUrl();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getAdverseEventCvm(pageEvent?: PageEvent) {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n    const skip = this.page * this.pageSize;\n    const privateSearch = 'root_substanceKey:' + this.bdnum;\n    const subscription = this.adverseEventService.getAdverseEventCvm(\n      this.order,\n      skip,\n      this.pageSize,\n      privateSearch,\n      this.privateFacetParams\n    )\n      .subscribe(pagingResponse => {\n        this.adverseEventService.totalRecords = pagingResponse.total;\n        this.adverseEventCount = pagingResponse.total;\n        this.setResultData(pagingResponse.content);\n        this.etag = pagingResponse.etag;\n        this.countAdvCvmOut.emit(this.adverseEventCount);\n      }, error => {\n        this.showSpinner = false;  // Stop progress spinner\n        console.log('error');\n      }, () => {\n        this.showSpinner = false;  // Stop progress spinner\n        subscription.unsubscribe();\n      });\n    this.loadingStatus = '';\n    // this.showSpinner = false;  // Stop progress spinner\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getAdverseEventCvm();\n    }\n    return;\n  }\n\n  export() {\n    if (this.etag) {\n      const extension = 'xlsx';\n      const url = this.getApiExportUrl(this.etag, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n        //  height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceAdverseEventCvm', 'entity': 'adverseeventcvm', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n           // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.adverseEventCount\n                }\n              };\n              const params = { 'total': this.adverseEventCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.adverseEventService.getApiExportUrlCvm(etag, extension);\n  }\n\n  adverseEventCvmListExportUrl() {\n    if (this.bdnum != null) {\n      this.exportUrl = this.adverseEventService.getAdverseEventCvmListExportUrl(this.bdnum);\n    }\n  }\n\n}\n\n","export const impuritiesSearchSortValues = [\n  {\n    'value': 'default',\n    'display': 'Relevance'\n  },\n  {\n    'value': '^root_productSubstanceName',\n    'display': 'Source Type, Ascending',\n    'displayedColumns': 'productSubstanceName',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_productSubstanceName',\n    'display': 'Source Type, Descending',\n    'displayedColumns': 'productSubstanceName',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_sourceType',\n    'display': 'Source Type, Ascending',\n    'displayedColumns': 'sourceType',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_sourceType',\n    'display': 'Source Type, Descending',\n    'displayedColumns': 'sourceType',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_source',\n    'display': 'Source, Ascending',\n    'displayedColumns': 'source',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_source',\n    'display': 'Source, Descending',\n    'displayedColumns': 'source',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_sourceId',\n    'display': 'Source ID, A-Z',\n    'displayedColumns': 'sourceId',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_sourceId',\n    'display': 'Source ID, Z-A',\n    'displayedColumns': 'sourceId',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_type',\n    'display': 'Type, A-Z',\n    'displayedColumns': 'type',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_type',\n    'display': 'Type, Z-A',\n    'displayedColumns': 'type',\n    'direction': 'desc'\n  },\n  {\n    'value': '^root_specType',\n    'display': 'Spec Type, A-Z',\n    'displayedColumns': 'specType',\n    'direction': 'asc'\n  },\n  {\n    'value': '$root_specType',\n    'display': 'Spec Type, Z-A',\n    'displayedColumns': 'specType',\n    'direction': 'desc'\n  }\n];\n","<div class=\"padtop5px padleft25px font15px colorblue\">\n  <b>Impurities Specs</b>\n  &nbsp;&nbsp;&nbsp;\n  <!-- Export Button -->\n  <span class=\"export\" *ngIf=\"isAdmin && totalRecords > 0\">\n    <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\"\n      class=\"mat-button export-button mat-raised-button\">\n      <mat-icon svgIcon=\"get_app\"></mat-icon> Export\n    </button>\n  </span>\n\n  <!--\n  <a [href]=\"exportUrl\" target=\"_blank\" matTooltip='Export Impurities Records' *ngIf=\"totalRecords > 0\">\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>arrow_downward</mat-icon>Export\n    </button>\n  </a>\n  -->\n</div>\n\n<div class=\"responsive mat-table-style\">\n  <!-- Spinner -->\n  <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n    <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n    </mat-progress-spinner>\n  </div>\n\n  <table mat-table [dataSource]=\"paged\" matSort (matSortChange)=\"sortData($event)\"\n  matSortActive=\"id\" matSortDirection=\"desc\" matSortDisableClear>\n\n    <ng-container matColumnDef=\"productSubstanceName\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"width100px\">Product/Substance Name</th>\n      <td mat-cell *matCellDef=\"let impurities\">\n        <div *ngIf=\"impurities.id\">\n          <a [routerLink]=\"['/impurities', impurities.id]\" target=\"_blank\">\n            <div *ngIf=\"impurities.productSubstanceName; else noProdName\">{{impurities.productSubstanceName}}</div>\n            <ng-template #noProdName>\n              View\n            </ng-template>\n          </a>\n          &nbsp;&nbsp;\n          <a [routerLink]=\"['/impurities', impurities.id, 'edit']\" target=\"_blank\" *ngIf=\"isAdmin\"\n            matTooltip='Edit Impurities Record'>\n            <mat-icon svgIcon=\"edit\"></mat-icon>\n          </a>\n        </div>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"sourceType\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"width100px\"> Source Type</th>\n      <td mat-cell *matCellDef=\"let impurities\"> {{impurities.sourceType}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"source\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"width100px\"> Source </th>\n      <td mat-cell *matCellDef=\"let impurities\"> {{impurities.source}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"sourceid\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"width100px\"> Source ID</th>\n      <td mat-cell *matCellDef=\"let impurities\"> {{impurities.sourceId}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"type\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"width100px\"> Type </th>\n      <td mat-cell *matCellDef=\"let impurities\"> {{impurities.type}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"specType\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"width100px\"> Spec Type </th>\n      <td mat-cell *matCellDef=\"let impurities\"> {{impurities.specType}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"parentSubstance\">\n      <th mat-header-cell *matHeaderCellDef class=\"width100px\"> Parent Substance </th>\n      <td mat-cell *matCellDef=\"let impurities\">\n        <div *ngFor=\"let impSub of impurities.impuritiesSubstanceList; let subIndex = index\">\n          <a [routerLink]=\"['/substances', impSub._parentSubstanceUuid]\" target=\"_blank\">\n            <span class=\"colorblue\">{{impSub._parentSubstanceName}}</span>\n          </a>\n        </div>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"relatedSubstance\">\n      <th mat-header-cell *matHeaderCellDef class=\"width100px\"> Impurities Related Substance</th>\n      <td mat-cell *matCellDef=\"let impurities\">\n        <div *ngFor=\"let impSub of impurities.impuritiesSubstanceList; let subIndex = index\">\n          <!-- Impurities Substance Name is same as current display Substance Name -->\n          <!--\n          <div *ngIf=\"impSub.substanceUuid === substanceUuid\">\n          -->\n          <!--\n            <b>{{substanceName}}</b><br>\n            -->\n          <div *ngFor=\"let impTest of impSub.impuritiesTestList; let testIndex = index\">\n            <!--\n            <ol>\n            -->\n            <div *ngFor=\"let impDetail of impTest.impuritiesDetailsList; let detIndex = index\" class=\"font12px\">\n              <div *ngIf=\"impDetail.relatedSubstanceUuid === substanceUuid\">\n                <!--<b>{{substanceName}}</b>-->\n                <!--\n                  <li>\n                    <a [routerLink]=\"['/substances', impDetail.relatedSubstanceUuid]\"\n                    target=\"_blank\"><b>{{impDetail._ingredientName}}</b></a>\n                    -->\n                <span class=\"colorgreen\">\n                  <span *ngIf=\"impDetail.limitType\">&nbsp;&nbsp;&nbsp;&nbsp;{{impDetail.limitType}}&nbsp;</span>\n                  {{impDetail.limitValue}}&nbsp;{{impDetail.unit}}\n                </span>\n                <span *ngIf=\"impDetail.impurityType\"\n                  class=\"colorpurple\"><br>&nbsp;&nbsp;&nbsp;&nbsp;{{impDetail.impurityType}}\n                </span>\n                <!--\n                  </li>\n                    -->\n              </div>\n            </div> <!-- ngFor impDetail -->\n            <!--\n            </ol>\n          -->\n          </div> <!-- ngFor impTest -->\n\n          <!--\n          </div>\n          -->\n          <!-- impSub.substanceUuid == substanceUuid -->\n\n        </div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n\n<mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"getImpuritiesBySubstanceUuid($event)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { PageEvent } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Sort } from '@angular/material/sort';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigService } from '@gsrs-core/config';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { AuthService } from '@gsrs-core/auth';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { ImpuritiesService } from '../../../impurities/service/impurities.service';\nimport { GeneralService } from '../../../service/general.service';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { SubstanceDetailsBaseTableDisplay } from '../substance-details-base-table-display';\nimport { Impurities, ImpuritiesTesting, ImpuritiesDetails, IdentityCriteria } from '../../../impurities/model/impurities.model';\nimport { Facet } from '@gsrs-core/facets-manager';\nimport { FacetParam, FacetHttpParams, FacetQueryResponse } from '@gsrs-core/facets-manager';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { impuritiesSearchSortValues } from '../../../impurities/impurities-search-sort-values';\n\n@Component({\n  selector: 'app-substance-impurities',\n  templateUrl: './substance-impurities.component.html',\n  styleUrls: ['./substance-impurities.component.scss']\n})\nexport class SubstanceImpuritiesComponent extends SubstanceDetailsBaseTableDisplay implements OnInit, OnDestroy {\n\n  @Input() substanceUuid: string;\n  @Input() substanceName: string;\n  @Output() countImpuritiesOut: EventEmitter<number> = new EventEmitter<number>();\n  private subscriptions: Array<Subscription> = [];\n  parentSubstance: string;\n  parentSubstanceUuid: string;\n  showSpinner = false;\n  impurities: Array<Impurities>;\n  totalImpurities = 0;\n  impuritiesCount = 0;\n  impuritiesTestTotal = 0;\n  pageIndex = 0;\n  pageSize = 5;\n  public privateSearchTerm?: string;\n  private privateFacetParams: FacetParam;\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  public sortValues = impuritiesSearchSortValues;\n  order = '$root_productSubstanceName';\n  ascDescDir = 'desc';\n  displayedColumns: string[] = [\n    'productSubstanceName',\n    'sourceType',\n    'source',\n    'sourceid',\n    'type',\n    'specType',\n    'parentSubstance',\n    'relatedSubstance'\n  ];\n\n  constructor(\n    private router: Router,\n    public gaService: GoogleAnalyticsService,\n    private impuritiesService: ImpuritiesService,\n    private generalService: GeneralService,\n    private authService: AuthService,\n    private loadingService: LoadingService,\n    private dialog: MatDialog\n  ) {\n    super(gaService, impuritiesService);\n  }\n\n  ngOnInit() {\n    const rolesSubscription = this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').subscribe(response => {\n      this.isAdmin = response;\n    });\n    this.subscriptions.push(rolesSubscription);\n\n    if (this.substanceUuid) {\n      this.getImpuritiesBySubstanceUuid();\n      this.impuritiesListExportUrl();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    });\n  }\n\n  /*\n  getSubstanceImpuritiesNEW(pageEvent?: PageEvent): void {\n    this.setPageEvent(pageEvent);\n\n    this.showSpinner = true;  // Start progress spinner\n    this.impuritiesService.searchImpurities(this.substanceUuid, this.page, this.pageSize).subscribe(results => {\n      this.setResultData(results);\n      this.impurities = results;\n      this.getImpuritiesTestTotal();\n      this.impuritiesCount = this.totalRecords;\n      this.countImpuritiesOut.emit(this.impuritiesCount);\n      this.showSpinner = false;  // Stop progress spinner\n    });\n  }\n  */\n\n  searchImpurities() {\n    this.privateSearchTerm = this.substanceUuid;\n    //  this.loadingService.setLoading(true);\n    const skip = this.pageIndex * this.pageSize;\n    const subscription = this.impuritiesService.searchImpurities(\n      skip,\n      this.pageSize,\n      this.privateSearchTerm,\n      this.privateFacetParams,\n    )\n      .subscribe(pagingResponse => {\n        // this.isError = false;\n\n        this.setResultData(pagingResponse.content);\n        this.impurities = pagingResponse.content;\n        this.impuritiesCount = pagingResponse.total;\n        this.countImpuritiesOut.emit(this.impuritiesCount);\n        this.etag = pagingResponse.etag;\n\n        /*\n        if (pagingResponse.total % this.pageSize === 0) {\n          this.lastPage = (pagingResponse.total / this.pageSize);\n        } else {\n          this.lastPage = Math.floor(pagingResponse.total / this.pageSize + 1);\n        }\n        */\n        // Set Facets from paging response\n        /*  if (pagingResponse.facets && pagingResponse.facets.length > 0) {\n            this.rawFacets = pagingResponse.facets;\n          }\n          */\n      }, error => {\n        /*\n         console.log('error');\n         const notification: AppNotification = {\n           message: 'There was an error trying to retrieve Products. Please refresh and try again.',\n           type: NotificationType.error,\n           milisecondsToShow: 6000\n         };\n         this.isError = true;\n         this.isLoading = false;\n         this.loadingService.setLoading(this.isLoading);\n         this.notificationService.setNotification(notification);\n         */\n      }, () => {\n        subscription.unsubscribe();\n        //   this.isLoading = false;\n        //   this.loadingService.setLoading(this.isLoading);\n      });\n  }\n\n\n  getImpuritiesBySubstanceUuid(pageEvent?: PageEvent): void {\n    this.showSpinner = true;  // Start progress spinner\n\n    this.setPageEvent(pageEvent);\n    const skip = this.page * this.pageSize;\n\n    // , this.page, this.pageSize\n    this.impuritiesService.getImpuritiesBySubstanceUuid(\n      this.order,\n      skip,\n      this.pageSize,\n      this.substanceUuid,\n      this.privateFacetParams).subscribe(results => {\n        this.impuritiesService.totalRecords = results.total;\n        this.impurities = results.content;\n\n        // Load Impurities Test Details by Substance Uuid\n        this.loadImpuritiesTestDetails();\n\n        this.setResultData(this.impurities);\n\n        this.totalImpurities = results.total;\n\n        this.etag = results.etag;\n        this.countImpuritiesOut.emit(this.totalImpurities);\n      });\n    this.showSpinner = false;  // Stop progress spinner\n  }\n\n  /*\n  getImpuritiesByTestImpuritiesDetails(pageEvent?: PageEvent): void {\n    this.setPageEvent(pageEvent);\n\n    this.showSpinner = true;  // Start progress spinner\n    // , this.page, this.pageSize\n    this.impuritiesService.getImpuritiesBySubstanceUuid(this.substanceUuid).subscribe(results => {\n      this.impuritiesService.totalRecords = results.total;\n      this.impurities = results.content;\n\n      //Load Impurities Test Details by Substance Uuid\n      this.loadImpuritiesTestDetails();\n\n      this.setResultData(this.impurities);\n\n      this.totalImpurities = results.total;\n\n      this.etag = results.etag;\n      this.countImpuritiesOut.emit(this.totalImpurities);\n    });\n    this.showSpinner = false;  // Stop progress spinner\n  }\n  */\n\n  loadImpuritiesTestDetails() {\n    this.impurities.forEach((element, index) => {\n      element.impuritiesSubstanceList.forEach((elementSub, indexSub) => {\n\n        if (elementSub.substanceUuid) {\n          // if current Substance is same as Parent Substance of Impurities\n          if (elementSub.substanceUuid === this.substanceUuid) {\n            elementSub._parentSubstanceName = this.substanceName;\n            elementSub._parentSubstanceUuid = elementSub.substanceUuid;\n          }\n        }\n        elementSub.impuritiesTestList.forEach((elementTest, indexTest) => {\n\n          elementTest.impuritiesDetailsList.forEach((elementDetail, indexDetail) => {\n\n            if (elementDetail.relatedSubstanceUuid != null) {\n              // if current Substance is same as Impurities Details of Impurities\n              if (elementDetail.relatedSubstanceUuid === this.substanceUuid) {\n                const subSubscription = this.generalService.getSubstanceNamesBySubstanceUuid(elementSub.substanceUuid).subscribe(substanceNames => {\n                  let subNames = substanceNames;\n\n                  // Get Preferred Term or DisplayName == true\n                  subNames.forEach((names, index) => {\n                    if (names.displayName === true) {\n                      elementSub._parentSubstanceName = names.name;\n                      elementSub._parentSubstanceUuid = elementSub.substanceUuid;\n                    }\n                  });\n                });\n                this.subscriptions.push(subSubscription);\n              }\n            }\n          }); // Impurities Details forEach\n        }); // Test forEach\n      }); // Substance forEach\n    }); // Impurities forEach\n  }\n\n  getSubstanceNames(substanceUuid: string): string {\n    let preferredTerm;\n    if (substanceUuid) {\n      const subSubscription = this.generalService.getSubstanceNamesBySubstanceUuid(substanceUuid).subscribe(substanceNames => {\n        let subNames = substanceNames;\n\n        // Get Preferred Term or DisplayName == true\n        subNames.forEach((names, index) => {\n          if (names.displayName === true) {\n            preferredTerm = names.name;\n          }\n        });\n      });\n      this.subscriptions.push(subSubscription);\n      return preferredTerm;\n    }\n  }\n\n  /*\n  getSubstanceImpurities(pageEvent?: PageEvent): void {\n    this.setPageEvent(pageEvent);\n\n    this.showSpinner = true;  // Start progress spinner\n    this.impuritiesService.getSubstanceImpurities(this.substanceUuid, this.page, this.pageSize).subscribe(results => {\n      this.setResultData(results);\n      this.impurities = results;\n      this.impuritiesCount = this.totalRecords;\n      this.impuritiesService.totalRecords = this.totalRecords;\n      this.countImpuritiesOut.emit(this.impuritiesCount);\n      this.showSpinner = false;  // Stop progress spinner\n    });\n  }\n  */\n\n  export() {\n    if (this.etag) {\n      const extension = 'xlsx';\n      const url = this.getApiExportUrl(this.etag, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n          // height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceImpurities', 'entity': 'impurities', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n              // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.totalImpurities\n                }\n              };\n              const params = { 'total': this.totalImpurities };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.impuritiesService.getApiExportUrl(etag, extension);\n  }\n\n  impuritiesListExportUrl() {\n    if (this.substanceUuid != null) {\n      this.exportUrl = this.impuritiesService.getImpuritiesListExportUrl(this.substanceUuid);\n    }\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getImpuritiesBySubstanceUuid();\n    }\n    return;\n  }\n}\n","<div class=\"info-container\">\n  <a *ngIf=\"substance && substance.uuid\" aria-label=\"FDA details\"\n    [href]=\"baseDomain + '/ginas/app/substance/' + substance.uuid + '#fdadetails'\" target=\"_blank\">\n    <!-- COMMENTING THIS OUT SINCE WE DO NOT HAVE CLASSIC VIEW IN 3.0\n    For data export, sorting and searching of the tabs below please use the classic view here\n    -->\n  </a>\n</div>\n<div class=\"bordergray mat-tab-style\">\n  <mat-tab-group>\n\n    <mat-tab label=\"Product ({{productCount}})\" *ngIf=\"loadedComponents && loadedComponents.products\">\n\n      <div *ngIf=\"(loadingComplete === true && foundProvenanceList === false && productCount === 0)\">\n        <br>\n        <div class=\"padleft25px colorblue\"><b>No Product Found</b></div>\n        <br>\n      </div>\n      <mat-tab-group (selectedTabChange)=\"tabSelected($event)\">\n        <mat-tab label=\"{{prov}}\" *ngFor=\"let prov of provenanceList; let index = index\">\n          <div class=\"divflex padtop5px padleft25px font15px colorblue\">\n            <b> {{prov}}</b>\n            &nbsp;&nbsp;&nbsp;\n            <span class=\"colorred\">{{loadingStatus}}</span>\n            &nbsp;&nbsp;&nbsp;\n            <!--\n            <a [href]=\"exportUrl\" target=\"_blank\" matTooltip='Product Records' *ngIf=\"totalRecords > 0\">\n              <button mat-icon-button color=\"primary\">\n                <mat-icon>arrow_downward</mat-icon>Export All Products\n              </button>\n            </a>\n            -->\n            <!-- Export Button -->\n            <span class=\"export\" *ngIf=\"isAdmin && totalRecords > 0\">\n              <button matTooltip=\"Export Search Results\" mat-button (click)=\"export()\"\n                class=\"mat-button export-button mat-raised-button\">\n                <mat-icon svgIcon=\"get_app\"></mat-icon> Export All Products\n              </button>\n            </span>\n\n            <!-- *** Search Any Text (TYPE AHEAD) *** -->\n            <!--\n            <span class=\"middle-fill\"></span>\n            <mat-form-field [floatLabel]=\"'never'\" class=\"search\" size=\"100\">\n              <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n            </mat-form-field>\n            -->\n          </div>\n\n          <div class=\"responsive mat-table-style\">\n            <div *ngIf=\"showSpinner\" class=\"spinnerstyle\">\n              <mat-progress-spinner diameter=\"80\" color=\"warn\" mode=\"indeterminate\">\n              </mat-progress-spinner>\n            </div>\n\n            <table mat-table [dataSource]=\"paged\" class=\"font12px\" matSort (matSortChange)=\"sortData($event)\"\n              matSortActive=\"productNDC\" matSortDirection=\"desc\" matSortDisableClear>\n\n              <ng-container matColumnDef=\"productNDC\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Product ID </th>\n                <td mat-cell *matCellDef=\"let product\">\n                  <span *ngIf=\"product.fromtable === 'GSRS'\">\n                    <a [routerLink]=\"['/product', product.productId]\" target=\"_blank\">\n                      <span *ngIf=\"product.productNDC; else noProdNDCGSRS\">\n                        {{product.productNDC}}\n                      </span>\n                      <ng-template #noProdNDCGSRS>\n                        (NO NDC)\n                      </ng-template>\n                    </a>\n                    &nbsp;&nbsp;\n                    <a [routerLink]=\"['/product', product.productId, 'edit']\" target=\"_blank\" *ngIf=\"isAdmin\"\n                      matTooltip='Edit GSRS Product Record'>\n                      <mat-icon svgIcon=\"edit\"></mat-icon>\n                    </a>\n                  </span>\n                  <span *ngIf=\"product.fromtable != 'GSRS'\">\n                    <a [routerLink]=\"['/product-elist', product.productId]\" target=\"_blank\">\n                      <span *ngIf=\"product.productNDC; else noProdNDC\">\n                        {{product.productNDC}}\n                      </span>\n                      <ng-template #noProdNDC>\n                        (NO NDC)\n                      </ng-template>\n                    </a>\n                    <br><span class=\"font10px colorgray\">({{product.fromtable}})</span>\n                  </span>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"productName\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Product Name </th>\n                <td mat-cell *matCellDef=\"let product\">\n                  <div *ngFor=\"let prodName of product.productNameAllList; let i = index\">\n                    {{prodName.productName}}\n                  </div>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"labelerName\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Labeler Name </th>\n                <td mat-cell *matCellDef=\"let product\"> {{product.labelerName}}\n                  <div *ngFor=\"let prodComp of product.productCompanyAllList; let i = index\">\n                    {{prodComp.labelerName}}\n                  </div>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"country\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Country </th>\n                <td mat-cell *matCellDef=\"let product\">\n                  <div *ngFor=\"let prodComp of product.productCompanyAllList; let i = index\">\n                    {{prodComp.countryWithoutCode}}\n                  </div>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"status\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\n                <td mat-cell *matCellDef=\"let product\"> {{product.status}} </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"productNameType\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Product Type </th>\n                <td mat-cell *matCellDef=\"let product\"> {{product.productType}} </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"ingredientType\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Ingredient Type </th>\n                <td mat-cell *matCellDef=\"let product\">\n                  <div *ngFor=\"let prodIng of product.productIngredientAllList; let i = index\">\n                    <div *ngIf=\"prodIng.substanceUuid\">\n                      <div *ngIf=\"(substance.uuid === prodIng.substanceUuid)\">\n                        {{prodIng.ingredientType}}\n                      </div>\n                    </div>\n                  </div>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"applicationNumber\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Application Number </th>\n                <td mat-cell *matCellDef=\"let product\"> {{product.appTypeNumber}} </td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n          </div>\n          <mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n            (page)=\"getSubstanceProducts($event)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n          </mat-paginator>\n        </mat-tab>\n\n      </mat-tab-group>\n\n      <!--\n      </div>\n      <ng-template #noprovence>\n        <br>\n        <div class=\"padleft25px colorblue\"><b>No Product Found</b></div>\n        <br>\n      </ng-template>\n    -->\n    </mat-tab>\n\n    <!--  PREVIOUS CODE\n      <div class=\"responsive mat-table-style\">\n        <table mat-table [dataSource]=\"paged\">\n\n          <ng-container matColumnDef=\"productNDC\">\n            <th mat-header-cell *matHeaderCellDef> Product NDC </th>\n            <td mat-cell *matCellDef=\"let product\">\n              <div *ngIf=\"product.fromTable === 'SRS'\">\n                <a [routerLink]=\"['/productDetails', product.id, 'srs']\" target=\"_blank\">{{product.productNDC}}</a>\n              </div>\n              <div *ngIf=\"product.fromTable != 'SRS'\">\n                <a [routerLink]=\"['/productElistDetails', product.id, 'elist']\"\n                  target=\"_blank\">{{product.productNDC}}</a>\n                <br><span class=\"font10px colorgray\">(Elist)</span>\n              </div>\n\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef> Product Name </th>\n            <td mat-cell *matCellDef=\"let product\"> {{product.productName}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"nonProprietaryName\">\n            <th mat-header-cell *matHeaderCellDef> Non Proprietary Name </th>\n            <td mat-cell *matCellDef=\"let product\"> {{product.nonProprietaryName}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"labelerName\">\n            <th mat-header-cell *matHeaderCellDef> Labeler Name </th>\n            <td mat-cell *matCellDef=\"let product\"> {{product.labelerName}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"applicationNumber\">\n            <th mat-header-cell *matHeaderCellDef> Application Number </th>\n            <td mat-cell *matCellDef=\"let product\"> {{product.applicationNumber}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"productNameType\">\n            <th mat-header-cell *matHeaderCellDef> Product Name Type </th>\n            <td mat-cell *matCellDef=\"let product\"> {{product.productTypeName}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"ingredientType\">\n            <th mat-header-cell *matHeaderCellDef> Ingredient Type </th>\n            <td mat-cell *matCellDef=\"let product\"> {{product.ingredientType}} </td>\n          </ng-container>\n\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      </div>\n\n      <mat-paginator [length]=\"totalRecords\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n        (page)=\"getSubstanceProducts($event)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n      </mat-paginator>\n    -->\n\n\n    <mat-tab label=\"Application ({{applicationCount}})\" *ngIf=\"loadedComponents && loadedComponents.applications\">\n      <app-substance-application [bdnum]=\"bdnum\" (countApplicationOut)=\"getApplicationCount($event)\">\n      </app-substance-application>\n    </mat-tab>\n\n    <div *ngIf=\"loadedComponents && loadedComponents.clinicaltrials\">\n      <mat-tab label=\"Clinical Trial ({{clinicalTrialCount}})\">\n        <app-substance-clinical-trials [bdnum]=\"bdnum\" [substanceUuid]=\"substance.uuid\"\n          (countClinicalTrialOut)=\"getClinicalTrialCount($event)\">\n        </app-substance-clinical-trials>\n      </mat-tab>\n    </div>\n\n\n    <mat-tab label=\"Clinical Trial Europe ({{clinicalTrialEuCount}})\"\n      *ngIf=\"loadedComponents && loadedComponents.clinicaltrials\">\n      <app-substance-clinical-trials-eu [bdnum]=\"bdnum\" [substanceUuid]=\"substance.uuid\"\n        (countClinicalTrialEuOut)=\"getClinicalTrialEuCount($event)\">\n      </app-substance-clinical-trials-eu>\n    </mat-tab>\n\n    <mat-tab label=\"Adverse Event PT ({{advPtCount}})\" *ngIf=\"loadedComponents && loadedComponents.adverseevents\">\n      <app-substance-adverseeventpt [bdnum]=\"bdnum\" [substanceName]=\"substanceName\"\n        (countAdvPtOut)=\"getAdvPtCount($event)\">\n      </app-substance-adverseeventpt>\n    </mat-tab>\n\n    <mat-tab label=\"Adverse Event DME ({{advDmeCount}})\" *ngIf=\"loadedComponents && loadedComponents.adverseevents\">\n      <app-substance-adverseeventdme [bdnum]=\"bdnum\" (countAdvDmeOut)=\"getAdvDmeCount($event)\">\n      </app-substance-adverseeventdme>\n    </mat-tab>\n\n    <mat-tab label=\"Adverse Event CVM ({{advCvmCount}})\" *ngIf=\"loadedComponents && loadedComponents.adverseevents\">\n      <app-substance-adverseeventcvm [bdnum]=\"bdnum\" (countAdvCvmOut)=\"getAdvCvmCount($event)\">\n      </app-substance-adverseeventcvm>\n    </mat-tab>\n\n    <mat-tab label=\"Impurities Specs ({{impuritiesCount}})\" *ngIf=\"loadedComponents && loadedComponents.impurities\">\n      <app-substance-impurities [substanceUuid]=\"substance.uuid\" (countImpuritiesOut)=\"getImpuritiesCount($event)\"\n        [substanceName]=\"substanceName\">\n      </app-substance-impurities>\n    </mat-tab>\n\n  </mat-tab-group>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SubstanceCardBaseFilteredList } from '@gsrs-core/substance-details';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { ProductService } from '../../product/service/product.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Sort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { PageEvent } from '@angular/material/paginator';\nimport { SubstanceDetailsBaseTableDisplay } from './substance-details-base-table-display';\nimport { SubstanceAdverseEventCvmComponent } from './substance-adverseevent/adverseeventcvm/substance-adverseeventcvm.component';\nimport { ConfigService, LoadedComponents } from '@gsrs-core/config';\nimport { AuthService } from '@gsrs-core/auth';\nimport { take } from 'rxjs/operators';\nimport { FacetParam } from '@gsrs-core/facets-manager';\nimport { LoadingService } from '@gsrs-core/loading/loading.service';\nimport { ExportDialogComponent } from '@gsrs-core/substances-browse/export-dialog/export-dialog.component';\nimport { productSearchSortValues } from '../../product/products-browse/product-search-sort-values';\n\n@Component({\n  selector: 'app-substance-products',\n  templateUrl: './substance-products.component.html',\n  styleUrls: ['./substance-products.component.scss']\n})\n\nexport class SubstanceProductsComponent extends SubstanceDetailsBaseTableDisplay implements OnInit, AfterViewInit {\n\n  productCount = 0;\n  applicationCount = 0;\n  clinicalTrialCount = 0;\n  clinicalTrialEuCount = 0;\n  advPtCount = 0;\n  advDmeCount = 0;\n  advCvmCount = 0;\n  impuritiesCount = 0;\n  provenance = '';\n  provenanceList = '';\n  datasourceList = '';\n  loadingStatus = '';\n  showSpinner = false;\n  baseDomain: string;\n  foundProvenanceList = false;\n  loadingComplete = false;\n  substanceName = '';\n  public privateSearch?: string;\n  private privateFacetParams: FacetParam;\n  public privateSearchTerm?: string;\n  privateExport = false;\n  disableExport = false;\n  etag = '';\n  etagAllExport = '';\n  loadedComponents: LoadedComponents;\n  public sortValues = productSearchSortValues;\n  order = '$root_productNDC';\n  ascDescDir = 'desc';\n  public displayedColumns: string[] = [\n    'productNDC',\n    'productName',\n    'labelerName',\n    'country',\n    'status',\n    'productNameType',\n    'ingredientType',\n    'applicationNumber'\n  ];\n\n  constructor(\n    private router: Router,\n    public gaService: GoogleAnalyticsService,\n    private productService: ProductService,\n    private configService: ConfigService,\n    public authService: AuthService,\n    private loadingService: LoadingService,\n    private dialog: MatDialog\n  ) {\n    super(gaService, productService);\n  }\n\n  ngOnInit() {\n    this.loadedComponents = this.configService.configData.loadedComponents || null;\n    this.authService.hasAnyRolesAsync('Admin', 'Updater', 'SuperUpdater').pipe(take(1)).subscribe(response => {\n      this.isAdmin = response;\n    });\n\n    if (this.substance && this.substance.uuid) {\n      this.getSubstanceKey();\n\n      // Get Provenance List to Display in Tab\n      this.getProductProvenanceList();\n\n      this.privateSearch = 'root_productIngredientAllList_substanceUuid:\\\"' + this.substance.uuid + '\"';\n      this.getSubstanceProducts(null, 'initial');\n\n      /*\n      this.searchControl.valueChanges.subscribe(value => {\n        if (value) {\n          this.privateSearch =  '\\\"' + value + '\\\" AND ' + 'root_productIngredientAllList_substanceUuid:\\\"'\n          + this.substance.uuid + '\\\" AND root_provenance:' + this.provenance;\n          this.getSubstanceProducts(null);\n        }\n      }, error => {\n        console.log(error);\n      });\n      */\n    }\n\n    this.baseDomain = this.configService.configData.apiUrlDomain;\n  }\n\n  ngAfterViewInit() {\n  }\n\n  getApplicationCount($event: any) {\n    this.applicationCount = $event;\n  }\n\n  getClinicalTrialCount($event: any) {\n    this.clinicalTrialCount = $event;\n  }\n\n  getClinicalTrialEuCount($event: any) {\n    this.clinicalTrialEuCount = $event;\n  }\n\n  getAdvPtCount($event: any) {\n    this.advPtCount = $event;\n  }\n\n  getAdvDmeCount($event: any) {\n    this.advDmeCount = $event;\n  }\n\n  getAdvCvmCount($event: any) {\n    this.advCvmCount = $event;\n  }\n\n  getImpuritiesCount($event: any) {\n    this.impuritiesCount = $event;\n  }\n\n  getSubstanceKey() {\n    if (this.substance) {\n      // Get Substance Name\n      this.substanceName = this.substance._name;\n      if (this.substance.codes.length > 0) {\n        this.substance.codes.forEach(element => {\n          if (element.codeSystem && element.codeSystem === 'BDNUM') {\n            if (element.type && element.type === 'PRIMARY') {\n              this.bdnum = element.code;\n            }\n          }\n        });\n      }\n    }\n  }\n\n  getProductProvenanceList(): void {\n    this.productService.getProductProvenanceList(this.substance.uuid).subscribe(results => {\n      this.provenanceList = results;\n      if (this.provenanceList && this.provenanceList.length > 0) {\n        this.foundProvenanceList = true;\n      }\n      this.loadingComplete = true;\n    });\n  }\n\n  getSubstanceProducts(pageEvent?: PageEvent, searchType?: string) {\n    this.setPageEvent(pageEvent);\n    this.showSpinner = true;  // Start progress spinner\n    const skip = this.page * this.pageSize;\n\n    const subscription = this.productService.getProducts(\n      this.order,\n      skip,\n      this.pageSize,\n      this.privateSearch,\n      this.privateFacetParams\n    ).subscribe(pagingResponse => {\n      if (searchType && searchType === 'initial') {\n        this.etagAllExport = pagingResponse.etag;\n      } else {\n        this.productService.totalRecords = pagingResponse.total;\n        this.setResultData(pagingResponse.content);\n        this.productCount = pagingResponse.total;\n        this.etag = pagingResponse.etag;\n      }\n    }, error => {\n      this.showSpinner = false;  // Stop progress spinner\n      console.log('error');\n    }, () => {\n      this.showSpinner = false;  // Stop progress spinner\n      subscription.unsubscribe();\n    });\n    this.loadingStatus = '';\n    // this.showSpinner = false;  // Stop progress spinner\n  }\n\n  export() {\n    if (this.etagAllExport) {\n      const extension = 'xlsx';\n      const url = this.getApiExportUrl(this.etagAllExport, extension);\n      if (this.authService.getUser() !== '') {\n        const dialogReference = this.dialog.open(ExportDialogComponent, {\n          // height: '215x',\n          width: '700px',\n          data: { 'extension': extension, 'type': 'substanceProduct', 'entity': 'products', 'hideOptionButtons': true }\n        });\n        // this.overlayContainer.style.zIndex = '1002';\n        dialogReference.afterClosed().subscribe(response => {\n          // this.overlayContainer.style.zIndex = null;\n          const name = response.name;\n          const id = response.id;\n          if (name && name !== '') {\n            this.loadingService.setLoading(true);\n            const fullname = name + '.' + extension;\n            this.authService.startUserDownload(url, this.privateExport, fullname, id).subscribe(response => {\n              // this.authService.startUserDownload(url, this.privateExport, fullname).subscribe(response => {\n              this.loadingService.setLoading(false);\n              const navigationExtras: NavigationExtras = {\n                queryParams: {\n                  totalSub: this.productCount\n                }\n              };\n              const params = { 'total': this.productCount };\n              this.router.navigate(['/user-downloads/', response.id]);\n            }, error => this.loadingService.setLoading(false));\n          }\n        });\n      }\n    }\n  }\n\n  getApiExportUrl(etag: string, extension: string): string {\n    return this.productService.getApiExportUrl(etag, extension);\n  }\n\n  tabSelected($event) {\n    if ($event) {\n      const evt: any = $event.tab;\n      const textLabel: string = evt.textLabel;\n      // Get Country and fromTable/Source from Tab Label\n      if (textLabel != null) {\n        this.loadingStatus = 'Loading data...';\n        this.provenance = textLabel;\n        //  const index = textLabel.indexOf(' ');\n        //  const tab = textLabel.slice(0, index);\n        // this.country = textLabel.slice(index + 1, textLabel.length);\n        // set the current result data to empty or null.\n        this.paged = [];\n\n        this.privateSearch = 'root_productIngredientAllList_substanceUuid:\\\"'\n          + this.substance.uuid + '\\\" AND root_provenance:' + this.provenance;\n\n        this.getSubstanceProducts();\n\n      }\n\n    }\n  }\n\n  sortData(sort: Sort) {\n    if (sort.active) {\n      const orderIndex = this.displayedColumns.indexOf(sort.active).toString(); // + 2; // Adding 2, for name and bdnum.\n      this.ascDescDir = sort.direction;\n      this.sortValues.forEach(sortValue => {\n        if (sortValue.displayedColumns && sortValue.direction) {\n          if (this.displayedColumns[orderIndex] === sortValue.displayedColumns && this.ascDescDir === sortValue.direction) {\n            this.order = sortValue.value;\n          }\n        }\n      });\n      this.getSubstanceProducts();\n    }\n    return;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '@gsrs-core/dynamic-component-loader';\nimport { SubstanceProductsComponent } from './substance-products.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SubstanceApplicationComponent } from './substance-application/substance-application.component';\nimport { SubstanceClinicalTrialsComponent } from './substance-clinical-trials/substance-clinical-trials.component';\nimport { SubstanceAdverseEventPtComponent } from './substance-adverseevent/adverseeventpt/substance-adverseeventpt.component';\nimport { SubstanceAdverseEventDmeComponent } from './substance-adverseevent/adverseeventdme/substance-adverseeventdme.component';\nimport { SubstanceAdverseEventCvmComponent } from './substance-adverseevent/adverseeventcvm/substance-adverseeventcvm.component';\nimport { SubstanceClinicalTrialsEuropeComponent } from './substance-clinical-trials-eu/substance-clinical-trials-eu.component';\nimport { SubstanceImpuritiesComponent } from './substance-impurities/substance-impurities.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceProductsComponent),\n    MatTableModule,\n    CdkTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatInputModule,\n    MatTabsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule\n  ],\n  declarations: [\n    SubstanceProductsComponent,\n    SubstanceApplicationComponent,\n    SubstanceClinicalTrialsComponent,\n    SubstanceAdverseEventPtComponent,\n    SubstanceAdverseEventDmeComponent,\n    SubstanceAdverseEventCvmComponent,\n    SubstanceClinicalTrialsEuropeComponent,\n    SubstanceImpuritiesComponent,\n  ]\n})\nexport class SubstanceProductsModule { }\n"],"sourceRoot":"webpack:///","file":"1421.9f98b15e8097e932.js"}