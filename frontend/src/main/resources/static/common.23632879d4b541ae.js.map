{"version":3,"mappings":"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","names":["NameResolverDialogComponent","dialogRef","gaService","data","this","name","molfile","close","sendEvent","v","i0","MAT_DIALOG_DATA","selectors","ctx","ReferencesManagerComponent","substanceService","D","substance","subRef","references","subUUID","subscription","getSubstanceDetails","pipe","take","subscribe","response","C","unsubscribe","compileReferences","forEach","indexOf","ref","uuid","matchedRef","push","time","DatePipe","transform","l","ReferencesManagerModule","CommonModule","MatTableModule","MatIconModule","MatTooltipModule","AmountFormDialogComponent","isNew","Object","keys","subsAmount","length","backup","JSON","parse","stringify","beforeClosed","f","cancel","p","StructureFormComponent","cvService","overlayContainerService","EventEmitter","getVocabularies","optical","privateStructure","opticalActivity","subscriptions","inCV","opticalActivityList","set","updatedStructure","getDomainVocabulary","c","stereoChemistryTypeList","STEREOCHEMISTRY_TYPE","list","OPTICAL_ACTIVITY","atropisomerismList","ATROPISOMERISM","access","vocab","property","some","r","value","T","ctx_r17","ctx_r19","SubstanceHistoryDialogComponent","loadingService","latest","version","status","setLoading","g","changeReason","saveSubstance","y","error","validationMessages","serverError","console","log","u"],"sources":["./src/app/core/name-resolver/name-resolver-dialog.component.ts","./src/app/core/name-resolver/name-resolver-dialog.component.html","./src/app/core/references-manager/references-manager.component.html","./src/app/core/references-manager/references-manager.component.ts","./src/app/core/references-manager/references-manager.module.ts","./src/app/core/substance-form/amount-form-dialog/amount-form-dialog.component.ts","./src/app/core/substance-form/amount-form-dialog/amount-form-dialog.component.html","./src/app/core/substance-form/structure/structure-form.component.html","./src/app/core/substance-form/structure/structure-form.component.ts","./src/app/core/substance-history-dialog/substance-history-dialog.component.html","./src/app/core/substance-history-dialog/substance-history-dialog.component.ts"],"sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { GoogleAnalyticsService } from '../google-analytics/google-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-name-resolver-dialog',\r\n  templateUrl: './name-resolver-dialog.component.html',\r\n  styleUrls: ['./name-resolver-dialog.component.scss']\r\n})\r\nexport class NameResolverDialogComponent implements OnInit {\r\n  name: string;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<NameResolverDialogComponent>,\r\n    public gaService: GoogleAnalyticsService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.data.name) {\r\n      this.name = this.data.name;\r\n    }\r\n  }\r\n\r\n  nameResolved(molfile: string): void {\r\n    this.dialogRef.close(molfile);\r\n  }\r\n\r\n  dismissDialog(): void {\r\n    this.gaService.sendEvent('nameResolverDialog', 'button:close', 'cancel resolver');\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>\r\n  Get Structure From Name\r\n</h1>\r\n<div mat-dialog-content>\r\n  <app-name-resolver (structureSelected)=\"nameResolved($event)\" [startingName] = \"name\"></app-name-resolver>\r\n</div>\r\n<div class=\"flex-row\" mat-dialog-actions>\r\n  <span class=\"middle-fill\"></span>\r\n  <button mat-button (click)=\"dismissDialog()\">Close</button>\r\n</div>\r\n","\r\n\r\n\r\n<table mat-table [dataSource]=\"matchedRef\">\r\n\r\n  <ng-container matColumnDef=\"index\">\r\n    <th mat-header-cell *matHeaderCellDef> Index </th>\r\n    <td mat-cell *matCellDef=\"let ref\">{{getParentIndex(ref)}}\r\n    </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"citation\">\r\n    <th mat-header-cell *matHeaderCellDef> Source Text / Citation </th>\r\n    <td mat-cell *matCellDef=\"let ref\">\r\n      <a *ngIf=\"ref.url\" target=\"_blank\" [href]=\"ref.url\" appTrackLinkEvent evCategory=\"substanceOverview\">{{ref.citation}}</a>\r\n      <span *ngIf=\"!ref.url\">{{ref.citation}}</span>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"docType\">\r\n    <th mat-header-cell *matHeaderCellDef> Source Type </th>\r\n    <td mat-cell *matCellDef=\"let ref\"> {{ref.docType}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"tags\">\r\n    <th mat-header-cell *matHeaderCellDef> Tags </th>\r\n    <td mat-cell *matCellDef=\"let ref\">\r\n      <span  *ngIf = \"showmore && (ref.tags && ref.tags.length > 0)\" ><span class = \"badge\" *ngFor = \"let tag of ref.tags\"> {{tag}} </span> <a *ngIf = \"ref.tags.length > 1\" class = \"morelink\" (click) = \"showmore = !showmore\">hide</a> </span>  \r\n        <span  *ngIf = \"!showmore && (ref.tags && ref.tags.length > 0)\" ><span class = \"badge\" > {{ref.tags.length > 0? ref.tags[0]:null}}</span> <a *ngIf = \"ref.tags.length > 1\" class = \"morelink\" (click) = \"showmore = !showmore\">more...</a> </span>  \r\n        </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"files\">\r\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> File </th>\r\n    <td mat-cell *matCellDef=\"let ref\">    \r\n      <a *ngIf =\"ref.uploadedFile\" [href] = \"ref.uploadedFile\"><mat-icon color = \"primary\" class = \"blue\" svgIcon=\"cloud_download\"></mat-icon></a>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"lastEdited\">\r\n    <th mat-header-cell *matHeaderCellDef> Date Accessed </th>\r\n    <td mat-cell *matCellDef=\"let ref\">\r\n      {{convertTimestamp(ref.lastEdited)}}\r\n    </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"access\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Access </th>\r\n      <td mat-cell *matCellDef=\"let reference\"> \r\n        <span *ngIf=\"reference.access.length\" matTooltip=\"Not Public\">\r\n          <mat-icon svgIcon=\"lock\" class=\"icon-align blue-font\" *ngIf=\"reference.access.length\"></mat-icon></span>\r\n          <span *ngIf=\"!reference.access.length\" matTooltip=\"Public\">\r\n              <mat-icon svgIcon=\"lock_open\" class=\"icon-align blue-font\" *ngIf=\"reference.access.length === 0\"></mat-icon></span>\r\n        </td>\r\n    </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport {SubstanceDetail, SubstanceReference} from '../substance/substance.model';\r\nimport {SubstanceService} from '../substance/substance.service';\r\nimport {DatePipe} from '@angular/common';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-references-manager',\r\n  templateUrl: './references-manager.component.html',\r\n  styleUrls: ['./references-manager.component.scss']\r\n})\r\nexport class ReferencesManagerComponent implements OnInit {\r\n  @Input() substance?: SubstanceDetail;\r\n  @Input() subUUID?: string;\r\n  @Input() references: Array<String>;\r\n  subRef: Array<SubstanceReference>;\r\n  matchedRef: SubstanceReference[] = [];\r\n  showmore = false;\r\n  displayedColumns: string[] = ['index', 'citation', 'docType', 'tags', 'files', 'lastEdited', 'access'];\r\n\r\n\r\n  constructor(private substanceService: SubstanceService) { }\r\n\r\n  ngOnInit() {\r\n    if (this.substance) {\r\n      this.subRef = this.substance.references;\r\n    } else if (this.subUUID) {\r\n      const subscription = this.substanceService.getSubstanceDetails(this.subUUID).pipe(take(1)).subscribe(response => {\r\n        if (response) {\r\n          this.substance = response;\r\n          this.subRef = this.substance.references;\r\n        }\r\n        subscription.unsubscribe();\r\n      }, error => {\r\n        subscription.unsubscribe();\r\n      });\r\n    }\r\n    if (this.subRef) {\r\n      this.compileReferences();\r\n    }\r\n  }\r\n\r\n  compileReferences() {\r\n    if (this.substance.references) {\r\n      this.substance.references.forEach(ref => {\r\n        const uuid = ref.uuid;\r\n        if (this.references.indexOf(uuid) > -1) {\r\n          this.matchedRef.push(ref);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  convertTimestamp(time: number) {\r\n    const datePipe = new DatePipe('en-US');\r\n    return datePipe.transform(time, 'MMM dd, yyyy');\r\n }\r\n\r\n  getParentIndex(uuid: SubstanceReference) {\r\n    return (this.subRef.indexOf(uuid) + 1) ;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatTableModule} from '@angular/material/table';\r\n\r\nimport {ReferencesManagerComponent} from './references-manager.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatIconModule,\r\n    MatTooltipModule\r\n  ],\r\n\r\n  declarations: [ReferencesManagerComponent],\r\n  exports: [ReferencesManagerComponent],\r\n})\r\nexport class ReferencesManagerModule { }\r\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {SubstanceAmount} from '@gsrs-core/substance';\n\n@Component({\n  selector: 'app-amount-form-dialog',\n  templateUrl: './amount-form-dialog.component.html',\n  styleUrls: ['./amount-form-dialog.component.scss']\n})\nexport class AmountFormDialogComponent implements OnInit {\n  isNew: boolean;\n  subsAmount: SubstanceAmount;\n  backup: SubstanceAmount;\n\n  constructor(\n    public dialogRef: MatDialogRef<AmountFormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.isNew = Object.keys(data.subsAmount).length < 2;\n  }\n\n  ngOnInit() {\n    this.subsAmount = this.data.subsAmount;\n    this.data = this.data.subsAmount;\n    this.backup = JSON.parse(JSON.stringify(this.data));\n    this.dialogRef.beforeClosed().subscribe(() => this.dialogRef.close(this.data));\n\n  }\n\n  save(): void {\n    this.dialogRef.close(this.data);\n  }\n\n  cancel(): void {\n    this.data.cancel = true;\n    this.data = this.backup;\n    this.dialogRef.close(this.data);\n  }\n\n}\n","<h1 mat-dialog-title>{{isNew ? 'Add' : 'Edit'}} Parameter</h1>\n<div mat-dialog-content>\n  <div>\n    <app-amount-form [substanceAmount]=\"subsAmount\" #amountForm>\n    </app-amount-form>\n    <div class=\"actions\">\n      <span class=\"middle-fill\"></span>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button mat-button [disabled]=\"!amountForm\" (click)=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","<form class=\"structure-form\" *ngIf=\"structure && type === 'structure'\">\n  <div class=\"form-row\">\n    <mat-form-field class=\"mol-formula\">\n      <input matInput placeholder=\"Molecular Formula\" [(ngModel)]=\"structure.formula\" name=\"formula\" required />\n    </mat-form-field>\n\n    <mat-form-field class=\"stereochemistry\">\n      <mat-label>Stereochemistry</mat-label>\n      <mat-select [(ngModel)]=\"structure.stereochemistry\" name=\"stereochemistry\">\n        <mat-option *ngFor=\"let type of stereoChemistryTypeList\" [value]=\"type.value\">\n          {{type.display}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field class=\"optical-activity\">\n      <mat-label>Optical Activity</mat-label>\n      <mat-select [(ngModel)]=\"structure.opticalActivity\" name=\"opticalActivity\">\n        <mat-option *ngFor=\"let activity of opticalActivityList\" [value]=\"activity.value\">\n          {{activity.display}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field class=\"atropisomerism\">\n        <mat-label>Additional Stereochemistry</mat-label>\n        <mat-select [(ngModel)]=\"structure.atropisomerism\" name=\"additionalStereochemistry\">\n          <mat-option *ngFor=\"let activity of atropisomerismList\" [value]=\"activity.value\">\n            {{activity.display}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n  </div>\n  <div class=\"form-row\">\n    <div class=\"key-value-pair\">\n      <div class=\"key\">\n        Molecular Weight\n      </div>\n      <div class=\"value\">\n        {{structure.mwt}}\n      </div>\n    </div>\n    <div class=\"key-value-pair\">\n      <div class=\"key\">\n        Defined Stereocenters\n      </div>\n      <div class=\"value\">\n        {{structure.definedStereo}} / {{structure.stereoCenters}}\n      </div>\n    </div>\n    <div class=\"key-value-pair\">\n      <div class=\"key\">\n        EZ Centers\n      </div>\n      <div class=\"value\">\n        {{structure.ezCenters}}\n      </div>\n    </div>\n    <div class=\"key-value-pair\">\n      <div class=\"key\">\n        Structure Charge\n      </div>\n      <div class=\"value\">\n        {{structure.charge}}\n      </div>\n    </div>\n    <div *ngIf=\"!hideAccess\">\n    <!--  <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"structure.access\">\n      </app-access-manager>-->\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"stereo-comments\">\n      <div class=\"textarea-label\">Stereo Comments</div>\n      <textarea placeholder=\"Enter text here\" [(ngModel)]=\"structure.stereoComments\" name=\"stereoComments\"></textarea>\n    </div>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"structure\"></app-audit-info>\n  </div>\n</form>","import {Component, OnInit, Input, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport { SubstanceMoiety, SubstanceStructure } from '@gsrs-core/substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { InterpretStructureResponse } from '../../structure/structure-post-response.model';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport {Subscription} from 'rxjs';\n\n@Component({\n  selector: 'app-structure-form',\n  templateUrl: './structure-form.component.html',\n  styleUrls: ['./structure-form.component.scss']\n})\nexport class StructureFormComponent implements OnInit, OnDestroy {\n  private privateStructure: SubstanceStructure | SubstanceMoiety = {};\n  stereoChemistryTypeList: Array<VocabularyTerm> = [];\n  opticalActivityList: Array<VocabularyTerm> = [];\n  atropisomerismList: Array<VocabularyTerm> = [];\n  optical: string;\n  @Input() hideAccess = true;\n  @Input() showSettings = false;\n  @Input() type?: string;\n  @Output() structureImported = new EventEmitter<InterpretStructureResponse>();\n  private subscriptions: Array<Subscription> = [];\n\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private overlayContainerService: OverlayContainer\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n    this.optical = this.privateStructure.opticalActivity;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  @Input()\n  set structure(updatedStructure: SubstanceStructure | SubstanceMoiety) {\n\n\n    if (updatedStructure != null) {\n      this.privateStructure = updatedStructure;\n      if (this.privateStructure.opticalActivity === 'NONE' && !this.inCV(this.opticalActivityList, this.privateStructure.opticalActivity)) {\n        this.privateStructure.opticalActivity = 'none';\n      }\n    }\n  }\n\n  get structure(): (SubstanceStructure | SubstanceMoiety) {\n    if (this.privateStructure.opticalActivity === 'NONE' && !this.inCV(this.opticalActivityList, this.privateStructure.opticalActivity)) {\n      this.privateStructure.opticalActivity = 'none';\n    }\n    return this.privateStructure;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('STEREOCHEMISTRY_TYPE', 'OPTICAL_ACTIVITY', 'ATROPISOMERISM').subscribe(response => {\n      this.stereoChemistryTypeList = response['STEREOCHEMISTRY_TYPE'].list;\n      this.opticalActivityList = response['OPTICAL_ACTIVITY'].list;\n      this.atropisomerismList = response['ATROPISOMERISM'].list;\n    });\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.privateStructure.access = access;\n  }\n\n\n  inCV(vocab: Array<VocabularyTerm>, property: string): boolean {\n    if (vocab) {\n      return vocab.some(r => property === r.value);\n    } else {\n      return true;\n    }\n\n  }\n}\n","<div mat-dialog-title>\n        <h3 >Version Control</h3>\n        </div>\n      <div mat-dialog-content>\n          <div class = \"main-text\">\n\n      \n      <div *ngIf = \"status === 'start'\">\n            Are you sure you'd like to restore version {{version}}?\n            </div>\n        <div *ngIf = \"status === 'running'\">\n            Restoring...\n        </div>\n        <div *ngIf = \"status === 'complete'\">\n            Record restored successfullly. Close this dialog to redirect to the new version.\n        </div>\n        <div *ngIf = \"status === 'failed'\">\n              <div> There was a problem restoring this version. </div>\n              <div>Would you like to see the error details?</div>\n              <a class = \"primary-color\" (click) = \"status = 'error'\">Show errors</a>\n\n        </div>\n    </div>\n\n    <div class = \"errors\" *ngIf = \"status === 'error'\">\n        <div class = \"error-title\">\n                Error restoring record. Here is some information on the error to share with a system admin / developers.\n\n        </div>\n        <div *ngIf=\"validationMessages\">\n                <span *ngIf = \" validationMessages.length > 0\"   >\n                    <div class=\"validation-message\" *ngFor=\"let message of validationMessages; index as i\" >\n                            {{message.message.message? message.message.message : message.message}}\n                    </div>\n                </span>\n        </div>\n\n        <div *ngIf = \"serverError\">\n                {{this.serverError}}\n            </div>\n            <div *ngIf = \"!validationMessages && !serverError\">\n                <i>No error information returned from the server</i>\n            </div>\n        </div>\n\n        </div>\n      <div mat-dialog-actions>\n        <button mat-flat-button color=\"primary\" *ngIf = \"status !== 'complete'\" matDialogClose>Cancel</button>\n\n      \n        <span class=\"middle-fill\"></span>\n        <button mat-flat-button color=\"primary\"  *ngIf = \"status === 'start'\" (click) =\"accept()\">Accept</button>\n        <button mat-flat-button color=\"primary\" *ngIf = \"status === 'complete'\" (click) = \"close()\">Close</button>\n\n      </div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { LoadingService } from '@gsrs-core/loading';\nimport { SubstanceService } from '@gsrs-core/substance/substance.service';\nimport { SubstanceDetail } from '@gsrs-core/substance/substance.model';\nimport { JsonDialogComponent } from '@gsrs-core/substance-form/json-dialog/json-dialog.component';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { OverlayContainer } from '@angular/cdk/overlay';\n\n@Component({\n  selector: 'app-substance-history-dialog',\n  templateUrl: './substance-history-dialog.component.html',\n  styleUrls: ['./substance-history-dialog.component.scss']\n})\nexport class SubstanceHistoryDialogComponent implements OnInit {\n  public substance: SubstanceDetail;\n  public status: string;\n  public latest: string;\n  public version: any;\n  public validationMessages: Array<string>;\n  public serverError: string;\n\n\n  constructor(\n    private loadingService: LoadingService,\n    private substanceService: SubstanceService,\n    public dialogRef: MatDialogRef<SubstanceHistoryDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n\n  ) { }\n\n  ngOnInit() {\n    this.substance = this.data.substance;\n    this.latest = this.data.latest;\n    this.version = this.data.version;\n    this.status = 'start';\n  }\n\n  close(): void {\n    this.dialogRef.close('success');\n\n  }\n\n  accept() {\n    this.status = 'running';\n      this.loadingService.setLoading(true);\n      this.substanceService.getSubstanceDetails(this.substance.uuid, this.version).subscribe( sub => {\n        this.substance.changeReason = 'reverted to version ' + this.version;\n        this.substance.version = this.latest;\n        this.substanceService.saveSubstance(this.substance).subscribe( response => {\n          this.substance = response;\n          this.status = 'complete';\n          this.loadingService.setLoading(false);\n        }, error => {\n          this.status = 'failed';\n          this.loadingService.setLoading(false);\n          if (error && error.error && error.error.validationMessages) {\n            this.validationMessages = error.error.validationMessages;\n          } else {\n            this.serverError = error;\n          }\n\n        });\n      }, error => {\n        this.status = 'failed';\n          this.loadingService.setLoading(false);\n          console.log(error);\n      });\n    }\n\n  }\n\n"],"sourceRoot":"webpack:///","file":"common.23632879d4b541ae.js"}