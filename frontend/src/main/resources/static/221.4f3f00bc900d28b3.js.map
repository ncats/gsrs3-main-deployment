{"version":3,"mappings":"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","names":["PhysicalParameterFormComponent","utilsService","this","privateParameter","set","parameter","amount","parameterName","e","i0","selectors","ctx_r2","ctx_r4","PhysicalParameterFormDialogComponent","dialogRef","subsParameter","isNew","Object","keys","length","close","MAT_DIALOG_DATA","ctx_r3","ctx_r35","ctx_r37","PhysicalModificationFormComponent","cvService","dialog","overlayContainerService","substanceFormService","EventEmitter","privateMod","physicalModificationRole","invalid","present","parameters","forEach","param","type","getVocabularies","overlayContainer","getContainerElement","mod","getDomainVocabulary","subscribe","o","modRoleList","response","PHYSICAL_MODIFICATION_ROLE","list","$$deletedCode","newUUID","deleteTimer","setTimeout","modDeleted","emit","emitOtherLinkUpdate","clearTimeout","access","open","data","width","style","zIndex","dialogSubscription","afterClosed","newParams","subscriptions","push","event","updateRequired","a","parameterCopyString","JSON","stringify","parse","newParameter","s","unshift","key","id","splice","amt","displayAmount","ctx","ctx_r6","ctx_r9","SubstanceFormPhysicalModificationsCardComponent","substanceFormPhysicalModificationsService","scrollToService","gaService","r","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","physicalSubscription","substancePhysicalModifications","modifications","componentDestroyed","subscription","unsubscribe","addStructuralModification","addSubstancePhysicalModification","scrollToElement","modification","deleteSubstancePhysicalModification","SubstanceCardBaseFilteredList","SubstanceFormPhysicalModificationsModule","u","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","MatListModule"],"sources":["./src/app/core/substance-form/physical-parameter-form/physical-parameter-form.component.ts","./src/app/core/substance-form/physical-parameter-form/physical-parameter-form.component.html","./src/app/core/substance-form/physical-parameter-form-dialog/physical-parameter-form-dialog.component.html","./src/app/core/substance-form/physical-parameter-form-dialog/physical-parameter-form-dialog.component.ts","./src/app/core/substance-form/physical-modifications/physical-modification-form.component.html","./src/app/core/substance-form/physical-modifications/physical-modification-form.component.ts","./src/app/core/substance-form/physical-modifications/substance-form-physical-modifications-card.component.html","./src/app/core/substance-form/physical-modifications/substance-form-physical-modifications-card.component.ts","./src/app/core/substance-form/physical-modifications/substance-form-physical-modifications.module.ts"],"sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {PhysicalModificationParameter, SubstanceAmount, SubstanceParameter} from '@gsrs-core/substance';\nimport {UtilsService} from '@gsrs-core/utils';\n\n@Component({\n  selector: 'app-physical-parameter-form',\n  templateUrl: './physical-parameter-form.component.html',\n  styleUrls: ['./physical-parameter-form.component.scss']\n})\nexport class PhysicalParameterFormComponent implements OnInit {\n  private privateParameter: PhysicalModificationParameter;\n  constructor(\n    private utilsService: UtilsService) { }\n\n  ngOnInit() {\n  }\n\n  @Input()\n  set parameter(parameter: PhysicalModificationParameter) {\n    this.privateParameter = parameter;\n    if ( !this.privateParameter.amount) {\n      this.privateParameter.amount = {};\n    }\n  }\n\n  get parameter(): PhysicalModificationParameter {\n    return this.privateParameter;\n  }\n\n  get isValid(): boolean {\n    return (this.privateParameter.parameterName != null && this.privateParameter.parameterName !== '');\n  }\n}\n","<div class=\"parameter-form-container\">\n  <div class=\"form-row\">\n    <mat-form-field class=\"name\">\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"parameter.parameterName\" required name=\"name\" />\n    </mat-form-field>\n  </div>\n  <div class=\"amount-form-container\">\n    <div class=\"amount-title\">Amount</div>\n    <app-amount-form [substanceAmount]=\"parameter.amount\"></app-amount-form>\n  </div>\n</div>\n","<h1 mat-dialog-title>{{isNew ? 'Add' : 'Edit'}} Parameter</h1>\n<div mat-dialog-content>\n  <div *ngIf=\"subsParameter\">\n    <app-physical-parameter-form [parameter]=\"subsParameter\" #parameterForm>\n    </app-physical-parameter-form>\n    <div class=\"actions\">\n      <span class=\"middle-fill\"></span>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button mat-button [disabled]=\"!parameterForm || !parameterForm.isValid\" (click)=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {PhysicalModificationParameter, SubstanceParameter} from '@gsrs-core/substance';\n\n@Component({\n  selector: 'app-physical-parameter-form-dialog',\n  templateUrl: './physical-parameter-form-dialog.component.html',\n  styleUrls: ['./physical-parameter-form-dialog.component.scss']\n})\nexport class PhysicalParameterFormDialogComponent implements OnInit {\n  isNew: boolean;\n\n  constructor(\n    public dialogRef: MatDialogRef<PhysicalParameterFormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public subsParameter: PhysicalModificationParameter\n  ) {\n    this.isNew = Object.keys(subsParameter).length < 1;\n  }\n\n  ngOnInit() {\n  }\n\n  save(): void {\n    this.dialogRef.close(this.subsParameter);\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<div class=\"physical-form-container\">\n  <div *ngIf=\"mod.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete name\" (click)=\"deleteMod()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n    <app-cv-input domain = \"PHYSICAL_MODIFICATION_ROLE\" class = \"type\" title = \"Modification Role\" (valueChange) = \"updateRole($event)\" [model] = \"mod.physicalModificationRole\"></app-cv-input>\n    <div class = 'amount'>\n      <div class = \"label amt-label\">\n        Parameters\n      </div>\n      <button mat-icon-button matTooltip=\"add / edit parameters\" (click)=\"(openPropertyParameter())\">\n        <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n      <div class = 'param-display'>\n          <mat-list >\n              <div  mat-list-item *ngFor=\"let parameter of mod.parameters; index as index\" >\n                 <button mat-icon-button (click) = \"deleteParameter(index)\"  class = \"parameter-delete-icon\">\n                   <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n                  </button>\n  \n              <span>{{parameter.parameterName}}</span>\n              <span *ngIf=\"parameter.amount != null\">\n                <span>\n                  &nbsp;\n                  {{parameter.amount.type}}\n                </span>\n                <span *ngIf=\"parameter.amount.average != null && parameter.amount.average != ''\">\n                  &nbsp;-\n                  &nbsp;\n                  {{parameter.amount.average}}\n                  &nbsp;\n                  {{parameter.amount.units}}\n                </span>\n                <span *ngIf=\"(parameter.amount.low != null && parameter.amount.low != '')\n                    || (parameter.amount.high != null && parameter.amount.high != '')\">\n                  <span *ngIf=\"parameter.amount.average == null || parameter.amount.average == ''\">\n                    &nbsp;\n                    -\n                  </span>\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.amount.high == null || parameter.amount.high == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.amount.low == null || parameter.amount.low == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.amount.low != null && parameter.amount.low != ''\">\n                    {{parameter.amount.low}}\n                  </span>\n                  <span *ngIf=\"parameter.amount.low != null && parameter.amount.low != ''\n                      && parameter.amount.high != null && parameter.amount.high != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.amount.high != null && parameter.amount.high != ''\">\n                    {{parameter.amount.high}}\n                  </span>\n                  ]\n                  <span *ngIf=\"parameter.amount.average == null || parameter.amount.average == ''\">\n                    &nbsp;\n                    {{parameter.amount.units}}\n                    &nbsp;\n                    (average)\n                  </span>\n                </span>\n                <span *ngIf=\"parameter.amount.average != null && parameter.amount.average != ''\">\n                  &nbsp;\n                  (average)\n                </span>\n                <span *ngIf=\"(parameter.amount.lowLimit != null && parameter.amount.lowLimit != '')\n                        || (parameter.amount.highLimit != null && parameter.amount.highLimit != '')\">\n                  &nbsp;-\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.amount.highLimit == null || parameter.amount.highLimit == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.amount.lowLimit == null || parameter.amount.lowLimit == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.amount.lowLimit != null && parameter.amount.lowLimit != ''\">\n                    {{parameter.amount.lowLimit}}\n                  </span>\n                  <span *ngIf=\"parameter.amount.lowLimit != null && parameter.amount.lowLimit != ''\n                          && parameter.amount.highLimit != null && parameter.amount.highLimit != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.amount.highLimit != null && parameter.amount.highLimit != ''\">\n                    {{parameter.amount.highLimit}}\n                  </span>\n                  ]\n                  &nbsp;(limits)\n                </span>\n                <span *ngIf=\"parameter.amount.nonNumericValue\">\n                  &nbsp;-&nbsp;\n                  {{parameter.amount.nonNumericValue}}\n                </span>\n              </span>\n              <button mat-icon-button (click)=\"openPropertyParameter(parameter)\"   class = \"parameter-icon\">\n                  <mat-icon svgIcon=\"edit\"></mat-icon>\n              </button>\n          </div>\n          </mat-list>\n      </div>\n\n    </div>\n    <div>\n      <mat-form-field class=\"group\">\n        <input matInput placeholder=\"Group\" [(ngModel)]=\"mod.modificationGroup\" required name=\"group\" />\n      </mat-form-field>\n    </div>\n    <div class = \"access\">\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"mod.access\">\n      </app-access-manager>\n    </div>\n\n\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"mod\"></app-audit-info>\n  </div>\n  <div class = \"form-row invalid-note\" *ngIf = \"invalid\">\n    <div>*physical modifications require a modification role or parameter\n  </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, HostListener} from '@angular/core';\nimport {PhysicalModification, SubstanceAmount, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\nimport {PhysicalParameterFormDialogComponent} from '@gsrs-core/substance-form/physical-parameter-form-dialog/physical-parameter-form-dialog.component';\n\n@Component({\n  selector: 'app-physical-modification-form',\n  templateUrl: './physical-modification-form.component.html',\n  styleUrls: ['./physical-modification-form.component.scss']\n})\nexport class PhysicalModificationFormComponent implements OnInit {\n  private privateMod: PhysicalModification;\n  @Output() modDeleted = new EventEmitter<PhysicalModification>();\n  modTypeList: Array<VocabularyTerm> = [];\n  modRoleList: Array<VocabularyTerm> = [];\n  modProcessList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  invalid = false;\n\n  @HostListener('focusout') onFocusout() {\n    if (!this.privateMod.physicalModificationRole) {\n      let present = false;\n      if (this.privateMod.parameters){\n      this.privateMod.parameters.forEach (param => {\n        if (param.amount.type) {\n          present = true;\n        }\n      });\n      if (!present) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    } else {\n      this.invalid = true;\n    }\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  @HostListener('focusin') onFocusin() {\n    if (!this.privateMod.physicalModificationRole) {\n      let present = false;\n      if (this.privateMod.parameters) {\n      this.privateMod.parameters.forEach (param => {\n        if (param.amount.type) {\n          present = true;\n        }\n      });\n      if (!present) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    } else {\n      this.invalid = true;\n    }\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set mod(mod: PhysicalModification) {\n    this.privateMod = mod;\n\n  }\n\n  get mod(): PhysicalModification {\n    return this.privateMod;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('PHYSICAL_MODIFICATION_ROLE').subscribe(response => {\n      this.modRoleList = response['PHYSICAL_MODIFICATION_ROLE'].list;\n    });\n  }\n\n  deleteMod(): void {\n    this.privateMod.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateMod\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.modDeleted.emit(this.mod);\n        this.substanceFormService.emitOtherLinkUpdate();\n      }, 1000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMod.$$deletedCode;\n  }\n\n  updateRequired(): void {\n    if (!this.privateMod.physicalModificationRole) {\n      let present = false;\n      if (this.privateMod.parameters){\n      this.privateMod.parameters.forEach (param => {\n        if (param.amount.type) {\n          present = true;\n        }\n      });\n      if (!present) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    } else {\n      this.invalid = true;\n    }\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.mod.access = access;\n  }\n\n  openParameterDialog(): void {\n    if (!this.mod.parameters) {\n      this.mod.parameters = [];\n    }\n    const dialogRef = this.dialog.open(PhysicalParameterFormDialogComponent, {\n      data: this.mod.parameters,\n      width: '1080px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newParams => {\n      this.overlayContainer.style.zIndex = null;\n      if (newParams) {\n        this.mod.parameters = newParams;\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateRole(event: any) {\n    this.mod.physicalModificationRole = event;\n    this.updateRequired();\n  }\n\n  openPropertyParameter(parameter?: any): void {\n\n    let isNew: boolean;\n    if (parameter == null) {\n      isNew = true;\n      parameter = { amount: {} };\n    }\n    const parameterCopyString = JSON.stringify(parameter);\n\n\n    const dialogRef = this.dialog.open(PhysicalParameterFormDialogComponent, {\n      data: JSON.parse(parameterCopyString),\n      width: '1200px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe(newParameter => {\n      this.overlayContainer.style.zIndex = null;\n      if (newParameter != null) {\n        if (this.mod.parameters == null) {\n          this.mod.parameters = [];\n        }\n        if (isNew) {\n          this.mod.parameters.unshift(newParameter);\n        } else {\n          Object.keys(newParameter).forEach(key => {\n            parameter[key] = newParameter[key];\n          });\n        }\n        this.updateRequired();\n      }\n    });\n  }\n\n  deleteParameter(id: number): void {\n    this.mod.parameters.splice(id, 1);\n  }\n\n  displayAmount(amt: SubstanceAmount): string {\n      return this.utilsService.displayAmount(amt);\n  }\n\n\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addStructuralModification()\">\n    Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n  <div  class = \"alternate-backgrounds\" *ngFor=\"let mod of modifications; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-physical-modification-' + index\" >\n    <app-physical-modification-form [mod]=\"mod\" (modDeleted)=\"deletePhysicalModification($event)\" ></app-physical-modification-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n\n  <div class=\"flex-row\" *ngIf = \"modifications && modifications.length > 0\">\n      <span class = \"middle-fill\"></span>\n         <button mat-button (click)=\"addStructuralModification()\" *ngIf = \"modifications && modifications.length > 0\">\n          Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n</div>","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {PhysicalModification} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceFormPhysicalModificationsService } from './substance-form-physical-modifications.service';\n\n@Component({\n  selector: 'app-substance-form-physical-modifications-card',\n  templateUrl: './substance-form-physical-modifications-card.component.html',\n  styleUrls: ['./substance-form-physical-modifications-card.component.scss']\n})\nexport class SubstanceFormPhysicalModificationsCardComponent extends SubstanceCardBaseFilteredList<PhysicalModification>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  modifications: Array<PhysicalModification>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormPhysicalModificationsService: SubstanceFormPhysicalModificationsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form agent modifications';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Physical Modifications');\n  }\n\n  ngAfterViewInit() {\n    const physicalSubscription = this.substanceFormPhysicalModificationsService.substancePhysicalModifications.subscribe(modifications => {\n      this.modifications = modifications;\n    });\n    this.subscriptions.push(physicalSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addStructuralModification();\n  }\n\n  addStructuralModification(): void {\n    this.substanceFormPhysicalModificationsService.addSubstancePhysicalModification();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-physical-modification-0`, 'center');\n    });\n  }\n\n  deletePhysicalModification(modification: PhysicalModification): void {\n    this.substanceFormPhysicalModificationsService.deleteSubstancePhysicalModification(modification);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {SubstanceFormPhysicalModificationsCardComponent} from '@gsrs-core/substance-form/physical-modifications/substance-form-physical-modifications-card.component';\nimport { PhysicalModificationFormComponent } from './physical-modification-form.component';\nimport { MatListModule } from '@angular/material/list';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormPhysicalModificationsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    MatListModule\n  ],\n  declarations: [\n    SubstanceFormPhysicalModificationsCardComponent,\n    PhysicalModificationFormComponent\n  ]\n})\nexport class SubstanceFormPhysicalModificationsModule { }\n"],"sourceRoot":"webpack:///","file":"221.4f3f00bc900d28b3.js"}