include "products-core.conf"
include "products-env.conf"
include "products-env-db.conf"

##################################################################
# MAIN CONFIGURATION                                            ##
##################################################################

spring.application.name="products"
server.servlet.context-path="/"${spring.application.name}
server.servlet.context-path=${?MS_SERVLET_CONTEXT_PATH_PRODUCTS}

ix.home=${spring.application.name}".ix"
ix.home=${?IX_HOME}

# We need to point to the substances service ginas.ix folder
ix.home_substances="substances.ix"
ix.home_substances=${?IX_HOME_SUBSTANCES}

# Reassign deprecated values
APPLICATION_HOST=${?GATEWAY_HOST}
APPLICATION_HOST_PORT=${?GATEWAY_HOST_PORT}

application.host="http://localhost:8080"
application.host=${?APPLICATION_HOST}



# Server port is used in embedded Tomcat
server.port=""
server.port=${?MS_SERVER_PORT_PRODUCTS}

# Secure session off for dev, but if using HTTPS it's better to have it on
gsrs.sessions.sessionSecure=false
gsrs.sessions.sessionSecure=${?GSRS_SESSIONS_SESSION_SECURE}

gsrs.substances.molwitch.enabled=false


# PUT YOUR SOME SERVICE SPECIFIC ADDITIONS HERE

debug=false
debug=${?DEBUG_PRODUCTS}

spring.main.allow-bean-definition-overriding=true

spring.main.allow-circular-references=false
spring.main.allow-circular-references=${?MS_ALLOW_CIRCULAR_REFERENCES_PRODUCTS}

spring.mvc.pathmatch.matching-strategy=ant_path_matcher


# export path, has a default value for each microservice, but can be overridden.
# in practice, it should be the same disk location at the substances export path.
# it might make sense to use ${IX_HOME_SUBSTANCES}/exports
ix.ginas.export.path=${?MS_EXPORT_PATH_PRODUCTS}

# maximum file upload size
spring.servlet.multipart.max-file-size=512MB
spring.servlet.multipart.max-request-size=512MB

##################################################################
# SPRING BOOT ACTUATOR SETTINGS FOR MICROSERVICE HEALTH CHECKS  ##
##################################################################
# turn off rabbit mq check for now since we don't use it otherwise it will say we are down
management.health.rabbit.enabled: false

management.endpoints.web.base-path="/service-info/api/v1/"${spring.application.name}"/actuator"
management.endpoints.web.exposure.include=${?MS_ACTUATOR_EXPOSE_ENDPOINTS_PRODUCTS}
management.endpoint.health.show-details="NEVER"
management.endpoint.health.show-details=${?MS_ACTUATOR_SHOW_HEALTH_DETAILS}
management.endpoint.health.show-details=${?MS_ACTUATOR_SHOW_HEALTH_DETAILS_PRODUCTS}


##################################################################
# GSRS CONFIGURATION REPORTS                                    ##
##################################################################

# See document 'How configuration works' for discussion of security implications.
# If in doubt, you probably want false (default) for all optons in production or even online development instances
gsrs.extensions.config.report.api.enabled=${?EXTENSIONS_CONFIG_REPORT_API_ENABLED}
gsrs.services.config.properties.report.api.enabled=${?CONFIG_PROPERTIES_REPORT_API_ENABLED}
gsrs.services.config.properties.report.log.enabled=${?CONFIG_PROPERTIES_REPORT_LOG_ENABLED}

##################################################################
# ENDPOINTS CONFIGURATION                                       ##
##################################################################
include "entity-service-info-endpoints.conf"
include "basic-service-info-endpoints.conf"
gsrs.serviceinfo.api.endpoints.entities = ["products"]


##################################################################
# EUREKA SETTINGS                                               ##
##################################################################

eureka.instance.hostname=${spring.application.name}
eureka.client.serviceUrl.defaultZone="http://localhost:8761/eureka"
eureka.client.serviceUrl.defaultZone=${?EUREKA_SERVICE_URL}

eureka.client.enabled=false
eureka.client.enabled=${?EUREKA_CLIENT_ENABLED}
ribbon.eureka.enabled=false
ribbon.eureka.enabled=${?RIBBON_EUREKA_ENABLED}

eureka.instance.statusPageUrl="${application.host}/ginas/app${management.endpoints.web.base-path}/health"
eureka.instance.statusPageUrl=${?EUREKA_STATUS_PAGE_URL_PRODUCTS}
eureka.instance.healthCheckUrl="${application.host}/ginas/app${management.endpoints.web.base-path}/health"
eureka.instance.healthCheckUrl=${?EUREKA_HEALTH_CHECK_URL_PRODUCTS}


##################################################################
# DATABASE CONNECTION                                           ##
##################################################################

ix.h2: {
        base = ./${ix.home}/h2,
        substances = ./${ix.home_substances}/h2
      }

spring.datasource.url="jdbc:h2:"${ix.h2.substances}"/sprinxight;AUTO_SERVER=TRUE"
   spring.datasource.url=${?DB_URL_SUBSTANCES}
spring.datasource.driverClassName=org.h2.Driver
   spring.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME}
   spring.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_SUBSTANCES}
spring.datasource.username=${?DB_USERNAME}
    spring.datasource.username=${?DB_USERNAME_SUBSTANCES}
spring.datasource.password=${?DB_PASSWORD}
    spring.datasource.password=${?DB_PASSWORD_SUBSTANCES}
spring.datasource.connectionTimeout=120000
   spring.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT}
   spring.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_SUBSTANCES}
spring.datasource.maximumPoolSize=50
   spring.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE}
   spring.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_SUBSTANCES}
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
   spring.jpa.database-platform=${?DB_DIALECT}
   spring.jpa.database-platform=${?DB_DIALECT_SUBSTANCES}
spring.jpa.hibernate.ddl-auto=none
   spring.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO}
   spring.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_SUBSTANCES}
spring.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS}
   spring.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS_SUBSTANCES}
spring.hibernate.show-sql=false

product.datasource.url="jdbc:h2:"${ix.h2.base}"/appinxight;AUTO_SERVER=TRUE"
   product.datasource.url=${?DB_URL_SRSCID}
   product.datasource.url=${?DB_URL_PRODUCTS}
product.datasource.driverClassName=org.h2.Driver
   product.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME}
   product.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_SRSCID}
   product.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_PRODUCTS}
product.datasource.username=${?DB_USERNAME}
   product.datasource.username=${?DB_USERNAME_SRSCID}
   product.datasource.username=${?DB_USERNAME_PRODUCTS}
product.datasource.password=${?DB_PASSWORD}
   product.datasource.password=${?DB_PASSWORD_SRSCID}
   product.datasource.password=${?DB_PASSWORD_PRODUCTS}
product.datasource.connectionTimeout=120000
   product.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT}
   product.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_SRSCID}
   product.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_PRODUCTS}
product.datasource.maximumPoolSize=50
   product.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE}
   product.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_SRSCID}
   product.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_PRODUCTS}
product.jpa.database-platform=org.hibernate.dialect.H2Dialect
   product.jpa.database-platform=${?DB_DIALECT}
   product.jpa.database-platform=${?DB_DIALECT_SRSCID}
   product.jpa.database-platform=${?DB_DIALECT_PRODUCTS}
product.jpa.hibernate.ddl-auto=none
   product.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO}
   product.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_SRSCID}
   product.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_PRODUCTS}
product.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS}
   product.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS_SRSCID}
   product.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS_PRODUCTS}
product.hibernate.show-sql=false


##################################################################
# API SETTINGS                                                  ##
##################################################################

substanceAPI.BaseUrl="http://localhost:8080/"
substanceAPI.BaseUrl=${?API_URL}
gsrs.microservice.substances.api.baseURL=${substanceAPI.BaseUrl}"substances"
gsrs.microservice.substances.api.baseURL=${?API_BASE_URL_SUBSTANCES}

gsrs.microservice.substances.api.headers= {
	"auth-username" = ${?MS_API_HEADERS_AUTH_USERNAME},
	"auth-username" = ${?MS_API_HEADERS_AUTH_USERNAME_SUBSTANCES}
	"auth-key"=${?MS_API_HEADERS_AUTH_KEY},
	"auth-key"=${?MS_API_HEADERS_AUTH_KEY_SUBSTANCES}
}

# Substance API Substance Key Type, choose one (UUID, APPROVAL_ID, or BDNUM)
substance.linking.keyType.productKeyType="UUID"

# Choose one (api or entitymanager) to use Substance API or Substance Entity Manager for ProductSubstanceIndexValueMaker
substance.product.ivm.substancekey.resolver.touse="entitymanager"

gsrs.loopback.port=8080
gsrs.loopback.port=${?APPLICATION_HOST_PORT}
gsrs.loopback.port=${?MS_LOOPBACK_PORT_PRODUCTS}

##################################################################
# CONFIGURATIONS VALIDATORS, PROCESSORS, EXPORT, etc            ##
##################################################################

gsrs.validators.products.list.ProductValidator =
    {
        "validatorClass" = "gov.hhs.gsrs.products.product.validators.ProductValidator",
        "newObjClass" = "gov.hhs.gsrs.products.product.models.Product",
        "order" = 10100
    }


# NOT SURE IF WE NEED THIS OR NOT
gsrs.entityprocessors.list.ProductProcessor =
  {
    "entityClassName" = "gov.hhs.gsrs.products.product.models.Product",
    "processor" = "gov.hhs.gsrs.products.product.processors.ProductProcessor",
    "order" = 10100
  }


# NEED THIS TO AVOID CVApi ERROR
# __aw__ I am not sure if this is a case issue,
# but I get a CVApi error related to substance groups processor unless I comment it out in -core.conf
# ... even with this line.
# this line does however, remove the above processor in this application.conf file
gsrs.entityprocessors.list = null

# exporterfactories

ix.ginas.export.exporterfactories.products.list.ProductExporterFactory =
  {
    "exporterFactoryClass" = "gov.hhs.gsrs.products.product.exporters.ProductExporterFactory",
    "order" =  10100,
    "parameters":{}
  }

ix.ginas.export.exporterfactories.products.list.ProductTextExporterFactory =
  {
    "exporterFactoryClass" = "gov.hhs.gsrs.products.product.exporters.ProductTextExporterFactory",
    "order" =  10200,
    "parameters":{}
  }


# indexers

gsrs.indexers.list.ProductSubstanceIndexValueMaker =
  {
    "indexer" = "gov.hhs.gsrs.products.product.indexers.ProductSubstanceIndexValueMaker",
    "class" = "gov.hhs.gsrs.products.product.models.Product",
    "order" = 10100
  }

# tasks

# For now, turn off any scheduled tasks that may be been defined upstream
gsrs.scheduled-tasks.list = null


##################################################################
# LEGACY AUTHENTICATION                                         ##
##################################################################

ix.authentication.allownonauthenticated = ${?AUTH_ALLOW_NONAUTH}
ix.authentication.autoregister = ${?AUTH_AUTOREGISTER}
ix.authentication.autoregisteractive = ${?AUTH_AUTOREGISTERACTIVE}
ix.authentication.sysadmin-email = ${?AUTH_SYSADMIN_EMAIL}
ix.authentication.trustheader = ${?AUTH_TRUST_HEADER}
ix.authentication.usernameheader = ${?AUTH_USERNAME_HEADER}
ix.authentication.useremailheader = ${?AUTH_EMAIL_HEADER}
ix.authentication.userrolesheader = ${?AUTH_ROLES_HEADER}
ix.authentication.logheaders = ${?AUTH_LOG_HEADERS}

##################################################################
# CUSTOM CONFIGURATION                                          ##
##################################################################

include "conf/products.conf"
include "products.conf"
